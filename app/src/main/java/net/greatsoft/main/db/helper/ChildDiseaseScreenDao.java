package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildDiseaseScreen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_DISEASE_SCREEN".
*/
public class ChildDiseaseScreenDao extends AbstractDao<ChildDiseaseScreen, Void> {

    public static final String TABLENAME = "CHILD_DISEASE_SCREEN";

    /**
     * Properties of entity ChildDiseaseScreen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildDiseaseScreenId = new Property(0, String.class, "childDiseaseScreenId", false, "CHILD_DISEASE_SCREEN_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ChildDiseaseScreenNo = new Property(2, String.class, "childDiseaseScreenNo", false, "CHILD_DISEASE_SCREEN_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SexCode = new Property(4, String.class, "sexCode", false, "SEX_CODE");
        public final static Property BirthDate = new Property(5, java.util.Date.class, "birthDate", false, "BIRTH_DATE");
        public final static Property MotherName = new Property(6, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property MotherBirthDate = new Property(7, java.util.Date.class, "motherBirthDate", false, "MOTHER_BIRTH_DATE");
        public final static Property MotherIdTypeCode = new Property(8, String.class, "motherIdTypeCode", false, "MOTHER_ID_TYPE_CODE");
        public final static Property MotherIdNo = new Property(9, String.class, "motherIdNo", false, "MOTHER_ID_NO");
        public final static Property DeliveryOrgName = new Property(10, String.class, "deliveryOrgName", false, "DELIVERY_ORG_NAME");
        public final static Property ResiCaseNo = new Property(11, String.class, "resiCaseNo", false, "RESI_CASE_NO");
        public final static Property BedNo = new Property(12, String.class, "bedNo", false, "BED_NO");
        public final static Property PregnancyNo = new Property(13, String.class, "pregnancyNo", false, "PREGNANCY_NO");
        public final static Property DeliveryWay = new Property(14, String.class, "deliveryWay", false, "DELIVERY_WAY");
        public final static Property Apgar1Score = new Property(15, Integer.class, "apgar1Score", false, "APGAR1_SCORE");
        public final static Property Apgar5Score = new Property(16, Integer.class, "apgar5Score", false, "APGAR5_SCORE");
        public final static Property Apgar10Score = new Property(17, Integer.class, "apgar10Score", false, "APGAR10_SCORE");
        public final static Property Weight = new Property(18, Double.class, "weight", false, "WEIGHT");
        public final static Property ChildInfo = new Property(19, String.class, "childInfo", false, "CHILD_INFO");
        public final static Property ParturientInfo = new Property(20, String.class, "parturientInfo", false, "PARTURIENT_INFO");
        public final static Property CommunicationAddress = new Property(21, String.class, "communicationAddress", false, "COMMUNICATION_ADDRESS");
        public final static Property HouseholdAddress = new Property(22, String.class, "householdAddress", false, "HOUSEHOLD_ADDRESS");
        public final static Property PresentAddress = new Property(23, String.class, "presentAddress", false, "PRESENT_ADDRESS");
        public final static Property PostalCode = new Property(24, String.class, "postalCode", false, "POSTAL_CODE");
        public final static Property TelNo = new Property(25, String.class, "telNo", false, "TEL_NO");
        public final static Property ScreenType = new Property(26, String.class, "screenType", false, "SCREEN_TYPE");
        public final static Property SampleNo = new Property(27, String.class, "sampleNo", false, "SAMPLE_NO");
        public final static Property BloodTime = new Property(28, java.util.Date.class, "bloodTime", false, "BLOOD_TIME");
        public final static Property BloodWay = new Property(29, String.class, "bloodWay", false, "BLOOD_WAY");
        public final static Property BloodPart = new Property(30, String.class, "bloodPart", false, "BLOOD_PART");
        public final static Property BloodOrgName = new Property(31, String.class, "bloodOrgName", false, "BLOOD_ORG_NAME");
        public final static Property BloodOperatorName = new Property(32, String.class, "bloodOperatorName", false, "BLOOD_OPERATOR_NAME");
        public final static Property SampleSendDate = new Property(33, java.util.Date.class, "sampleSendDate", false, "SAMPLE_SEND_DATE");
        public final static Property SampleReceiveDate = new Property(34, java.util.Date.class, "sampleReceiveDate", false, "SAMPLE_RECEIVE_DATE");
        public final static Property SpecimenQuantity = new Property(35, String.class, "specimenQuantity", false, "SPECIMEN_QUANTITY");
        public final static Property SampleUncheckoutReason = new Property(36, String.class, "sampleUncheckoutReason", false, "SAMPLE_UNCHECKOUT_REASON");
        public final static Property ScreenWay = new Property(37, String.class, "screenWay", false, "SCREEN_WAY");
        public final static Property ExamineDate = new Property(38, java.util.Date.class, "examineDate", false, "EXAMINE_DATE");
        public final static Property ExamineOperatorName = new Property(39, String.class, "examineOperatorName", false, "EXAMINE_OPERATOR_NAME");
        public final static Property ExamineOrgName = new Property(40, String.class, "examineOrgName", false, "EXAMINE_ORG_NAME");
        public final static Property CallbackDate = new Property(41, java.util.Date.class, "callbackDate", false, "CALLBACK_DATE");
        public final static Property NoticeDate = new Property(42, java.util.Date.class, "noticeDate", false, "NOTICE_DATE");
        public final static Property NoticeWay = new Property(43, String.class, "noticeWay", false, "NOTICE_WAY");
        public final static Property NoticeName = new Property(44, String.class, "noticeName", false, "NOTICE_NAME");
        public final static Property NoticeNameRelation = new Property(45, String.class, "noticeNameRelation", false, "NOTICE_NAME_RELATION");
        public final static Property NoticeOperatorName = new Property(46, String.class, "noticeOperatorName", false, "NOTICE_OPERATOR_NAME");
        public final static Property PrecontractDate = new Property(47, java.util.Date.class, "precontractDate", false, "PRECONTRACT_DATE");
        public final static Property CreateDate = new Property(48, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property IsCancel = new Property(49, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(50, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(51, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(52, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(53, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(54, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(55, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(56, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(57, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(58, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(59, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildDiseaseScreenDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDiseaseScreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_DISEASE_SCREEN\" (" + //
                "\"CHILD_DISEASE_SCREEN_ID\" TEXT," + // 0: childDiseaseScreenId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CHILD_DISEASE_SCREEN_NO\" TEXT," + // 2: childDiseaseScreenNo
                "\"NAME\" TEXT," + // 3: name
                "\"SEX_CODE\" TEXT," + // 4: sexCode
                "\"BIRTH_DATE\" INTEGER," + // 5: birthDate
                "\"MOTHER_NAME\" TEXT," + // 6: motherName
                "\"MOTHER_BIRTH_DATE\" INTEGER," + // 7: motherBirthDate
                "\"MOTHER_ID_TYPE_CODE\" TEXT," + // 8: motherIdTypeCode
                "\"MOTHER_ID_NO\" TEXT," + // 9: motherIdNo
                "\"DELIVERY_ORG_NAME\" TEXT," + // 10: deliveryOrgName
                "\"RESI_CASE_NO\" TEXT," + // 11: resiCaseNo
                "\"BED_NO\" TEXT," + // 12: bedNo
                "\"PREGNANCY_NO\" TEXT," + // 13: pregnancyNo
                "\"DELIVERY_WAY\" TEXT," + // 14: deliveryWay
                "\"APGAR1_SCORE\" INTEGER," + // 15: apgar1Score
                "\"APGAR5_SCORE\" INTEGER," + // 16: apgar5Score
                "\"APGAR10_SCORE\" INTEGER," + // 17: apgar10Score
                "\"WEIGHT\" REAL," + // 18: weight
                "\"CHILD_INFO\" TEXT," + // 19: childInfo
                "\"PARTURIENT_INFO\" TEXT," + // 20: parturientInfo
                "\"COMMUNICATION_ADDRESS\" TEXT," + // 21: communicationAddress
                "\"HOUSEHOLD_ADDRESS\" TEXT," + // 22: householdAddress
                "\"PRESENT_ADDRESS\" TEXT," + // 23: presentAddress
                "\"POSTAL_CODE\" TEXT," + // 24: postalCode
                "\"TEL_NO\" TEXT," + // 25: telNo
                "\"SCREEN_TYPE\" TEXT," + // 26: screenType
                "\"SAMPLE_NO\" TEXT," + // 27: sampleNo
                "\"BLOOD_TIME\" INTEGER," + // 28: bloodTime
                "\"BLOOD_WAY\" TEXT," + // 29: bloodWay
                "\"BLOOD_PART\" TEXT," + // 30: bloodPart
                "\"BLOOD_ORG_NAME\" TEXT," + // 31: bloodOrgName
                "\"BLOOD_OPERATOR_NAME\" TEXT," + // 32: bloodOperatorName
                "\"SAMPLE_SEND_DATE\" INTEGER," + // 33: sampleSendDate
                "\"SAMPLE_RECEIVE_DATE\" INTEGER," + // 34: sampleReceiveDate
                "\"SPECIMEN_QUANTITY\" TEXT," + // 35: specimenQuantity
                "\"SAMPLE_UNCHECKOUT_REASON\" TEXT," + // 36: sampleUncheckoutReason
                "\"SCREEN_WAY\" TEXT," + // 37: screenWay
                "\"EXAMINE_DATE\" INTEGER," + // 38: examineDate
                "\"EXAMINE_OPERATOR_NAME\" TEXT," + // 39: examineOperatorName
                "\"EXAMINE_ORG_NAME\" TEXT," + // 40: examineOrgName
                "\"CALLBACK_DATE\" INTEGER," + // 41: callbackDate
                "\"NOTICE_DATE\" INTEGER," + // 42: noticeDate
                "\"NOTICE_WAY\" TEXT," + // 43: noticeWay
                "\"NOTICE_NAME\" TEXT," + // 44: noticeName
                "\"NOTICE_NAME_RELATION\" TEXT," + // 45: noticeNameRelation
                "\"NOTICE_OPERATOR_NAME\" TEXT," + // 46: noticeOperatorName
                "\"PRECONTRACT_DATE\" INTEGER," + // 47: precontractDate
                "\"CREATE_DATE\" INTEGER," + // 48: createDate
                "\"IS_CANCEL\" INTEGER," + // 49: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 50: createOrgId
                "\"ORG_NAME\" TEXT," + // 51: orgName
                "\"CREATOR_ID\" TEXT," + // 52: creatorId
                "\"CREATOR\" TEXT," + // 53: creator
                "\"CREATE_TIME\" INTEGER," + // 54: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 55: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 56: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 57: modifierId
                "\"MODIFIER\" TEXT," + // 58: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 59: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_DISEASE_SCREEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildDiseaseScreen entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(1, childDiseaseScreenId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childDiseaseScreenNo = entity.getChildDiseaseScreenNo();
        if (childDiseaseScreenNo != null) {
            stmt.bindString(3, childDiseaseScreenNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        java.util.Date birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindLong(6, birthDate.getTime());
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(7, motherName);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(8, motherBirthDate.getTime());
        }
 
        String motherIdTypeCode = entity.getMotherIdTypeCode();
        if (motherIdTypeCode != null) {
            stmt.bindString(9, motherIdTypeCode);
        }
 
        String motherIdNo = entity.getMotherIdNo();
        if (motherIdNo != null) {
            stmt.bindString(10, motherIdNo);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(11, deliveryOrgName);
        }
 
        String resiCaseNo = entity.getResiCaseNo();
        if (resiCaseNo != null) {
            stmt.bindString(12, resiCaseNo);
        }
 
        String bedNo = entity.getBedNo();
        if (bedNo != null) {
            stmt.bindString(13, bedNo);
        }
 
        String pregnancyNo = entity.getPregnancyNo();
        if (pregnancyNo != null) {
            stmt.bindString(14, pregnancyNo);
        }
 
        String deliveryWay = entity.getDeliveryWay();
        if (deliveryWay != null) {
            stmt.bindString(15, deliveryWay);
        }
 
        Integer apgar1Score = entity.getApgar1Score();
        if (apgar1Score != null) {
            stmt.bindLong(16, apgar1Score);
        }
 
        Integer apgar5Score = entity.getApgar5Score();
        if (apgar5Score != null) {
            stmt.bindLong(17, apgar5Score);
        }
 
        Integer apgar10Score = entity.getApgar10Score();
        if (apgar10Score != null) {
            stmt.bindLong(18, apgar10Score);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(19, weight);
        }
 
        String childInfo = entity.getChildInfo();
        if (childInfo != null) {
            stmt.bindString(20, childInfo);
        }
 
        String parturientInfo = entity.getParturientInfo();
        if (parturientInfo != null) {
            stmt.bindString(21, parturientInfo);
        }
 
        String communicationAddress = entity.getCommunicationAddress();
        if (communicationAddress != null) {
            stmt.bindString(22, communicationAddress);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(23, householdAddress);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(24, presentAddress);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(25, postalCode);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(26, telNo);
        }
 
        String screenType = entity.getScreenType();
        if (screenType != null) {
            stmt.bindString(27, screenType);
        }
 
        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(28, sampleNo);
        }
 
        java.util.Date bloodTime = entity.getBloodTime();
        if (bloodTime != null) {
            stmt.bindLong(29, bloodTime.getTime());
        }
 
        String bloodWay = entity.getBloodWay();
        if (bloodWay != null) {
            stmt.bindString(30, bloodWay);
        }
 
        String bloodPart = entity.getBloodPart();
        if (bloodPart != null) {
            stmt.bindString(31, bloodPart);
        }
 
        String bloodOrgName = entity.getBloodOrgName();
        if (bloodOrgName != null) {
            stmt.bindString(32, bloodOrgName);
        }
 
        String bloodOperatorName = entity.getBloodOperatorName();
        if (bloodOperatorName != null) {
            stmt.bindString(33, bloodOperatorName);
        }
 
        java.util.Date sampleSendDate = entity.getSampleSendDate();
        if (sampleSendDate != null) {
            stmt.bindLong(34, sampleSendDate.getTime());
        }
 
        java.util.Date sampleReceiveDate = entity.getSampleReceiveDate();
        if (sampleReceiveDate != null) {
            stmt.bindLong(35, sampleReceiveDate.getTime());
        }
 
        String specimenQuantity = entity.getSpecimenQuantity();
        if (specimenQuantity != null) {
            stmt.bindString(36, specimenQuantity);
        }
 
        String sampleUncheckoutReason = entity.getSampleUncheckoutReason();
        if (sampleUncheckoutReason != null) {
            stmt.bindString(37, sampleUncheckoutReason);
        }
 
        String screenWay = entity.getScreenWay();
        if (screenWay != null) {
            stmt.bindString(38, screenWay);
        }
 
        java.util.Date examineDate = entity.getExamineDate();
        if (examineDate != null) {
            stmt.bindLong(39, examineDate.getTime());
        }
 
        String examineOperatorName = entity.getExamineOperatorName();
        if (examineOperatorName != null) {
            stmt.bindString(40, examineOperatorName);
        }
 
        String examineOrgName = entity.getExamineOrgName();
        if (examineOrgName != null) {
            stmt.bindString(41, examineOrgName);
        }
 
        java.util.Date callbackDate = entity.getCallbackDate();
        if (callbackDate != null) {
            stmt.bindLong(42, callbackDate.getTime());
        }
 
        java.util.Date noticeDate = entity.getNoticeDate();
        if (noticeDate != null) {
            stmt.bindLong(43, noticeDate.getTime());
        }
 
        String noticeWay = entity.getNoticeWay();
        if (noticeWay != null) {
            stmt.bindString(44, noticeWay);
        }
 
        String noticeName = entity.getNoticeName();
        if (noticeName != null) {
            stmt.bindString(45, noticeName);
        }
 
        String noticeNameRelation = entity.getNoticeNameRelation();
        if (noticeNameRelation != null) {
            stmt.bindString(46, noticeNameRelation);
        }
 
        String noticeOperatorName = entity.getNoticeOperatorName();
        if (noticeOperatorName != null) {
            stmt.bindString(47, noticeOperatorName);
        }
 
        java.util.Date precontractDate = entity.getPrecontractDate();
        if (precontractDate != null) {
            stmt.bindLong(48, precontractDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(49, createDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(50, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(51, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(52, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(53, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(54, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(55, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(56, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(57, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(58, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(59, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(60, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildDiseaseScreen entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(1, childDiseaseScreenId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childDiseaseScreenNo = entity.getChildDiseaseScreenNo();
        if (childDiseaseScreenNo != null) {
            stmt.bindString(3, childDiseaseScreenNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        java.util.Date birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindLong(6, birthDate.getTime());
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(7, motherName);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(8, motherBirthDate.getTime());
        }
 
        String motherIdTypeCode = entity.getMotherIdTypeCode();
        if (motherIdTypeCode != null) {
            stmt.bindString(9, motherIdTypeCode);
        }
 
        String motherIdNo = entity.getMotherIdNo();
        if (motherIdNo != null) {
            stmt.bindString(10, motherIdNo);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(11, deliveryOrgName);
        }
 
        String resiCaseNo = entity.getResiCaseNo();
        if (resiCaseNo != null) {
            stmt.bindString(12, resiCaseNo);
        }
 
        String bedNo = entity.getBedNo();
        if (bedNo != null) {
            stmt.bindString(13, bedNo);
        }
 
        String pregnancyNo = entity.getPregnancyNo();
        if (pregnancyNo != null) {
            stmt.bindString(14, pregnancyNo);
        }
 
        String deliveryWay = entity.getDeliveryWay();
        if (deliveryWay != null) {
            stmt.bindString(15, deliveryWay);
        }
 
        Integer apgar1Score = entity.getApgar1Score();
        if (apgar1Score != null) {
            stmt.bindLong(16, apgar1Score);
        }
 
        Integer apgar5Score = entity.getApgar5Score();
        if (apgar5Score != null) {
            stmt.bindLong(17, apgar5Score);
        }
 
        Integer apgar10Score = entity.getApgar10Score();
        if (apgar10Score != null) {
            stmt.bindLong(18, apgar10Score);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(19, weight);
        }
 
        String childInfo = entity.getChildInfo();
        if (childInfo != null) {
            stmt.bindString(20, childInfo);
        }
 
        String parturientInfo = entity.getParturientInfo();
        if (parturientInfo != null) {
            stmt.bindString(21, parturientInfo);
        }
 
        String communicationAddress = entity.getCommunicationAddress();
        if (communicationAddress != null) {
            stmt.bindString(22, communicationAddress);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(23, householdAddress);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(24, presentAddress);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(25, postalCode);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(26, telNo);
        }
 
        String screenType = entity.getScreenType();
        if (screenType != null) {
            stmt.bindString(27, screenType);
        }
 
        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(28, sampleNo);
        }
 
        java.util.Date bloodTime = entity.getBloodTime();
        if (bloodTime != null) {
            stmt.bindLong(29, bloodTime.getTime());
        }
 
        String bloodWay = entity.getBloodWay();
        if (bloodWay != null) {
            stmt.bindString(30, bloodWay);
        }
 
        String bloodPart = entity.getBloodPart();
        if (bloodPart != null) {
            stmt.bindString(31, bloodPart);
        }
 
        String bloodOrgName = entity.getBloodOrgName();
        if (bloodOrgName != null) {
            stmt.bindString(32, bloodOrgName);
        }
 
        String bloodOperatorName = entity.getBloodOperatorName();
        if (bloodOperatorName != null) {
            stmt.bindString(33, bloodOperatorName);
        }
 
        java.util.Date sampleSendDate = entity.getSampleSendDate();
        if (sampleSendDate != null) {
            stmt.bindLong(34, sampleSendDate.getTime());
        }
 
        java.util.Date sampleReceiveDate = entity.getSampleReceiveDate();
        if (sampleReceiveDate != null) {
            stmt.bindLong(35, sampleReceiveDate.getTime());
        }
 
        String specimenQuantity = entity.getSpecimenQuantity();
        if (specimenQuantity != null) {
            stmt.bindString(36, specimenQuantity);
        }
 
        String sampleUncheckoutReason = entity.getSampleUncheckoutReason();
        if (sampleUncheckoutReason != null) {
            stmt.bindString(37, sampleUncheckoutReason);
        }
 
        String screenWay = entity.getScreenWay();
        if (screenWay != null) {
            stmt.bindString(38, screenWay);
        }
 
        java.util.Date examineDate = entity.getExamineDate();
        if (examineDate != null) {
            stmt.bindLong(39, examineDate.getTime());
        }
 
        String examineOperatorName = entity.getExamineOperatorName();
        if (examineOperatorName != null) {
            stmt.bindString(40, examineOperatorName);
        }
 
        String examineOrgName = entity.getExamineOrgName();
        if (examineOrgName != null) {
            stmt.bindString(41, examineOrgName);
        }
 
        java.util.Date callbackDate = entity.getCallbackDate();
        if (callbackDate != null) {
            stmt.bindLong(42, callbackDate.getTime());
        }
 
        java.util.Date noticeDate = entity.getNoticeDate();
        if (noticeDate != null) {
            stmt.bindLong(43, noticeDate.getTime());
        }
 
        String noticeWay = entity.getNoticeWay();
        if (noticeWay != null) {
            stmt.bindString(44, noticeWay);
        }
 
        String noticeName = entity.getNoticeName();
        if (noticeName != null) {
            stmt.bindString(45, noticeName);
        }
 
        String noticeNameRelation = entity.getNoticeNameRelation();
        if (noticeNameRelation != null) {
            stmt.bindString(46, noticeNameRelation);
        }
 
        String noticeOperatorName = entity.getNoticeOperatorName();
        if (noticeOperatorName != null) {
            stmt.bindString(47, noticeOperatorName);
        }
 
        java.util.Date precontractDate = entity.getPrecontractDate();
        if (precontractDate != null) {
            stmt.bindLong(48, precontractDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(49, createDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(50, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(51, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(52, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(53, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(54, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(55, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(56, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(57, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(58, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(59, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(60, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildDiseaseScreen readEntity(Cursor cursor, int offset) {
        ChildDiseaseScreen entity = new ChildDiseaseScreen( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childDiseaseScreenId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childDiseaseScreenNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexCode
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // birthDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // motherName
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // motherBirthDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // motherIdTypeCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // motherIdNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // deliveryOrgName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // resiCaseNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bedNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pregnancyNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deliveryWay
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // apgar1Score
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // apgar5Score
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // apgar10Score
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // weight
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // childInfo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // parturientInfo
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // communicationAddress
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // householdAddress
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // presentAddress
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // postalCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // telNo
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // screenType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // sampleNo
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // bloodTime
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // bloodWay
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // bloodPart
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // bloodOrgName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // bloodOperatorName
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // sampleSendDate
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // sampleReceiveDate
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // specimenQuantity
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // sampleUncheckoutReason
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // screenWay
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)), // examineDate
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // examineOperatorName
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // examineOrgName
            cursor.isNull(offset + 41) ? null : new java.util.Date(cursor.getLong(offset + 41)), // callbackDate
            cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)), // noticeDate
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // noticeWay
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // noticeName
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // noticeNameRelation
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // noticeOperatorName
            cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)), // precontractDate
            cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)), // createDate
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // isCancel
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // createOrgId
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // orgName
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // creatorId
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // creator
            cursor.isNull(offset + 54) ? null : new java.util.Date(cursor.getLong(offset + 54)), // createTime
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // modifiedOrgId
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // modifiedOrgName
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // modifierId
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // modifier
            cursor.isNull(offset + 59) ? null : new java.util.Date(cursor.getLong(offset + 59)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildDiseaseScreen entity, int offset) {
        entity.setChildDiseaseScreenId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildDiseaseScreenNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSexCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMotherName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMotherBirthDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setMotherIdTypeCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMotherIdNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeliveryOrgName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setResiCaseNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBedNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPregnancyNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeliveryWay(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setApgar1Score(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setApgar5Score(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setApgar10Score(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setWeight(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setChildInfo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setParturientInfo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCommunicationAddress(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHouseholdAddress(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPresentAddress(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPostalCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTelNo(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setScreenType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSampleNo(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setBloodTime(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setBloodWay(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setBloodPart(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setBloodOrgName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setBloodOperatorName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSampleSendDate(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setSampleReceiveDate(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setSpecimenQuantity(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSampleUncheckoutReason(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setScreenWay(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setExamineDate(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
        entity.setExamineOperatorName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setExamineOrgName(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCallbackDate(cursor.isNull(offset + 41) ? null : new java.util.Date(cursor.getLong(offset + 41)));
        entity.setNoticeDate(cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)));
        entity.setNoticeWay(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setNoticeName(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setNoticeNameRelation(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setNoticeOperatorName(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setPrecontractDate(cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)));
        entity.setCreateDate(cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)));
        entity.setIsCancel(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setCreateOrgId(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setOrgName(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setCreatorId(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setCreator(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setCreateTime(cursor.isNull(offset + 54) ? null : new java.util.Date(cursor.getLong(offset + 54)));
        entity.setModifiedOrgId(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setModifiedOrgName(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setModifierId(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setModifier(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setModifiedTime(cursor.isNull(offset + 59) ? null : new java.util.Date(cursor.getLong(offset + 59)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildDiseaseScreen entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildDiseaseScreen entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
