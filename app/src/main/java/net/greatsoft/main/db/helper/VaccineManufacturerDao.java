package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.vaccine.VaccineManufacturer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VACCINE_MANUFACTURER".
*/
public class VaccineManufacturerDao extends AbstractDao<VaccineManufacturer, Void> {

    public static final String TABLENAME = "VACCINE_MANUFACTURER";

    /**
     * Properties of entity VaccineManufacturer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VaccineManufacturerId = new Property(0, String.class, "vaccineManufacturerId", false, "VACCINE_MANUFACTURER_ID");
        public final static Property VaccineId = new Property(1, String.class, "vaccineId", false, "VACCINE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Adrress = new Property(3, String.class, "adrress", false, "ADRRESS");
        public final static Property Linkman = new Property(4, String.class, "linkman", false, "LINKMAN");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property IsValid = new Property(6, Integer.class, "isValid", false, "IS_VALID");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property IsCancel = new Property(8, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(9, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(10, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(11, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(12, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(13, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(14, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(15, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(16, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(17, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(18, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public VaccineManufacturerDao(DaoConfig config) {
        super(config);
    }
    
    public VaccineManufacturerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VACCINE_MANUFACTURER\" (" + //
                "\"VACCINE_MANUFACTURER_ID\" TEXT," + // 0: vaccineManufacturerId
                "\"VACCINE_ID\" TEXT," + // 1: vaccineId
                "\"NAME\" TEXT," + // 2: name
                "\"ADRRESS\" TEXT," + // 3: adrress
                "\"LINKMAN\" TEXT," + // 4: linkman
                "\"PHONE\" TEXT," + // 5: phone
                "\"IS_VALID\" INTEGER," + // 6: isValid
                "\"REMARK\" TEXT," + // 7: remark
                "\"IS_CANCEL\" INTEGER," + // 8: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 9: createOrgId
                "\"ORG_NAME\" TEXT," + // 10: orgName
                "\"CREATOR_ID\" TEXT," + // 11: creatorId
                "\"CREATOR\" TEXT," + // 12: creator
                "\"CREATE_TIME\" INTEGER," + // 13: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 14: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 15: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 16: modifierId
                "\"MODIFIER\" TEXT," + // 17: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 18: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VACCINE_MANUFACTURER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VaccineManufacturer entity) {
        stmt.clearBindings();
 
        String vaccineManufacturerId = entity.getVaccineManufacturerId();
        if (vaccineManufacturerId != null) {
            stmt.bindString(1, vaccineManufacturerId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String adrress = entity.getAdrress();
        if (adrress != null) {
            stmt.bindString(4, adrress);
        }
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(5, linkman);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(7, isValid);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(9, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(10, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(11, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(12, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(13, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(14, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(15, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(16, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(17, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(18, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(19, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VaccineManufacturer entity) {
        stmt.clearBindings();
 
        String vaccineManufacturerId = entity.getVaccineManufacturerId();
        if (vaccineManufacturerId != null) {
            stmt.bindString(1, vaccineManufacturerId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String adrress = entity.getAdrress();
        if (adrress != null) {
            stmt.bindString(4, adrress);
        }
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(5, linkman);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(7, isValid);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(9, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(10, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(11, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(12, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(13, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(14, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(15, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(16, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(17, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(18, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(19, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VaccineManufacturer readEntity(Cursor cursor, int offset) {
        VaccineManufacturer entity = new VaccineManufacturer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vaccineManufacturerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vaccineId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adrress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // linkman
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isValid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isCancel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createOrgId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orgName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // creatorId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // creator
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // createTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // modifiedOrgId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modifiedOrgName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modifierId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // modifier
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VaccineManufacturer entity, int offset) {
        entity.setVaccineManufacturerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVaccineId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdrress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLinkman(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsValid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCancel(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreateOrgId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrgName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatorId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreator(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateTime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setModifiedOrgId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModifiedOrgName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifierId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setModifier(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setModifiedTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VaccineManufacturer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VaccineManufacturer entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
