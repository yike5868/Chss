package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildDiseaseScreenResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_DISEASE_SCREEN_RESULT".
*/
public class ChildDiseaseScreenResultDao extends AbstractDao<ChildDiseaseScreenResult, Void> {

    public static final String TABLENAME = "CHILD_DISEASE_SCREEN_RESULT";

    /**
     * Properties of entity ChildDiseaseScreenResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildDiseaseScreenResultId = new Property(0, String.class, "childDiseaseScreenResultId", false, "CHILD_DISEASE_SCREEN_RESULT_ID");
        public final static Property ChildDiseaseScreenId = new Property(1, String.class, "childDiseaseScreenId", false, "CHILD_DISEASE_SCREEN_ID");
        public final static Property ChildScreenItem = new Property(2, String.class, "childScreenItem", false, "CHILD_SCREEN_ITEM");
        public final static Property ChildScreenResult = new Property(3, String.class, "childScreenResult", false, "CHILD_SCREEN_RESULT");
        public final static Property ResultAssessment = new Property(4, String.class, "resultAssessment", false, "RESULT_ASSESSMENT");
        public final static Property Notes = new Property(5, String.class, "notes", false, "NOTES");
        public final static Property IsCancel = new Property(6, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(7, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(8, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(9, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(10, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(11, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(12, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(13, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(14, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(15, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(16, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildDiseaseScreenResultDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDiseaseScreenResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_DISEASE_SCREEN_RESULT\" (" + //
                "\"CHILD_DISEASE_SCREEN_RESULT_ID\" TEXT," + // 0: childDiseaseScreenResultId
                "\"CHILD_DISEASE_SCREEN_ID\" TEXT," + // 1: childDiseaseScreenId
                "\"CHILD_SCREEN_ITEM\" TEXT," + // 2: childScreenItem
                "\"CHILD_SCREEN_RESULT\" TEXT," + // 3: childScreenResult
                "\"RESULT_ASSESSMENT\" TEXT," + // 4: resultAssessment
                "\"NOTES\" TEXT," + // 5: notes
                "\"IS_CANCEL\" INTEGER," + // 6: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 7: createOrgId
                "\"ORG_NAME\" TEXT," + // 8: orgName
                "\"CREATOR_ID\" TEXT," + // 9: creatorId
                "\"CREATOR\" TEXT," + // 10: creator
                "\"CREATE_TIME\" INTEGER," + // 11: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 12: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 13: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 14: modifierId
                "\"MODIFIER\" TEXT," + // 15: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 16: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_DISEASE_SCREEN_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildDiseaseScreenResult entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenResultId = entity.getChildDiseaseScreenResultId();
        if (childDiseaseScreenResultId != null) {
            stmt.bindString(1, childDiseaseScreenResultId);
        }
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(2, childDiseaseScreenId);
        }
 
        String childScreenItem = entity.getChildScreenItem();
        if (childScreenItem != null) {
            stmt.bindString(3, childScreenItem);
        }
 
        String childScreenResult = entity.getChildScreenResult();
        if (childScreenResult != null) {
            stmt.bindString(4, childScreenResult);
        }
 
        String resultAssessment = entity.getResultAssessment();
        if (resultAssessment != null) {
            stmt.bindString(5, resultAssessment);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(6, notes);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(8, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(9, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(10, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(11, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(13, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(14, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(15, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(16, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(17, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildDiseaseScreenResult entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenResultId = entity.getChildDiseaseScreenResultId();
        if (childDiseaseScreenResultId != null) {
            stmt.bindString(1, childDiseaseScreenResultId);
        }
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(2, childDiseaseScreenId);
        }
 
        String childScreenItem = entity.getChildScreenItem();
        if (childScreenItem != null) {
            stmt.bindString(3, childScreenItem);
        }
 
        String childScreenResult = entity.getChildScreenResult();
        if (childScreenResult != null) {
            stmt.bindString(4, childScreenResult);
        }
 
        String resultAssessment = entity.getResultAssessment();
        if (resultAssessment != null) {
            stmt.bindString(5, resultAssessment);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(6, notes);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(8, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(9, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(10, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(11, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(13, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(14, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(15, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(16, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(17, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildDiseaseScreenResult readEntity(Cursor cursor, int offset) {
        ChildDiseaseScreenResult entity = new ChildDiseaseScreenResult( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childDiseaseScreenResultId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // childDiseaseScreenId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childScreenItem
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // childScreenResult
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // resultAssessment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // notes
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isCancel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createOrgId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orgName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // creatorId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // creator
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // modifiedOrgId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // modifiedOrgName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // modifierId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modifier
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildDiseaseScreenResult entity, int offset) {
        entity.setChildDiseaseScreenResultId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChildDiseaseScreenId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildScreenItem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChildScreenResult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResultAssessment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCancel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreateOrgId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrgName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatorId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreator(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setModifiedOrgId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setModifiedOrgName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setModifierId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModifier(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifiedTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildDiseaseScreenResult entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildDiseaseScreenResult entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
