package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.tuberculosis.TuberculosisReferral;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TUBERCULOSIS_REFERRAL".
*/
public class TuberculosisReferralDao extends AbstractDao<TuberculosisReferral, Void> {

    public static final String TABLENAME = "TUBERCULOSIS_REFERRAL";

    /**
     * Properties of entity TuberculosisReferral.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TuberculosisReferralId = new Property(0, String.class, "tuberculosisReferralId", false, "TUBERCULOSIS_REFERRAL_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property PersonInfoNo = new Property(2, String.class, "personInfoNo", false, "PERSON_INFO_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SexValue = new Property(4, String.class, "sexValue", false, "SEX_VALUE");
        public final static Property Age = new Property(5, Integer.class, "age", false, "AGE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property TransferIntoDate = new Property(8, java.util.Date.class, "transferIntoDate", false, "TRANSFER_INTO_DATE");
        public final static Property TransferIntoOrg = new Property(9, String.class, "transferIntoOrg", false, "TRANSFER_INTO_ORG");
        public final static Property TransferIntoDept = new Property(10, String.class, "transferIntoDept", false, "TRANSFER_INTO_DEPT");
        public final static Property TransferIntoDoctor = new Property(11, String.class, "transferIntoDoctor", false, "TRANSFER_INTO_DOCTOR");
        public final static Property DoctorSignId = new Property(12, String.class, "doctorSignId", false, "DOCTOR_SIGN_ID");
        public final static Property DoctorSignName = new Property(13, String.class, "doctorSignName", false, "DOCTOR_SIGN_NAME");
        public final static Property DoctorSignDate = new Property(14, java.util.Date.class, "doctorSignDate", false, "DOCTOR_SIGN_DATE");
        public final static Property Fringeeffect = new Property(15, String.class, "fringeeffect", false, "FRINGEEFFECT");
        public final static Property TransferOutReason = new Property(16, String.class, "transferOutReason", false, "TRANSFER_OUT_REASON");
        public final static Property DiseaseHistory = new Property(17, String.class, "diseaseHistory", false, "DISEASE_HISTORY");
        public final static Property Treatment = new Property(18, String.class, "treatment", false, "TREATMENT");
        public final static Property TransferOutOrg = new Property(19, String.class, "transferOutOrg", false, "TRANSFER_OUT_ORG");
        public final static Property Telephone = new Property(20, String.class, "telephone", false, "TELEPHONE");
        public final static Property IsCancel = new Property(21, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(22, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(23, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(24, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(25, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(26, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(27, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(28, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(29, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(30, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(31, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public TuberculosisReferralDao(DaoConfig config) {
        super(config);
    }
    
    public TuberculosisReferralDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TUBERCULOSIS_REFERRAL\" (" + //
                "\"TUBERCULOSIS_REFERRAL_ID\" TEXT," + // 0: tuberculosisReferralId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"PERSON_INFO_NO\" TEXT," + // 2: personInfoNo
                "\"NAME\" TEXT," + // 3: name
                "\"SEX_VALUE\" TEXT," + // 4: sexValue
                "\"AGE\" INTEGER," + // 5: age
                "\"ADDRESS\" TEXT," + // 6: address
                "\"PHONE\" TEXT," + // 7: phone
                "\"TRANSFER_INTO_DATE\" INTEGER," + // 8: transferIntoDate
                "\"TRANSFER_INTO_ORG\" TEXT," + // 9: transferIntoOrg
                "\"TRANSFER_INTO_DEPT\" TEXT," + // 10: transferIntoDept
                "\"TRANSFER_INTO_DOCTOR\" TEXT," + // 11: transferIntoDoctor
                "\"DOCTOR_SIGN_ID\" TEXT," + // 12: doctorSignId
                "\"DOCTOR_SIGN_NAME\" TEXT," + // 13: doctorSignName
                "\"DOCTOR_SIGN_DATE\" INTEGER," + // 14: doctorSignDate
                "\"FRINGEEFFECT\" TEXT," + // 15: fringeeffect
                "\"TRANSFER_OUT_REASON\" TEXT," + // 16: transferOutReason
                "\"DISEASE_HISTORY\" TEXT," + // 17: diseaseHistory
                "\"TREATMENT\" TEXT," + // 18: treatment
                "\"TRANSFER_OUT_ORG\" TEXT," + // 19: transferOutOrg
                "\"TELEPHONE\" TEXT," + // 20: telephone
                "\"IS_CANCEL\" INTEGER," + // 21: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 22: createOrgId
                "\"ORG_NAME\" TEXT," + // 23: orgName
                "\"CREATOR_ID\" TEXT," + // 24: creatorId
                "\"CREATOR\" TEXT," + // 25: creator
                "\"CREATE_TIME\" INTEGER," + // 26: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 27: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 28: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 29: modifierId
                "\"MODIFIER\" TEXT," + // 30: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 31: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TUBERCULOSIS_REFERRAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TuberculosisReferral entity) {
        stmt.clearBindings();
 
        String tuberculosisReferralId = entity.getTuberculosisReferralId();
        if (tuberculosisReferralId != null) {
            stmt.bindString(1, tuberculosisReferralId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(3, personInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(5, sexValue);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        java.util.Date transferIntoDate = entity.getTransferIntoDate();
        if (transferIntoDate != null) {
            stmt.bindLong(9, transferIntoDate.getTime());
        }
 
        String transferIntoOrg = entity.getTransferIntoOrg();
        if (transferIntoOrg != null) {
            stmt.bindString(10, transferIntoOrg);
        }
 
        String transferIntoDept = entity.getTransferIntoDept();
        if (transferIntoDept != null) {
            stmt.bindString(11, transferIntoDept);
        }
 
        String transferIntoDoctor = entity.getTransferIntoDoctor();
        if (transferIntoDoctor != null) {
            stmt.bindString(12, transferIntoDoctor);
        }
 
        String doctorSignId = entity.getDoctorSignId();
        if (doctorSignId != null) {
            stmt.bindString(13, doctorSignId);
        }
 
        String doctorSignName = entity.getDoctorSignName();
        if (doctorSignName != null) {
            stmt.bindString(14, doctorSignName);
        }
 
        java.util.Date doctorSignDate = entity.getDoctorSignDate();
        if (doctorSignDate != null) {
            stmt.bindLong(15, doctorSignDate.getTime());
        }
 
        String fringeeffect = entity.getFringeeffect();
        if (fringeeffect != null) {
            stmt.bindString(16, fringeeffect);
        }
 
        String transferOutReason = entity.getTransferOutReason();
        if (transferOutReason != null) {
            stmt.bindString(17, transferOutReason);
        }
 
        String diseaseHistory = entity.getDiseaseHistory();
        if (diseaseHistory != null) {
            stmt.bindString(18, diseaseHistory);
        }
 
        String treatment = entity.getTreatment();
        if (treatment != null) {
            stmt.bindString(19, treatment);
        }
 
        String transferOutOrg = entity.getTransferOutOrg();
        if (transferOutOrg != null) {
            stmt.bindString(20, transferOutOrg);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(21, telephone);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(22, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(23, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(24, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(25, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(26, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(27, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(28, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(29, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(30, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(31, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(32, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TuberculosisReferral entity) {
        stmt.clearBindings();
 
        String tuberculosisReferralId = entity.getTuberculosisReferralId();
        if (tuberculosisReferralId != null) {
            stmt.bindString(1, tuberculosisReferralId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(3, personInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(5, sexValue);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        java.util.Date transferIntoDate = entity.getTransferIntoDate();
        if (transferIntoDate != null) {
            stmt.bindLong(9, transferIntoDate.getTime());
        }
 
        String transferIntoOrg = entity.getTransferIntoOrg();
        if (transferIntoOrg != null) {
            stmt.bindString(10, transferIntoOrg);
        }
 
        String transferIntoDept = entity.getTransferIntoDept();
        if (transferIntoDept != null) {
            stmt.bindString(11, transferIntoDept);
        }
 
        String transferIntoDoctor = entity.getTransferIntoDoctor();
        if (transferIntoDoctor != null) {
            stmt.bindString(12, transferIntoDoctor);
        }
 
        String doctorSignId = entity.getDoctorSignId();
        if (doctorSignId != null) {
            stmt.bindString(13, doctorSignId);
        }
 
        String doctorSignName = entity.getDoctorSignName();
        if (doctorSignName != null) {
            stmt.bindString(14, doctorSignName);
        }
 
        java.util.Date doctorSignDate = entity.getDoctorSignDate();
        if (doctorSignDate != null) {
            stmt.bindLong(15, doctorSignDate.getTime());
        }
 
        String fringeeffect = entity.getFringeeffect();
        if (fringeeffect != null) {
            stmt.bindString(16, fringeeffect);
        }
 
        String transferOutReason = entity.getTransferOutReason();
        if (transferOutReason != null) {
            stmt.bindString(17, transferOutReason);
        }
 
        String diseaseHistory = entity.getDiseaseHistory();
        if (diseaseHistory != null) {
            stmt.bindString(18, diseaseHistory);
        }
 
        String treatment = entity.getTreatment();
        if (treatment != null) {
            stmt.bindString(19, treatment);
        }
 
        String transferOutOrg = entity.getTransferOutOrg();
        if (transferOutOrg != null) {
            stmt.bindString(20, transferOutOrg);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(21, telephone);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(22, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(23, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(24, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(25, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(26, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(27, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(28, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(29, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(30, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(31, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(32, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TuberculosisReferral readEntity(Cursor cursor, int offset) {
        TuberculosisReferral entity = new TuberculosisReferral( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tuberculosisReferralId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexValue
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // transferIntoDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // transferIntoOrg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // transferIntoDept
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // transferIntoDoctor
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // doctorSignId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // doctorSignName
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // doctorSignDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fringeeffect
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // transferOutReason
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // diseaseHistory
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // treatment
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // transferOutOrg
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // telephone
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // isCancel
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // createOrgId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // orgName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // creatorId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // creator
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // createTime
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // modifiedOrgId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // modifiedOrgName
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // modifierId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // modifier
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TuberculosisReferral entity, int offset) {
        entity.setTuberculosisReferralId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSexValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTransferIntoDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setTransferIntoOrg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTransferIntoDept(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTransferIntoDoctor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDoctorSignId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDoctorSignName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDoctorSignDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setFringeeffect(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTransferOutReason(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDiseaseHistory(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTreatment(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTransferOutOrg(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTelephone(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsCancel(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setCreateOrgId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOrgName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCreatorId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCreator(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreateTime(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setModifiedOrgId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setModifiedOrgName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setModifierId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setModifier(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setModifiedTime(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TuberculosisReferral entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TuberculosisReferral entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
