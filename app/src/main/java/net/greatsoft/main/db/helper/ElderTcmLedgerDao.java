package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.old.ElderTcmLedger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ELDER_TCM_LEDGER".
*/
public class ElderTcmLedgerDao extends AbstractDao<ElderTcmLedger, Void> {

    public static final String TABLENAME = "ELDER_TCM_LEDGER";

    /**
     * Properties of entity ElderTcmLedger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ElderTcmLedgerId = new Property(0, String.class, "elderTcmLedgerId", false, "ELDER_TCM_LEDGER_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ElderTcmHealthId = new Property(2, String.class, "elderTcmHealthId", false, "ELDER_TCM_HEALTH_ID");
        public final static Property PersonInfoNo = new Property(3, String.class, "personInfoNo", false, "PERSON_INFO_NO");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property FollowupDate = new Property(6, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property QiDeficiency = new Property(7, String.class, "qiDeficiency", false, "QI_DEFICIENCY");
        public final static Property YangDeficiency = new Property(8, String.class, "yangDeficiency", false, "YANG_DEFICIENCY");
        public final static Property YinDeficiency = new Property(9, String.class, "yinDeficiency", false, "YIN_DEFICIENCY");
        public final static Property PhlegmWet = new Property(10, String.class, "phlegmWet", false, "PHLEGM_WET");
        public final static Property DampHeat = new Property(11, String.class, "dampHeat", false, "DAMP_HEAT");
        public final static Property BloodStasis = new Property(12, String.class, "bloodStasis", false, "BLOOD_STASIS");
        public final static Property QiDepression = new Property(13, String.class, "qiDepression", false, "QI_DEPRESSION");
        public final static Property SpecialDiathsis = new Property(14, String.class, "specialDiathsis", false, "SPECIAL_DIATHSIS");
        public final static Property GentleQuality = new Property(15, String.class, "gentleQuality", false, "GENTLE_QUALITY");
        public final static Property EmotionGuide = new Property(16, String.class, "emotionGuide", false, "EMOTION_GUIDE");
        public final static Property DietGuide = new Property(17, String.class, "dietGuide", false, "DIET_GUIDE");
        public final static Property LivingGuide = new Property(18, String.class, "livingGuide", false, "LIVING_GUIDE");
        public final static Property SportsGuide = new Property(19, String.class, "sportsGuide", false, "SPORTS_GUIDE");
        public final static Property AcupointGuide = new Property(20, String.class, "acupointGuide", false, "ACUPOINT_GUIDE");
        public final static Property OtherGuide = new Property(21, String.class, "otherGuide", false, "OTHER_GUIDE");
        public final static Property IsCancel = new Property(22, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(23, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(24, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(25, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(26, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(27, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(28, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(29, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(30, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(31, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(32, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ElderTcmLedgerDao(DaoConfig config) {
        super(config);
    }
    
    public ElderTcmLedgerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ELDER_TCM_LEDGER\" (" + //
                "\"ELDER_TCM_LEDGER_ID\" TEXT," + // 0: elderTcmLedgerId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"ELDER_TCM_HEALTH_ID\" TEXT," + // 2: elderTcmHealthId
                "\"PERSON_INFO_NO\" TEXT," + // 3: personInfoNo
                "\"NAME\" TEXT," + // 4: name
                "\"ADDRESS\" TEXT," + // 5: address
                "\"FOLLOWUP_DATE\" INTEGER," + // 6: followupDate
                "\"QI_DEFICIENCY\" TEXT," + // 7: qiDeficiency
                "\"YANG_DEFICIENCY\" TEXT," + // 8: yangDeficiency
                "\"YIN_DEFICIENCY\" TEXT," + // 9: yinDeficiency
                "\"PHLEGM_WET\" TEXT," + // 10: phlegmWet
                "\"DAMP_HEAT\" TEXT," + // 11: dampHeat
                "\"BLOOD_STASIS\" TEXT," + // 12: bloodStasis
                "\"QI_DEPRESSION\" TEXT," + // 13: qiDepression
                "\"SPECIAL_DIATHSIS\" TEXT," + // 14: specialDiathsis
                "\"GENTLE_QUALITY\" TEXT," + // 15: gentleQuality
                "\"EMOTION_GUIDE\" TEXT," + // 16: emotionGuide
                "\"DIET_GUIDE\" TEXT," + // 17: dietGuide
                "\"LIVING_GUIDE\" TEXT," + // 18: livingGuide
                "\"SPORTS_GUIDE\" TEXT," + // 19: sportsGuide
                "\"ACUPOINT_GUIDE\" TEXT," + // 20: acupointGuide
                "\"OTHER_GUIDE\" TEXT," + // 21: otherGuide
                "\"IS_CANCEL\" INTEGER," + // 22: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 23: createOrgId
                "\"ORG_NAME\" TEXT," + // 24: orgName
                "\"CREATOR_ID\" TEXT," + // 25: creatorId
                "\"CREATOR\" TEXT," + // 26: creator
                "\"CREATE_TIME\" INTEGER," + // 27: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 28: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 29: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 30: modifierId
                "\"MODIFIER\" TEXT," + // 31: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 32: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ELDER_TCM_LEDGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ElderTcmLedger entity) {
        stmt.clearBindings();
 
        String elderTcmLedgerId = entity.getElderTcmLedgerId();
        if (elderTcmLedgerId != null) {
            stmt.bindString(1, elderTcmLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String elderTcmHealthId = entity.getElderTcmHealthId();
        if (elderTcmHealthId != null) {
            stmt.bindString(3, elderTcmHealthId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(4, personInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(7, followupDate.getTime());
        }
 
        String qiDeficiency = entity.getQiDeficiency();
        if (qiDeficiency != null) {
            stmt.bindString(8, qiDeficiency);
        }
 
        String yangDeficiency = entity.getYangDeficiency();
        if (yangDeficiency != null) {
            stmt.bindString(9, yangDeficiency);
        }
 
        String yinDeficiency = entity.getYinDeficiency();
        if (yinDeficiency != null) {
            stmt.bindString(10, yinDeficiency);
        }
 
        String phlegmWet = entity.getPhlegmWet();
        if (phlegmWet != null) {
            stmt.bindString(11, phlegmWet);
        }
 
        String dampHeat = entity.getDampHeat();
        if (dampHeat != null) {
            stmt.bindString(12, dampHeat);
        }
 
        String bloodStasis = entity.getBloodStasis();
        if (bloodStasis != null) {
            stmt.bindString(13, bloodStasis);
        }
 
        String qiDepression = entity.getQiDepression();
        if (qiDepression != null) {
            stmt.bindString(14, qiDepression);
        }
 
        String specialDiathsis = entity.getSpecialDiathsis();
        if (specialDiathsis != null) {
            stmt.bindString(15, specialDiathsis);
        }
 
        String gentleQuality = entity.getGentleQuality();
        if (gentleQuality != null) {
            stmt.bindString(16, gentleQuality);
        }
 
        String emotionGuide = entity.getEmotionGuide();
        if (emotionGuide != null) {
            stmt.bindString(17, emotionGuide);
        }
 
        String dietGuide = entity.getDietGuide();
        if (dietGuide != null) {
            stmt.bindString(18, dietGuide);
        }
 
        String livingGuide = entity.getLivingGuide();
        if (livingGuide != null) {
            stmt.bindString(19, livingGuide);
        }
 
        String sportsGuide = entity.getSportsGuide();
        if (sportsGuide != null) {
            stmt.bindString(20, sportsGuide);
        }
 
        String acupointGuide = entity.getAcupointGuide();
        if (acupointGuide != null) {
            stmt.bindString(21, acupointGuide);
        }
 
        String otherGuide = entity.getOtherGuide();
        if (otherGuide != null) {
            stmt.bindString(22, otherGuide);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(23, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(24, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(25, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(26, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(27, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(28, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(29, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(30, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(31, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(32, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(33, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ElderTcmLedger entity) {
        stmt.clearBindings();
 
        String elderTcmLedgerId = entity.getElderTcmLedgerId();
        if (elderTcmLedgerId != null) {
            stmt.bindString(1, elderTcmLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String elderTcmHealthId = entity.getElderTcmHealthId();
        if (elderTcmHealthId != null) {
            stmt.bindString(3, elderTcmHealthId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(4, personInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(7, followupDate.getTime());
        }
 
        String qiDeficiency = entity.getQiDeficiency();
        if (qiDeficiency != null) {
            stmt.bindString(8, qiDeficiency);
        }
 
        String yangDeficiency = entity.getYangDeficiency();
        if (yangDeficiency != null) {
            stmt.bindString(9, yangDeficiency);
        }
 
        String yinDeficiency = entity.getYinDeficiency();
        if (yinDeficiency != null) {
            stmt.bindString(10, yinDeficiency);
        }
 
        String phlegmWet = entity.getPhlegmWet();
        if (phlegmWet != null) {
            stmt.bindString(11, phlegmWet);
        }
 
        String dampHeat = entity.getDampHeat();
        if (dampHeat != null) {
            stmt.bindString(12, dampHeat);
        }
 
        String bloodStasis = entity.getBloodStasis();
        if (bloodStasis != null) {
            stmt.bindString(13, bloodStasis);
        }
 
        String qiDepression = entity.getQiDepression();
        if (qiDepression != null) {
            stmt.bindString(14, qiDepression);
        }
 
        String specialDiathsis = entity.getSpecialDiathsis();
        if (specialDiathsis != null) {
            stmt.bindString(15, specialDiathsis);
        }
 
        String gentleQuality = entity.getGentleQuality();
        if (gentleQuality != null) {
            stmt.bindString(16, gentleQuality);
        }
 
        String emotionGuide = entity.getEmotionGuide();
        if (emotionGuide != null) {
            stmt.bindString(17, emotionGuide);
        }
 
        String dietGuide = entity.getDietGuide();
        if (dietGuide != null) {
            stmt.bindString(18, dietGuide);
        }
 
        String livingGuide = entity.getLivingGuide();
        if (livingGuide != null) {
            stmt.bindString(19, livingGuide);
        }
 
        String sportsGuide = entity.getSportsGuide();
        if (sportsGuide != null) {
            stmt.bindString(20, sportsGuide);
        }
 
        String acupointGuide = entity.getAcupointGuide();
        if (acupointGuide != null) {
            stmt.bindString(21, acupointGuide);
        }
 
        String otherGuide = entity.getOtherGuide();
        if (otherGuide != null) {
            stmt.bindString(22, otherGuide);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(23, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(24, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(25, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(26, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(27, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(28, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(29, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(30, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(31, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(32, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(33, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ElderTcmLedger readEntity(Cursor cursor, int offset) {
        ElderTcmLedger entity = new ElderTcmLedger( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // elderTcmLedgerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // elderTcmHealthId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // personInfoNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // followupDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qiDeficiency
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // yangDeficiency
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // yinDeficiency
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phlegmWet
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dampHeat
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bloodStasis
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // qiDepression
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // specialDiathsis
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // gentleQuality
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // emotionGuide
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dietGuide
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // livingGuide
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sportsGuide
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // acupointGuide
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // otherGuide
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // isCancel
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // createOrgId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // orgName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // creatorId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // creator
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // createTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // modifiedOrgId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // modifiedOrgName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // modifierId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // modifier
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ElderTcmLedger entity, int offset) {
        entity.setElderTcmLedgerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setElderTcmHealthId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonInfoNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFollowupDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setQiDeficiency(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYangDeficiency(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setYinDeficiency(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhlegmWet(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDampHeat(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBloodStasis(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQiDepression(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSpecialDiathsis(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGentleQuality(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEmotionGuide(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDietGuide(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLivingGuide(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSportsGuide(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAcupointGuide(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOtherGuide(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsCancel(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setCreateOrgId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOrgName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCreatorId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreator(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCreateTime(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setModifiedOrgId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setModifiedOrgName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setModifierId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setModifier(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setModifiedTime(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ElderTcmLedger entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ElderTcmLedger entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
