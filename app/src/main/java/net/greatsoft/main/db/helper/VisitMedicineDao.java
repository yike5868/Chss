package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.VisitMedicine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISIT_MEDICINE".
*/
public class VisitMedicineDao extends AbstractDao<VisitMedicine, Void> {

    public static final String TABLENAME = "VISIT_MEDICINE";

    /**
     * Properties of entity VisitMedicine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VISIT_ID = new Property(0, String.class, "VISIT_ID", false, "VISIT__ID");
        public final static Property MEDICINE_TIMES = new Property(1, String.class, "MEDICINE_TIMES", false, "MEDICINE__TIMES");
        public final static Property MEDICINE_NAME = new Property(2, String.class, "MEDICINE_NAME", false, "MEDICINE__NAME");
        public final static Property MEDICINE_DOSAGE = new Property(3, String.class, "MEDICINE_DOSAGE", false, "MEDICINE__DOSAGE");
    };


    public VisitMedicineDao(DaoConfig config) {
        super(config);
    }
    
    public VisitMedicineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISIT_MEDICINE\" (" + //
                "\"VISIT__ID\" TEXT," + // 0: VISIT_ID
                "\"MEDICINE__TIMES\" TEXT," + // 1: MEDICINE_TIMES
                "\"MEDICINE__NAME\" TEXT," + // 2: MEDICINE_NAME
                "\"MEDICINE__DOSAGE\" TEXT);"); // 3: MEDICINE_DOSAGE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISIT_MEDICINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitMedicine entity) {
        stmt.clearBindings();
 
        String VISIT_ID = entity.getVISIT_ID();
        if (VISIT_ID != null) {
            stmt.bindString(1, VISIT_ID);
        }
 
        String MEDICINE_TIMES = entity.getMEDICINE_TIMES();
        if (MEDICINE_TIMES != null) {
            stmt.bindString(2, MEDICINE_TIMES);
        }
 
        String MEDICINE_NAME = entity.getMEDICINE_NAME();
        if (MEDICINE_NAME != null) {
            stmt.bindString(3, MEDICINE_NAME);
        }
 
        String MEDICINE_DOSAGE = entity.getMEDICINE_DOSAGE();
        if (MEDICINE_DOSAGE != null) {
            stmt.bindString(4, MEDICINE_DOSAGE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitMedicine entity) {
        stmt.clearBindings();
 
        String VISIT_ID = entity.getVISIT_ID();
        if (VISIT_ID != null) {
            stmt.bindString(1, VISIT_ID);
        }
 
        String MEDICINE_TIMES = entity.getMEDICINE_TIMES();
        if (MEDICINE_TIMES != null) {
            stmt.bindString(2, MEDICINE_TIMES);
        }
 
        String MEDICINE_NAME = entity.getMEDICINE_NAME();
        if (MEDICINE_NAME != null) {
            stmt.bindString(3, MEDICINE_NAME);
        }
 
        String MEDICINE_DOSAGE = entity.getMEDICINE_DOSAGE();
        if (MEDICINE_DOSAGE != null) {
            stmt.bindString(4, MEDICINE_DOSAGE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VisitMedicine readEntity(Cursor cursor, int offset) {
        VisitMedicine entity = new VisitMedicine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // VISIT_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MEDICINE_TIMES
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MEDICINE_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // MEDICINE_DOSAGE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitMedicine entity, int offset) {
        entity.setVISIT_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMEDICINE_TIMES(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMEDICINE_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMEDICINE_DOSAGE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VisitMedicine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VisitMedicine entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
