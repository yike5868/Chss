package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.Emp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMP".
*/
public class EmpDao extends AbstractDao<Emp, Void> {

    public static final String TABLENAME = "EMP";

    /**
     * Properties of entity Emp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Emp_id = new Property(0, String.class, "emp_id", false, "EMP_ID");
        public final static Property Emp_name = new Property(1, String.class, "emp_name", false, "EMP_NAME");
        public final static Property Emp_gender = new Property(2, String.class, "emp_gender", false, "EMP_GENDER");
        public final static Property Emp_property = new Property(3, String.class, "emp_property", false, "EMP_PROPERTY");
        public final static Property Is_gw = new Property(4, String.class, "is_gw", false, "IS_GW");
        public final static Property Emp_rin = new Property(5, String.class, "emp_rin", false, "EMP_RIN");
        public final static Property Emp_mobile = new Property(6, String.class, "emp_mobile", false, "EMP_MOBILE");
        public final static Property Emp_title = new Property(7, String.class, "emp_title", false, "EMP_TITLE");
        public final static Property Emp_birthday = new Property(8, String.class, "emp_birthday", false, "EMP_BIRTHDAY");
        public final static Property Emp_status = new Property(9, String.class, "emp_status", false, "EMP_STATUS");
    };


    public EmpDao(DaoConfig config) {
        super(config);
    }
    
    public EmpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMP\" (" + //
                "\"EMP_ID\" TEXT," + // 0: emp_id
                "\"EMP_NAME\" TEXT," + // 1: emp_name
                "\"EMP_GENDER\" TEXT," + // 2: emp_gender
                "\"EMP_PROPERTY\" TEXT," + // 3: emp_property
                "\"IS_GW\" TEXT," + // 4: is_gw
                "\"EMP_RIN\" TEXT," + // 5: emp_rin
                "\"EMP_MOBILE\" TEXT," + // 6: emp_mobile
                "\"EMP_TITLE\" TEXT," + // 7: emp_title
                "\"EMP_BIRTHDAY\" TEXT," + // 8: emp_birthday
                "\"EMP_STATUS\" TEXT);"); // 9: emp_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Emp entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_gender = entity.getEmp_gender();
        if (emp_gender != null) {
            stmt.bindString(3, emp_gender);
        }
 
        String emp_property = entity.getEmp_property();
        if (emp_property != null) {
            stmt.bindString(4, emp_property);
        }
 
        String is_gw = entity.getIs_gw();
        if (is_gw != null) {
            stmt.bindString(5, is_gw);
        }
 
        String emp_rin = entity.getEmp_rin();
        if (emp_rin != null) {
            stmt.bindString(6, emp_rin);
        }
 
        String emp_mobile = entity.getEmp_mobile();
        if (emp_mobile != null) {
            stmt.bindString(7, emp_mobile);
        }
 
        String emp_title = entity.getEmp_title();
        if (emp_title != null) {
            stmt.bindString(8, emp_title);
        }
 
        String emp_birthday = entity.getEmp_birthday();
        if (emp_birthday != null) {
            stmt.bindString(9, emp_birthday);
        }
 
        String emp_status = entity.getEmp_status();
        if (emp_status != null) {
            stmt.bindString(10, emp_status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Emp entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_gender = entity.getEmp_gender();
        if (emp_gender != null) {
            stmt.bindString(3, emp_gender);
        }
 
        String emp_property = entity.getEmp_property();
        if (emp_property != null) {
            stmt.bindString(4, emp_property);
        }
 
        String is_gw = entity.getIs_gw();
        if (is_gw != null) {
            stmt.bindString(5, is_gw);
        }
 
        String emp_rin = entity.getEmp_rin();
        if (emp_rin != null) {
            stmt.bindString(6, emp_rin);
        }
 
        String emp_mobile = entity.getEmp_mobile();
        if (emp_mobile != null) {
            stmt.bindString(7, emp_mobile);
        }
 
        String emp_title = entity.getEmp_title();
        if (emp_title != null) {
            stmt.bindString(8, emp_title);
        }
 
        String emp_birthday = entity.getEmp_birthday();
        if (emp_birthday != null) {
            stmt.bindString(9, emp_birthday);
        }
 
        String emp_status = entity.getEmp_status();
        if (emp_status != null) {
            stmt.bindString(10, emp_status);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Emp readEntity(Cursor cursor, int offset) {
        Emp entity = new Emp( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // emp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emp_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emp_gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emp_property
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // is_gw
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // emp_rin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // emp_mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // emp_title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // emp_birthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // emp_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Emp entity, int offset) {
        entity.setEmp_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmp_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmp_gender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmp_property(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_gw(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmp_rin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmp_mobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmp_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmp_birthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmp_status(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Emp entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Emp entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
