package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonAddress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_ADDRESS".
*/
public class PersonAddressDao extends AbstractDao<PersonAddress, Void> {

    public static final String TABLENAME = "PERSON_ADDRESS";

    /**
     * Properties of entity PersonAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonAddressId = new Property(0, String.class, "personAddressId", false, "PERSON_ADDRESS_ID");
        public final static Property AddressTypeCode = new Property(1, String.class, "addressTypeCode", false, "ADDRESS_TYPE_CODE");
        public final static Property Province = new Property(2, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property County = new Property(4, String.class, "county", false, "COUNTY");
        public final static Property Town = new Property(5, String.class, "town", false, "TOWN");
        public final static Property Village = new Property(6, String.class, "village", false, "VILLAGE");
        public final static Property HouseNo = new Property(7, String.class, "houseNo", false, "HOUSE_NO");
        public final static Property PostalCode = new Property(8, String.class, "postalCode", false, "POSTAL_CODE");
        public final static Property PersonInfoId = new Property(9, String.class, "personInfoId", false, "PERSON_INFO_ID");
    };


    public PersonAddressDao(DaoConfig config) {
        super(config);
    }
    
    public PersonAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_ADDRESS\" (" + //
                "\"PERSON_ADDRESS_ID\" TEXT," + // 0: personAddressId
                "\"ADDRESS_TYPE_CODE\" TEXT," + // 1: addressTypeCode
                "\"PROVINCE\" TEXT," + // 2: province
                "\"CITY\" TEXT," + // 3: city
                "\"COUNTY\" TEXT," + // 4: county
                "\"TOWN\" TEXT," + // 5: town
                "\"VILLAGE\" TEXT," + // 6: village
                "\"HOUSE_NO\" TEXT," + // 7: houseNo
                "\"POSTAL_CODE\" TEXT," + // 8: postalCode
                "\"PERSON_INFO_ID\" TEXT);"); // 9: personInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_ADDRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonAddress entity) {
        stmt.clearBindings();
 
        String personAddressId = entity.getPersonAddressId();
        if (personAddressId != null) {
            stmt.bindString(1, personAddressId);
        }
 
        String addressTypeCode = entity.getAddressTypeCode();
        if (addressTypeCode != null) {
            stmt.bindString(2, addressTypeCode);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(5, county);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(6, town);
        }
 
        String village = entity.getVillage();
        if (village != null) {
            stmt.bindString(7, village);
        }
 
        String houseNo = entity.getHouseNo();
        if (houseNo != null) {
            stmt.bindString(8, houseNo);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(9, postalCode);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(10, personInfoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonAddress entity) {
        stmt.clearBindings();
 
        String personAddressId = entity.getPersonAddressId();
        if (personAddressId != null) {
            stmt.bindString(1, personAddressId);
        }
 
        String addressTypeCode = entity.getAddressTypeCode();
        if (addressTypeCode != null) {
            stmt.bindString(2, addressTypeCode);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(5, county);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(6, town);
        }
 
        String village = entity.getVillage();
        if (village != null) {
            stmt.bindString(7, village);
        }
 
        String houseNo = entity.getHouseNo();
        if (houseNo != null) {
            stmt.bindString(8, houseNo);
        }
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(9, postalCode);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(10, personInfoId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonAddress readEntity(Cursor cursor, int offset) {
        PersonAddress entity = new PersonAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personAddressId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // addressTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // province
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // county
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // town
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // village
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // houseNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // postalCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // personInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonAddress entity, int offset) {
        entity.setPersonAddressId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAddressTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCounty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTown(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVillage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHouseNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPostalCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPersonInfoId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonAddress entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonAddress entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
