package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildHomeVisit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_HOME_VISIT".
*/
public class ChildHomeVisitDao extends AbstractDao<ChildHomeVisit, Void> {

    public static final String TABLENAME = "CHILD_HOME_VISIT";

    /**
     * Properties of entity ChildHomeVisit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildHomeVisitId = new Property(0, String.class, "childHomeVisitId", false, "CHILD_HOME_VISIT_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property NewbornVisitFormNo = new Property(2, String.class, "newbornVisitFormNo", false, "NEWBORN_VISIT_FORM_NO");
        public final static Property NewbornName = new Property(3, String.class, "newbornName", false, "NEWBORN_NAME");
        public final static Property NewbornSexCode = new Property(4, String.class, "newbornSexCode", false, "NEWBORN_SEX_CODE");
        public final static Property NewbornBirthDate = new Property(5, java.util.Date.class, "newbornBirthDate", false, "NEWBORN_BIRTH_DATE");
        public final static Property NewbornIdNo = new Property(6, String.class, "newbornIdNo", false, "NEWBORN_ID_NO");
        public final static Property PresentAddrProvince = new Property(7, String.class, "presentAddrProvince", false, "PRESENT_ADDR_PROVINCE");
        public final static Property FatherId = new Property(8, String.class, "fatherId", false, "FATHER_ID");
        public final static Property FatherName = new Property(9, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property FatherIdno = new Property(10, String.class, "fatherIdno", false, "FATHER_IDNO");
        public final static Property FatherOccupCode = new Property(11, String.class, "fatherOccupCode", false, "FATHER_OCCUP_CODE");
        public final static Property FatherTelNo = new Property(12, String.class, "fatherTelNo", false, "FATHER_TEL_NO");
        public final static Property FatherBirthDate = new Property(13, java.util.Date.class, "fatherBirthDate", false, "FATHER_BIRTH_DATE");
        public final static Property MotherId = new Property(14, String.class, "motherId", false, "MOTHER_ID");
        public final static Property MotherName = new Property(15, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property MotherIdno = new Property(16, String.class, "motherIdno", false, "MOTHER_IDNO");
        public final static Property MotherOccupCode = new Property(17, String.class, "motherOccupCode", false, "MOTHER_OCCUP_CODE");
        public final static Property MotherTelNo = new Property(18, String.class, "motherTelNo", false, "MOTHER_TEL_NO");
        public final static Property MotherBirthDate = new Property(19, java.util.Date.class, "motherBirthDate", false, "MOTHER_BIRTH_DATE");
        public final static Property BirthGestWeeks = new Property(20, Integer.class, "birthGestWeeks", false, "BIRTH_GEST_WEEKS");
        public final static Property BirthGestDays = new Property(21, Integer.class, "birthGestDays", false, "BIRTH_GEST_DAYS");
        public final static Property MotherHdcpCode = new Property(22, String.class, "motherHdcpCode", false, "MOTHER_HDCP_CODE");
        public final static Property MotherHdcpOthersDesc = new Property(23, String.class, "motherHdcpOthersDesc", false, "MOTHER_HDCP_OTHERS_DESC");
        public final static Property DeliveryOrgName = new Property(24, String.class, "deliveryOrgName", false, "DELIVERY_ORG_NAME");
        public final static Property LastDeliverWayCode = new Property(25, String.class, "lastDeliverWayCode", false, "LAST_DELIVER_WAY_CODE");
        public final static Property AsphyxiaCode = new Property(26, String.class, "asphyxiaCode", false, "ASPHYXIA_CODE");
        public final static Property ApgarScoreCode = new Property(27, String.class, "apgarScoreCode", false, "APGAR_SCORE_CODE");
        public final static Property ApgarScore = new Property(28, String.class, "apgarScore", false, "APGAR_SCORE");
        public final static Property MalformCode = new Property(29, String.class, "malformCode", false, "MALFORM_CODE");
        public final static Property MalformDesc = new Property(30, String.class, "malformDesc", false, "MALFORM_DESC");
        public final static Property HearingScreenCode = new Property(31, String.class, "hearingScreenCode", false, "HEARING_SCREEN_CODE");
        public final static Property DiseaseScreenCode = new Property(32, String.class, "diseaseScreenCode", false, "DISEASE_SCREEN_CODE");
        public final static Property DiseaseScreenOthersDesc = new Property(33, String.class, "diseaseScreenOthersDesc", false, "DISEASE_SCREEN_OTHERS_DESC");
        public final static Property BirthWeight = new Property(34, Double.class, "birthWeight", false, "BIRTH_WEIGHT");
        public final static Property Weight = new Property(35, Double.class, "weight", false, "WEIGHT");
        public final static Property BirthLength = new Property(36, Double.class, "birthLength", false, "BIRTH_LENGTH");
        public final static Property Length = new Property(37, Double.class, "length", false, "LENGTH");
        public final static Property FeedWayCode = new Property(38, String.class, "feedWayCode", false, "FEED_WAY_CODE");
        public final static Property DailyFeedingTimes = new Property(39, String.class, "dailyFeedingTimes", false, "DAILY_FEEDING_TIMES");
        public final static Property FeedingAmountEachTime = new Property(40, Integer.class, "feedingAmountEachTime", false, "FEEDING_AMOUNT_EACH_TIME");
        public final static Property VomitCode = new Property(41, String.class, "vomitCode", false, "VOMIT_CODE");
        public final static Property StoolPropCode = new Property(42, String.class, "stoolPropCode", false, "STOOL_PROP_CODE");
        public final static Property StoolTimes = new Property(43, String.class, "stoolTimes", false, "STOOL_TIMES");
        public final static Property BodyTemperature = new Property(44, Double.class, "bodyTemperature", false, "BODY_TEMPERATURE");
        public final static Property Pulses = new Property(45, Integer.class, "pulses", false, "PULSES");
        public final static Property BreathingRate = new Property(46, Integer.class, "breathingRate", false, "BREATHING_RATE");
        public final static Property NewbornComplexionCode = new Property(47, String.class, "newbornComplexionCode", false, "NEWBORN_COMPLEXION_CODE");
        public final static Property NewbornComplexionOthersDesc = new Property(48, String.class, "newbornComplexionOthersDesc", false, "NEWBORN_COMPLEXION_OTHERS_DESC");
        public final static Property JaundiceSiteCode = new Property(49, String.class, "jaundiceSiteCode", false, "JAUNDICE_SITE_CODE");
        public final static Property BregmaHorizDiameter = new Property(50, Double.class, "bregmaHorizDiameter", false, "BREGMA_HORIZ_DIAMETER");
        public final static Property BregmaVertDiameter = new Property(51, Double.class, "bregmaVertDiameter", false, "BREGMA_VERT_DIAMETER");
        public final static Property BregmaTensionCode = new Property(52, String.class, "bregmaTensionCode", false, "BREGMA_TENSION_CODE");
        public final static Property BregmaTensionOthersDesc = new Property(53, String.class, "bregmaTensionOthersDesc", false, "BREGMA_TENSION_OTHERS_DESC");
        public final static Property EyeAbnormCode = new Property(54, String.class, "eyeAbnormCode", false, "EYE_ABNORM_CODE");
        public final static Property EyeAbnormDesc = new Property(55, String.class, "eyeAbnormDesc", false, "EYE_ABNORM_DESC");
        public final static Property EarAbnormCode = new Property(56, String.class, "earAbnormCode", false, "EAR_ABNORM_CODE");
        public final static Property EarAbnormDesc = new Property(57, String.class, "earAbnormDesc", false, "EAR_ABNORM_DESC");
        public final static Property NoseAbnormCode = new Property(58, String.class, "noseAbnormCode", false, "NOSE_ABNORM_CODE");
        public final static Property NoseAbnormDesc = new Property(59, String.class, "noseAbnormDesc", false, "NOSE_ABNORM_DESC");
        public final static Property OralAbnormCode = new Property(60, String.class, "oralAbnormCode", false, "ORAL_ABNORM_CODE");
        public final static Property OralAbnormDesc = new Property(61, String.class, "oralAbnormDesc", false, "ORAL_ABNORM_DESC");
        public final static Property LungAbnormCode = new Property(62, String.class, "lungAbnormCode", false, "LUNG_ABNORM_CODE");
        public final static Property LungAbnormDesc = new Property(63, String.class, "lungAbnormDesc", false, "LUNG_ABNORM_DESC");
        public final static Property HeartAbnormCode = new Property(64, String.class, "heartAbnormCode", false, "HEART_ABNORM_CODE");
        public final static Property HeartAbnormDesc = new Property(65, String.class, "heartAbnormDesc", false, "HEART_ABNORM_DESC");
        public final static Property AbdomenAbnormCode = new Property(66, String.class, "abdomenAbnormCode", false, "ABDOMEN_ABNORM_CODE");
        public final static Property AbdomenAbnormDesc = new Property(67, String.class, "abdomenAbnormDesc", false, "ABDOMEN_ABNORM_DESC");
        public final static Property LimbsAbnormCode = new Property(68, String.class, "limbsAbnormCode", false, "LIMBS_ABNORM_CODE");
        public final static Property LimbsAbnormDesc = new Property(69, String.class, "limbsAbnormDesc", false, "LIMBS_ABNORM_DESC");
        public final static Property NeckMassCode = new Property(70, String.class, "neckMassCode", false, "NECK_MASS_CODE");
        public final static Property NeckMassDesc = new Property(71, String.class, "neckMassDesc", false, "NECK_MASS_DESC");
        public final static Property SkinCode = new Property(72, String.class, "skinCode", false, "SKIN_CODE");
        public final static Property SkinOthersDesc = new Property(73, String.class, "skinOthersDesc", false, "SKIN_OTHERS_DESC");
        public final static Property AnusCode = new Property(74, String.class, "anusCode", false, "ANUS_CODE");
        public final static Property AnusAbnormDesc = new Property(75, String.class, "anusAbnormDesc", false, "ANUS_ABNORM_DESC");
        public final static Property ChestCode = new Property(76, String.class, "chestCode", false, "CHEST_CODE");
        public final static Property ChestAbnormDesc = new Property(77, String.class, "chestAbnormDesc", false, "CHEST_ABNORM_DESC");
        public final static Property GenitaliaCode = new Property(78, String.class, "genitaliaCode", false, "GENITALIA_CODE");
        public final static Property GenitaliaAbnormDesc = new Property(79, String.class, "genitaliaAbnormDesc", false, "GENITALIA_ABNORM_DESC");
        public final static Property SpineAbnormCode = new Property(80, String.class, "spineAbnormCode", false, "SPINE_ABNORM_CODE");
        public final static Property SpineAbnormDesc = new Property(81, String.class, "spineAbnormDesc", false, "SPINE_ABNORM_DESC");
        public final static Property UmbCordResultCode = new Property(82, String.class, "umbCordResultCode", false, "UMB_CORD_RESULT_CODE");
        public final static Property UmbCordOthersDesc = new Property(83, String.class, "umbCordOthersDesc", false, "UMB_CORD_OTHERS_DESC");
        public final static Property ReferralCode = new Property(84, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property RefertoOrgName = new Property(85, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(86, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property ReferralReason = new Property(87, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property VisitDoctorId = new Property(88, String.class, "visitDoctorId", false, "VISIT_DOCTOR_ID");
        public final static Property VisitDoctorName = new Property(89, String.class, "visitDoctorName", false, "VISIT_DOCTOR_NAME");
        public final static Property ThisVisitDate = new Property(90, java.util.Date.class, "thisVisitDate", false, "THIS_VISIT_DATE");
        public final static Property NextVisitDate = new Property(91, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property NextVisitPlace = new Property(92, String.class, "nextVisitPlace", false, "NEXT_VISIT_PLACE");
        public final static Property IsCancel = new Property(93, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(94, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(95, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(96, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(97, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(98, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(99, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(100, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(101, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(102, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(103, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(104, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property ApgarScore1 = new Property(105, Integer.class, "apgarScore1", false, "APGAR_SCORE1");
        public final static Property ApgarScore5 = new Property(106, Integer.class, "apgarScore5", false, "APGAR_SCORE5");
        public final static Property ApgarScoreOther = new Property(107, Integer.class, "apgarScoreOther", false, "APGAR_SCORE_OTHER");
    };


    public ChildHomeVisitDao(DaoConfig config) {
        super(config);
    }
    
    public ChildHomeVisitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_HOME_VISIT\" (" + //
                "\"CHILD_HOME_VISIT_ID\" TEXT," + // 0: childHomeVisitId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"NEWBORN_VISIT_FORM_NO\" TEXT," + // 2: newbornVisitFormNo
                "\"NEWBORN_NAME\" TEXT," + // 3: newbornName
                "\"NEWBORN_SEX_CODE\" TEXT," + // 4: newbornSexCode
                "\"NEWBORN_BIRTH_DATE\" INTEGER," + // 5: newbornBirthDate
                "\"NEWBORN_ID_NO\" TEXT," + // 6: newbornIdNo
                "\"PRESENT_ADDR_PROVINCE\" TEXT," + // 7: presentAddrProvince
                "\"FATHER_ID\" TEXT," + // 8: fatherId
                "\"FATHER_NAME\" TEXT," + // 9: fatherName
                "\"FATHER_IDNO\" TEXT," + // 10: fatherIdno
                "\"FATHER_OCCUP_CODE\" TEXT," + // 11: fatherOccupCode
                "\"FATHER_TEL_NO\" TEXT," + // 12: fatherTelNo
                "\"FATHER_BIRTH_DATE\" INTEGER," + // 13: fatherBirthDate
                "\"MOTHER_ID\" TEXT," + // 14: motherId
                "\"MOTHER_NAME\" TEXT," + // 15: motherName
                "\"MOTHER_IDNO\" TEXT," + // 16: motherIdno
                "\"MOTHER_OCCUP_CODE\" TEXT," + // 17: motherOccupCode
                "\"MOTHER_TEL_NO\" TEXT," + // 18: motherTelNo
                "\"MOTHER_BIRTH_DATE\" INTEGER," + // 19: motherBirthDate
                "\"BIRTH_GEST_WEEKS\" INTEGER," + // 20: birthGestWeeks
                "\"BIRTH_GEST_DAYS\" INTEGER," + // 21: birthGestDays
                "\"MOTHER_HDCP_CODE\" TEXT," + // 22: motherHdcpCode
                "\"MOTHER_HDCP_OTHERS_DESC\" TEXT," + // 23: motherHdcpOthersDesc
                "\"DELIVERY_ORG_NAME\" TEXT," + // 24: deliveryOrgName
                "\"LAST_DELIVER_WAY_CODE\" TEXT," + // 25: lastDeliverWayCode
                "\"ASPHYXIA_CODE\" TEXT," + // 26: asphyxiaCode
                "\"APGAR_SCORE_CODE\" TEXT," + // 27: apgarScoreCode
                "\"APGAR_SCORE\" TEXT," + // 28: apgarScore
                "\"MALFORM_CODE\" TEXT," + // 29: malformCode
                "\"MALFORM_DESC\" TEXT," + // 30: malformDesc
                "\"HEARING_SCREEN_CODE\" TEXT," + // 31: hearingScreenCode
                "\"DISEASE_SCREEN_CODE\" TEXT," + // 32: diseaseScreenCode
                "\"DISEASE_SCREEN_OTHERS_DESC\" TEXT," + // 33: diseaseScreenOthersDesc
                "\"BIRTH_WEIGHT\" REAL," + // 34: birthWeight
                "\"WEIGHT\" REAL," + // 35: weight
                "\"BIRTH_LENGTH\" REAL," + // 36: birthLength
                "\"LENGTH\" REAL," + // 37: length
                "\"FEED_WAY_CODE\" TEXT," + // 38: feedWayCode
                "\"DAILY_FEEDING_TIMES\" TEXT," + // 39: dailyFeedingTimes
                "\"FEEDING_AMOUNT_EACH_TIME\" INTEGER," + // 40: feedingAmountEachTime
                "\"VOMIT_CODE\" TEXT," + // 41: vomitCode
                "\"STOOL_PROP_CODE\" TEXT," + // 42: stoolPropCode
                "\"STOOL_TIMES\" TEXT," + // 43: stoolTimes
                "\"BODY_TEMPERATURE\" REAL," + // 44: bodyTemperature
                "\"PULSES\" INTEGER," + // 45: pulses
                "\"BREATHING_RATE\" INTEGER," + // 46: breathingRate
                "\"NEWBORN_COMPLEXION_CODE\" TEXT," + // 47: newbornComplexionCode
                "\"NEWBORN_COMPLEXION_OTHERS_DESC\" TEXT," + // 48: newbornComplexionOthersDesc
                "\"JAUNDICE_SITE_CODE\" TEXT," + // 49: jaundiceSiteCode
                "\"BREGMA_HORIZ_DIAMETER\" REAL," + // 50: bregmaHorizDiameter
                "\"BREGMA_VERT_DIAMETER\" REAL," + // 51: bregmaVertDiameter
                "\"BREGMA_TENSION_CODE\" TEXT," + // 52: bregmaTensionCode
                "\"BREGMA_TENSION_OTHERS_DESC\" TEXT," + // 53: bregmaTensionOthersDesc
                "\"EYE_ABNORM_CODE\" TEXT," + // 54: eyeAbnormCode
                "\"EYE_ABNORM_DESC\" TEXT," + // 55: eyeAbnormDesc
                "\"EAR_ABNORM_CODE\" TEXT," + // 56: earAbnormCode
                "\"EAR_ABNORM_DESC\" TEXT," + // 57: earAbnormDesc
                "\"NOSE_ABNORM_CODE\" TEXT," + // 58: noseAbnormCode
                "\"NOSE_ABNORM_DESC\" TEXT," + // 59: noseAbnormDesc
                "\"ORAL_ABNORM_CODE\" TEXT," + // 60: oralAbnormCode
                "\"ORAL_ABNORM_DESC\" TEXT," + // 61: oralAbnormDesc
                "\"LUNG_ABNORM_CODE\" TEXT," + // 62: lungAbnormCode
                "\"LUNG_ABNORM_DESC\" TEXT," + // 63: lungAbnormDesc
                "\"HEART_ABNORM_CODE\" TEXT," + // 64: heartAbnormCode
                "\"HEART_ABNORM_DESC\" TEXT," + // 65: heartAbnormDesc
                "\"ABDOMEN_ABNORM_CODE\" TEXT," + // 66: abdomenAbnormCode
                "\"ABDOMEN_ABNORM_DESC\" TEXT," + // 67: abdomenAbnormDesc
                "\"LIMBS_ABNORM_CODE\" TEXT," + // 68: limbsAbnormCode
                "\"LIMBS_ABNORM_DESC\" TEXT," + // 69: limbsAbnormDesc
                "\"NECK_MASS_CODE\" TEXT," + // 70: neckMassCode
                "\"NECK_MASS_DESC\" TEXT," + // 71: neckMassDesc
                "\"SKIN_CODE\" TEXT," + // 72: skinCode
                "\"SKIN_OTHERS_DESC\" TEXT," + // 73: skinOthersDesc
                "\"ANUS_CODE\" TEXT," + // 74: anusCode
                "\"ANUS_ABNORM_DESC\" TEXT," + // 75: anusAbnormDesc
                "\"CHEST_CODE\" TEXT," + // 76: chestCode
                "\"CHEST_ABNORM_DESC\" TEXT," + // 77: chestAbnormDesc
                "\"GENITALIA_CODE\" TEXT," + // 78: genitaliaCode
                "\"GENITALIA_ABNORM_DESC\" TEXT," + // 79: genitaliaAbnormDesc
                "\"SPINE_ABNORM_CODE\" TEXT," + // 80: spineAbnormCode
                "\"SPINE_ABNORM_DESC\" TEXT," + // 81: spineAbnormDesc
                "\"UMB_CORD_RESULT_CODE\" TEXT," + // 82: umbCordResultCode
                "\"UMB_CORD_OTHERS_DESC\" TEXT," + // 83: umbCordOthersDesc
                "\"REFERRAL_CODE\" TEXT," + // 84: referralCode
                "\"REFERTO_ORG_NAME\" TEXT," + // 85: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 86: refertoDeptName
                "\"REFERRAL_REASON\" TEXT," + // 87: referralReason
                "\"VISIT_DOCTOR_ID\" TEXT," + // 88: visitDoctorId
                "\"VISIT_DOCTOR_NAME\" TEXT," + // 89: visitDoctorName
                "\"THIS_VISIT_DATE\" INTEGER," + // 90: thisVisitDate
                "\"NEXT_VISIT_DATE\" INTEGER," + // 91: nextVisitDate
                "\"NEXT_VISIT_PLACE\" TEXT," + // 92: nextVisitPlace
                "\"IS_CANCEL\" INTEGER," + // 93: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 94: createOrgId
                "\"ORG_NAME\" TEXT," + // 95: orgName
                "\"CREATOR_ID\" TEXT," + // 96: creatorId
                "\"CREATOR\" TEXT," + // 97: creator
                "\"CREATE_TIME\" INTEGER," + // 98: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 99: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 100: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 101: modifierId
                "\"MODIFIER\" TEXT," + // 102: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 103: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 104: jsonDetail
                "\"APGAR_SCORE1\" INTEGER," + // 105: apgarScore1
                "\"APGAR_SCORE5\" INTEGER," + // 106: apgarScore5
                "\"APGAR_SCORE_OTHER\" INTEGER);"); // 107: apgarScoreOther
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_HOME_VISIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildHomeVisit entity) {
        stmt.clearBindings();
 
        String childHomeVisitId = entity.getChildHomeVisitId();
        if (childHomeVisitId != null) {
            stmt.bindString(1, childHomeVisitId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String newbornVisitFormNo = entity.getNewbornVisitFormNo();
        if (newbornVisitFormNo != null) {
            stmt.bindString(3, newbornVisitFormNo);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(4, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(5, newbornSexCode);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(6, newbornBirthDate.getTime());
        }
 
        String newbornIdNo = entity.getNewbornIdNo();
        if (newbornIdNo != null) {
            stmt.bindString(7, newbornIdNo);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(8, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(9, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(10, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(11, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(12, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(13, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(14, fatherBirthDate.getTime());
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(15, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(16, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(17, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(18, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(19, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(20, motherBirthDate.getTime());
        }
 
        Integer birthGestWeeks = entity.getBirthGestWeeks();
        if (birthGestWeeks != null) {
            stmt.bindLong(21, birthGestWeeks);
        }
 
        Integer birthGestDays = entity.getBirthGestDays();
        if (birthGestDays != null) {
            stmt.bindLong(22, birthGestDays);
        }
 
        String motherHdcpCode = entity.getMotherHdcpCode();
        if (motherHdcpCode != null) {
            stmt.bindString(23, motherHdcpCode);
        }
 
        String motherHdcpOthersDesc = entity.getMotherHdcpOthersDesc();
        if (motherHdcpOthersDesc != null) {
            stmt.bindString(24, motherHdcpOthersDesc);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(25, deliveryOrgName);
        }
 
        String lastDeliverWayCode = entity.getLastDeliverWayCode();
        if (lastDeliverWayCode != null) {
            stmt.bindString(26, lastDeliverWayCode);
        }
 
        String asphyxiaCode = entity.getAsphyxiaCode();
        if (asphyxiaCode != null) {
            stmt.bindString(27, asphyxiaCode);
        }
 
        String apgarScoreCode = entity.getApgarScoreCode();
        if (apgarScoreCode != null) {
            stmt.bindString(28, apgarScoreCode);
        }
 
        String apgarScore = entity.getApgarScore();
        if (apgarScore != null) {
            stmt.bindString(29, apgarScore);
        }
 
        String malformCode = entity.getMalformCode();
        if (malformCode != null) {
            stmt.bindString(30, malformCode);
        }
 
        String malformDesc = entity.getMalformDesc();
        if (malformDesc != null) {
            stmt.bindString(31, malformDesc);
        }
 
        String hearingScreenCode = entity.getHearingScreenCode();
        if (hearingScreenCode != null) {
            stmt.bindString(32, hearingScreenCode);
        }
 
        String diseaseScreenCode = entity.getDiseaseScreenCode();
        if (diseaseScreenCode != null) {
            stmt.bindString(33, diseaseScreenCode);
        }
 
        String diseaseScreenOthersDesc = entity.getDiseaseScreenOthersDesc();
        if (diseaseScreenOthersDesc != null) {
            stmt.bindString(34, diseaseScreenOthersDesc);
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(35, birthWeight);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(36, weight);
        }
 
        Double birthLength = entity.getBirthLength();
        if (birthLength != null) {
            stmt.bindDouble(37, birthLength);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(38, length);
        }
 
        String feedWayCode = entity.getFeedWayCode();
        if (feedWayCode != null) {
            stmt.bindString(39, feedWayCode);
        }
 
        String dailyFeedingTimes = entity.getDailyFeedingTimes();
        if (dailyFeedingTimes != null) {
            stmt.bindString(40, dailyFeedingTimes);
        }
 
        Integer feedingAmountEachTime = entity.getFeedingAmountEachTime();
        if (feedingAmountEachTime != null) {
            stmt.bindLong(41, feedingAmountEachTime);
        }
 
        String vomitCode = entity.getVomitCode();
        if (vomitCode != null) {
            stmt.bindString(42, vomitCode);
        }
 
        String stoolPropCode = entity.getStoolPropCode();
        if (stoolPropCode != null) {
            stmt.bindString(43, stoolPropCode);
        }
 
        String stoolTimes = entity.getStoolTimes();
        if (stoolTimes != null) {
            stmt.bindString(44, stoolTimes);
        }
 
        Double bodyTemperature = entity.getBodyTemperature();
        if (bodyTemperature != null) {
            stmt.bindDouble(45, bodyTemperature);
        }
 
        Integer pulses = entity.getPulses();
        if (pulses != null) {
            stmt.bindLong(46, pulses);
        }
 
        Integer breathingRate = entity.getBreathingRate();
        if (breathingRate != null) {
            stmt.bindLong(47, breathingRate);
        }
 
        String newbornComplexionCode = entity.getNewbornComplexionCode();
        if (newbornComplexionCode != null) {
            stmt.bindString(48, newbornComplexionCode);
        }
 
        String newbornComplexionOthersDesc = entity.getNewbornComplexionOthersDesc();
        if (newbornComplexionOthersDesc != null) {
            stmt.bindString(49, newbornComplexionOthersDesc);
        }
 
        String jaundiceSiteCode = entity.getJaundiceSiteCode();
        if (jaundiceSiteCode != null) {
            stmt.bindString(50, jaundiceSiteCode);
        }
 
        Double bregmaHorizDiameter = entity.getBregmaHorizDiameter();
        if (bregmaHorizDiameter != null) {
            stmt.bindDouble(51, bregmaHorizDiameter);
        }
 
        Double bregmaVertDiameter = entity.getBregmaVertDiameter();
        if (bregmaVertDiameter != null) {
            stmt.bindDouble(52, bregmaVertDiameter);
        }
 
        String bregmaTensionCode = entity.getBregmaTensionCode();
        if (bregmaTensionCode != null) {
            stmt.bindString(53, bregmaTensionCode);
        }
 
        String bregmaTensionOthersDesc = entity.getBregmaTensionOthersDesc();
        if (bregmaTensionOthersDesc != null) {
            stmt.bindString(54, bregmaTensionOthersDesc);
        }
 
        String eyeAbnormCode = entity.getEyeAbnormCode();
        if (eyeAbnormCode != null) {
            stmt.bindString(55, eyeAbnormCode);
        }
 
        String eyeAbnormDesc = entity.getEyeAbnormDesc();
        if (eyeAbnormDesc != null) {
            stmt.bindString(56, eyeAbnormDesc);
        }
 
        String earAbnormCode = entity.getEarAbnormCode();
        if (earAbnormCode != null) {
            stmt.bindString(57, earAbnormCode);
        }
 
        String earAbnormDesc = entity.getEarAbnormDesc();
        if (earAbnormDesc != null) {
            stmt.bindString(58, earAbnormDesc);
        }
 
        String noseAbnormCode = entity.getNoseAbnormCode();
        if (noseAbnormCode != null) {
            stmt.bindString(59, noseAbnormCode);
        }
 
        String noseAbnormDesc = entity.getNoseAbnormDesc();
        if (noseAbnormDesc != null) {
            stmt.bindString(60, noseAbnormDesc);
        }
 
        String oralAbnormCode = entity.getOralAbnormCode();
        if (oralAbnormCode != null) {
            stmt.bindString(61, oralAbnormCode);
        }
 
        String oralAbnormDesc = entity.getOralAbnormDesc();
        if (oralAbnormDesc != null) {
            stmt.bindString(62, oralAbnormDesc);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(63, lungAbnormCode);
        }
 
        String lungAbnormDesc = entity.getLungAbnormDesc();
        if (lungAbnormDesc != null) {
            stmt.bindString(64, lungAbnormDesc);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(65, heartAbnormCode);
        }
 
        String heartAbnormDesc = entity.getHeartAbnormDesc();
        if (heartAbnormDesc != null) {
            stmt.bindString(66, heartAbnormDesc);
        }
 
        String abdomenAbnormCode = entity.getAbdomenAbnormCode();
        if (abdomenAbnormCode != null) {
            stmt.bindString(67, abdomenAbnormCode);
        }
 
        String abdomenAbnormDesc = entity.getAbdomenAbnormDesc();
        if (abdomenAbnormDesc != null) {
            stmt.bindString(68, abdomenAbnormDesc);
        }
 
        String limbsAbnormCode = entity.getLimbsAbnormCode();
        if (limbsAbnormCode != null) {
            stmt.bindString(69, limbsAbnormCode);
        }
 
        String limbsAbnormDesc = entity.getLimbsAbnormDesc();
        if (limbsAbnormDesc != null) {
            stmt.bindString(70, limbsAbnormDesc);
        }
 
        String neckMassCode = entity.getNeckMassCode();
        if (neckMassCode != null) {
            stmt.bindString(71, neckMassCode);
        }
 
        String neckMassDesc = entity.getNeckMassDesc();
        if (neckMassDesc != null) {
            stmt.bindString(72, neckMassDesc);
        }
 
        String skinCode = entity.getSkinCode();
        if (skinCode != null) {
            stmt.bindString(73, skinCode);
        }
 
        String skinOthersDesc = entity.getSkinOthersDesc();
        if (skinOthersDesc != null) {
            stmt.bindString(74, skinOthersDesc);
        }
 
        String anusCode = entity.getAnusCode();
        if (anusCode != null) {
            stmt.bindString(75, anusCode);
        }
 
        String anusAbnormDesc = entity.getAnusAbnormDesc();
        if (anusAbnormDesc != null) {
            stmt.bindString(76, anusAbnormDesc);
        }
 
        String chestCode = entity.getChestCode();
        if (chestCode != null) {
            stmt.bindString(77, chestCode);
        }
 
        String chestAbnormDesc = entity.getChestAbnormDesc();
        if (chestAbnormDesc != null) {
            stmt.bindString(78, chestAbnormDesc);
        }
 
        String genitaliaCode = entity.getGenitaliaCode();
        if (genitaliaCode != null) {
            stmt.bindString(79, genitaliaCode);
        }
 
        String genitaliaAbnormDesc = entity.getGenitaliaAbnormDesc();
        if (genitaliaAbnormDesc != null) {
            stmt.bindString(80, genitaliaAbnormDesc);
        }
 
        String spineAbnormCode = entity.getSpineAbnormCode();
        if (spineAbnormCode != null) {
            stmt.bindString(81, spineAbnormCode);
        }
 
        String spineAbnormDesc = entity.getSpineAbnormDesc();
        if (spineAbnormDesc != null) {
            stmt.bindString(82, spineAbnormDesc);
        }
 
        String umbCordResultCode = entity.getUmbCordResultCode();
        if (umbCordResultCode != null) {
            stmt.bindString(83, umbCordResultCode);
        }
 
        String umbCordOthersDesc = entity.getUmbCordOthersDesc();
        if (umbCordOthersDesc != null) {
            stmt.bindString(84, umbCordOthersDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(85, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(86, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(87, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(88, referralReason);
        }
 
        String visitDoctorId = entity.getVisitDoctorId();
        if (visitDoctorId != null) {
            stmt.bindString(89, visitDoctorId);
        }
 
        String visitDoctorName = entity.getVisitDoctorName();
        if (visitDoctorName != null) {
            stmt.bindString(90, visitDoctorName);
        }
 
        java.util.Date thisVisitDate = entity.getThisVisitDate();
        if (thisVisitDate != null) {
            stmt.bindLong(91, thisVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(92, nextVisitDate.getTime());
        }
 
        String nextVisitPlace = entity.getNextVisitPlace();
        if (nextVisitPlace != null) {
            stmt.bindString(93, nextVisitPlace);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(94, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(95, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(96, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(97, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(98, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(99, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(100, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(101, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(102, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(103, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(104, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(105, jsonDetail);
        }
 
        Integer apgarScore1 = entity.getApgarScore1();
        if (apgarScore1 != null) {
            stmt.bindLong(106, apgarScore1);
        }
 
        Integer apgarScore5 = entity.getApgarScore5();
        if (apgarScore5 != null) {
            stmt.bindLong(107, apgarScore5);
        }
 
        Integer apgarScoreOther = entity.getApgarScoreOther();
        if (apgarScoreOther != null) {
            stmt.bindLong(108, apgarScoreOther);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildHomeVisit entity) {
        stmt.clearBindings();
 
        String childHomeVisitId = entity.getChildHomeVisitId();
        if (childHomeVisitId != null) {
            stmt.bindString(1, childHomeVisitId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String newbornVisitFormNo = entity.getNewbornVisitFormNo();
        if (newbornVisitFormNo != null) {
            stmt.bindString(3, newbornVisitFormNo);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(4, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(5, newbornSexCode);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(6, newbornBirthDate.getTime());
        }
 
        String newbornIdNo = entity.getNewbornIdNo();
        if (newbornIdNo != null) {
            stmt.bindString(7, newbornIdNo);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(8, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(9, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(10, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(11, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(12, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(13, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(14, fatherBirthDate.getTime());
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(15, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(16, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(17, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(18, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(19, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(20, motherBirthDate.getTime());
        }
 
        Integer birthGestWeeks = entity.getBirthGestWeeks();
        if (birthGestWeeks != null) {
            stmt.bindLong(21, birthGestWeeks);
        }
 
        Integer birthGestDays = entity.getBirthGestDays();
        if (birthGestDays != null) {
            stmt.bindLong(22, birthGestDays);
        }
 
        String motherHdcpCode = entity.getMotherHdcpCode();
        if (motherHdcpCode != null) {
            stmt.bindString(23, motherHdcpCode);
        }
 
        String motherHdcpOthersDesc = entity.getMotherHdcpOthersDesc();
        if (motherHdcpOthersDesc != null) {
            stmt.bindString(24, motherHdcpOthersDesc);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(25, deliveryOrgName);
        }
 
        String lastDeliverWayCode = entity.getLastDeliverWayCode();
        if (lastDeliverWayCode != null) {
            stmt.bindString(26, lastDeliverWayCode);
        }
 
        String asphyxiaCode = entity.getAsphyxiaCode();
        if (asphyxiaCode != null) {
            stmt.bindString(27, asphyxiaCode);
        }
 
        String apgarScoreCode = entity.getApgarScoreCode();
        if (apgarScoreCode != null) {
            stmt.bindString(28, apgarScoreCode);
        }
 
        String apgarScore = entity.getApgarScore();
        if (apgarScore != null) {
            stmt.bindString(29, apgarScore);
        }
 
        String malformCode = entity.getMalformCode();
        if (malformCode != null) {
            stmt.bindString(30, malformCode);
        }
 
        String malformDesc = entity.getMalformDesc();
        if (malformDesc != null) {
            stmt.bindString(31, malformDesc);
        }
 
        String hearingScreenCode = entity.getHearingScreenCode();
        if (hearingScreenCode != null) {
            stmt.bindString(32, hearingScreenCode);
        }
 
        String diseaseScreenCode = entity.getDiseaseScreenCode();
        if (diseaseScreenCode != null) {
            stmt.bindString(33, diseaseScreenCode);
        }
 
        String diseaseScreenOthersDesc = entity.getDiseaseScreenOthersDesc();
        if (diseaseScreenOthersDesc != null) {
            stmt.bindString(34, diseaseScreenOthersDesc);
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(35, birthWeight);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(36, weight);
        }
 
        Double birthLength = entity.getBirthLength();
        if (birthLength != null) {
            stmt.bindDouble(37, birthLength);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(38, length);
        }
 
        String feedWayCode = entity.getFeedWayCode();
        if (feedWayCode != null) {
            stmt.bindString(39, feedWayCode);
        }
 
        String dailyFeedingTimes = entity.getDailyFeedingTimes();
        if (dailyFeedingTimes != null) {
            stmt.bindString(40, dailyFeedingTimes);
        }
 
        Integer feedingAmountEachTime = entity.getFeedingAmountEachTime();
        if (feedingAmountEachTime != null) {
            stmt.bindLong(41, feedingAmountEachTime);
        }
 
        String vomitCode = entity.getVomitCode();
        if (vomitCode != null) {
            stmt.bindString(42, vomitCode);
        }
 
        String stoolPropCode = entity.getStoolPropCode();
        if (stoolPropCode != null) {
            stmt.bindString(43, stoolPropCode);
        }
 
        String stoolTimes = entity.getStoolTimes();
        if (stoolTimes != null) {
            stmt.bindString(44, stoolTimes);
        }
 
        Double bodyTemperature = entity.getBodyTemperature();
        if (bodyTemperature != null) {
            stmt.bindDouble(45, bodyTemperature);
        }
 
        Integer pulses = entity.getPulses();
        if (pulses != null) {
            stmt.bindLong(46, pulses);
        }
 
        Integer breathingRate = entity.getBreathingRate();
        if (breathingRate != null) {
            stmt.bindLong(47, breathingRate);
        }
 
        String newbornComplexionCode = entity.getNewbornComplexionCode();
        if (newbornComplexionCode != null) {
            stmt.bindString(48, newbornComplexionCode);
        }
 
        String newbornComplexionOthersDesc = entity.getNewbornComplexionOthersDesc();
        if (newbornComplexionOthersDesc != null) {
            stmt.bindString(49, newbornComplexionOthersDesc);
        }
 
        String jaundiceSiteCode = entity.getJaundiceSiteCode();
        if (jaundiceSiteCode != null) {
            stmt.bindString(50, jaundiceSiteCode);
        }
 
        Double bregmaHorizDiameter = entity.getBregmaHorizDiameter();
        if (bregmaHorizDiameter != null) {
            stmt.bindDouble(51, bregmaHorizDiameter);
        }
 
        Double bregmaVertDiameter = entity.getBregmaVertDiameter();
        if (bregmaVertDiameter != null) {
            stmt.bindDouble(52, bregmaVertDiameter);
        }
 
        String bregmaTensionCode = entity.getBregmaTensionCode();
        if (bregmaTensionCode != null) {
            stmt.bindString(53, bregmaTensionCode);
        }
 
        String bregmaTensionOthersDesc = entity.getBregmaTensionOthersDesc();
        if (bregmaTensionOthersDesc != null) {
            stmt.bindString(54, bregmaTensionOthersDesc);
        }
 
        String eyeAbnormCode = entity.getEyeAbnormCode();
        if (eyeAbnormCode != null) {
            stmt.bindString(55, eyeAbnormCode);
        }
 
        String eyeAbnormDesc = entity.getEyeAbnormDesc();
        if (eyeAbnormDesc != null) {
            stmt.bindString(56, eyeAbnormDesc);
        }
 
        String earAbnormCode = entity.getEarAbnormCode();
        if (earAbnormCode != null) {
            stmt.bindString(57, earAbnormCode);
        }
 
        String earAbnormDesc = entity.getEarAbnormDesc();
        if (earAbnormDesc != null) {
            stmt.bindString(58, earAbnormDesc);
        }
 
        String noseAbnormCode = entity.getNoseAbnormCode();
        if (noseAbnormCode != null) {
            stmt.bindString(59, noseAbnormCode);
        }
 
        String noseAbnormDesc = entity.getNoseAbnormDesc();
        if (noseAbnormDesc != null) {
            stmt.bindString(60, noseAbnormDesc);
        }
 
        String oralAbnormCode = entity.getOralAbnormCode();
        if (oralAbnormCode != null) {
            stmt.bindString(61, oralAbnormCode);
        }
 
        String oralAbnormDesc = entity.getOralAbnormDesc();
        if (oralAbnormDesc != null) {
            stmt.bindString(62, oralAbnormDesc);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(63, lungAbnormCode);
        }
 
        String lungAbnormDesc = entity.getLungAbnormDesc();
        if (lungAbnormDesc != null) {
            stmt.bindString(64, lungAbnormDesc);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(65, heartAbnormCode);
        }
 
        String heartAbnormDesc = entity.getHeartAbnormDesc();
        if (heartAbnormDesc != null) {
            stmt.bindString(66, heartAbnormDesc);
        }
 
        String abdomenAbnormCode = entity.getAbdomenAbnormCode();
        if (abdomenAbnormCode != null) {
            stmt.bindString(67, abdomenAbnormCode);
        }
 
        String abdomenAbnormDesc = entity.getAbdomenAbnormDesc();
        if (abdomenAbnormDesc != null) {
            stmt.bindString(68, abdomenAbnormDesc);
        }
 
        String limbsAbnormCode = entity.getLimbsAbnormCode();
        if (limbsAbnormCode != null) {
            stmt.bindString(69, limbsAbnormCode);
        }
 
        String limbsAbnormDesc = entity.getLimbsAbnormDesc();
        if (limbsAbnormDesc != null) {
            stmt.bindString(70, limbsAbnormDesc);
        }
 
        String neckMassCode = entity.getNeckMassCode();
        if (neckMassCode != null) {
            stmt.bindString(71, neckMassCode);
        }
 
        String neckMassDesc = entity.getNeckMassDesc();
        if (neckMassDesc != null) {
            stmt.bindString(72, neckMassDesc);
        }
 
        String skinCode = entity.getSkinCode();
        if (skinCode != null) {
            stmt.bindString(73, skinCode);
        }
 
        String skinOthersDesc = entity.getSkinOthersDesc();
        if (skinOthersDesc != null) {
            stmt.bindString(74, skinOthersDesc);
        }
 
        String anusCode = entity.getAnusCode();
        if (anusCode != null) {
            stmt.bindString(75, anusCode);
        }
 
        String anusAbnormDesc = entity.getAnusAbnormDesc();
        if (anusAbnormDesc != null) {
            stmt.bindString(76, anusAbnormDesc);
        }
 
        String chestCode = entity.getChestCode();
        if (chestCode != null) {
            stmt.bindString(77, chestCode);
        }
 
        String chestAbnormDesc = entity.getChestAbnormDesc();
        if (chestAbnormDesc != null) {
            stmt.bindString(78, chestAbnormDesc);
        }
 
        String genitaliaCode = entity.getGenitaliaCode();
        if (genitaliaCode != null) {
            stmt.bindString(79, genitaliaCode);
        }
 
        String genitaliaAbnormDesc = entity.getGenitaliaAbnormDesc();
        if (genitaliaAbnormDesc != null) {
            stmt.bindString(80, genitaliaAbnormDesc);
        }
 
        String spineAbnormCode = entity.getSpineAbnormCode();
        if (spineAbnormCode != null) {
            stmt.bindString(81, spineAbnormCode);
        }
 
        String spineAbnormDesc = entity.getSpineAbnormDesc();
        if (spineAbnormDesc != null) {
            stmt.bindString(82, spineAbnormDesc);
        }
 
        String umbCordResultCode = entity.getUmbCordResultCode();
        if (umbCordResultCode != null) {
            stmt.bindString(83, umbCordResultCode);
        }
 
        String umbCordOthersDesc = entity.getUmbCordOthersDesc();
        if (umbCordOthersDesc != null) {
            stmt.bindString(84, umbCordOthersDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(85, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(86, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(87, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(88, referralReason);
        }
 
        String visitDoctorId = entity.getVisitDoctorId();
        if (visitDoctorId != null) {
            stmt.bindString(89, visitDoctorId);
        }
 
        String visitDoctorName = entity.getVisitDoctorName();
        if (visitDoctorName != null) {
            stmt.bindString(90, visitDoctorName);
        }
 
        java.util.Date thisVisitDate = entity.getThisVisitDate();
        if (thisVisitDate != null) {
            stmt.bindLong(91, thisVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(92, nextVisitDate.getTime());
        }
 
        String nextVisitPlace = entity.getNextVisitPlace();
        if (nextVisitPlace != null) {
            stmt.bindString(93, nextVisitPlace);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(94, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(95, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(96, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(97, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(98, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(99, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(100, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(101, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(102, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(103, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(104, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(105, jsonDetail);
        }
 
        Integer apgarScore1 = entity.getApgarScore1();
        if (apgarScore1 != null) {
            stmt.bindLong(106, apgarScore1);
        }
 
        Integer apgarScore5 = entity.getApgarScore5();
        if (apgarScore5 != null) {
            stmt.bindLong(107, apgarScore5);
        }
 
        Integer apgarScoreOther = entity.getApgarScoreOther();
        if (apgarScoreOther != null) {
            stmt.bindLong(108, apgarScoreOther);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildHomeVisit readEntity(Cursor cursor, int offset) {
        ChildHomeVisit entity = new ChildHomeVisit( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childHomeVisitId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newbornVisitFormNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newbornName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // newbornSexCode
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // newbornBirthDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newbornIdNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // presentAddrProvince
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fatherId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fatherName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fatherIdno
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fatherOccupCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fatherTelNo
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // fatherBirthDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // motherId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // motherName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // motherIdno
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // motherOccupCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // motherTelNo
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // motherBirthDate
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // birthGestWeeks
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // birthGestDays
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // motherHdcpCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // motherHdcpOthersDesc
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // deliveryOrgName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // lastDeliverWayCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // asphyxiaCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // apgarScoreCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // apgarScore
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // malformCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // malformDesc
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // hearingScreenCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // diseaseScreenCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // diseaseScreenOthersDesc
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // birthWeight
            cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35), // weight
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // birthLength
            cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37), // length
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // feedWayCode
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // dailyFeedingTimes
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // feedingAmountEachTime
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // vomitCode
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // stoolPropCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // stoolTimes
            cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44), // bodyTemperature
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // pulses
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // breathingRate
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // newbornComplexionCode
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // newbornComplexionOthersDesc
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // jaundiceSiteCode
            cursor.isNull(offset + 50) ? null : cursor.getDouble(offset + 50), // bregmaHorizDiameter
            cursor.isNull(offset + 51) ? null : cursor.getDouble(offset + 51), // bregmaVertDiameter
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // bregmaTensionCode
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // bregmaTensionOthersDesc
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // eyeAbnormCode
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // eyeAbnormDesc
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // earAbnormCode
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // earAbnormDesc
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // noseAbnormCode
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // noseAbnormDesc
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // oralAbnormCode
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // oralAbnormDesc
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // lungAbnormCode
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // lungAbnormDesc
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // heartAbnormCode
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // heartAbnormDesc
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // abdomenAbnormCode
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // abdomenAbnormDesc
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // limbsAbnormCode
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // limbsAbnormDesc
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // neckMassCode
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // neckMassDesc
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // skinCode
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // skinOthersDesc
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // anusCode
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // anusAbnormDesc
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // chestCode
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // chestAbnormDesc
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // genitaliaCode
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // genitaliaAbnormDesc
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // spineAbnormCode
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // spineAbnormDesc
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // umbCordResultCode
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // umbCordOthersDesc
            cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84), // referralCode
            cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85), // refertoOrgName
            cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86), // refertoDeptName
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // referralReason
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // visitDoctorId
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // visitDoctorName
            cursor.isNull(offset + 90) ? null : new java.util.Date(cursor.getLong(offset + 90)), // thisVisitDate
            cursor.isNull(offset + 91) ? null : new java.util.Date(cursor.getLong(offset + 91)), // nextVisitDate
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92), // nextVisitPlace
            cursor.isNull(offset + 93) ? null : cursor.getInt(offset + 93), // isCancel
            cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94), // createOrgId
            cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95), // orgName
            cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96), // creatorId
            cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97), // creator
            cursor.isNull(offset + 98) ? null : new java.util.Date(cursor.getLong(offset + 98)), // createTime
            cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99), // modifiedOrgId
            cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100), // modifiedOrgName
            cursor.isNull(offset + 101) ? null : cursor.getString(offset + 101), // modifierId
            cursor.isNull(offset + 102) ? null : cursor.getString(offset + 102), // modifier
            cursor.isNull(offset + 103) ? null : new java.util.Date(cursor.getLong(offset + 103)), // modifiedTime
            cursor.isNull(offset + 104) ? null : cursor.getString(offset + 104), // jsonDetail
            cursor.isNull(offset + 105) ? null : cursor.getInt(offset + 105), // apgarScore1
            cursor.isNull(offset + 106) ? null : cursor.getInt(offset + 106), // apgarScore5
            cursor.isNull(offset + 107) ? null : cursor.getInt(offset + 107) // apgarScoreOther
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildHomeVisit entity, int offset) {
        entity.setChildHomeVisitId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewbornVisitFormNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewbornName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewbornSexCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNewbornBirthDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setNewbornIdNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPresentAddrProvince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFatherId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFatherName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFatherIdno(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFatherOccupCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFatherTelNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFatherBirthDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setMotherId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMotherName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMotherIdno(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMotherOccupCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMotherTelNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMotherBirthDate(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setBirthGestWeeks(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setBirthGestDays(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setMotherHdcpCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMotherHdcpOthersDesc(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDeliveryOrgName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLastDeliverWayCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setAsphyxiaCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setApgarScoreCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setApgarScore(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setMalformCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMalformDesc(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setHearingScreenCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setDiseaseScreenCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDiseaseScreenOthersDesc(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setBirthWeight(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setWeight(cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35));
        entity.setBirthLength(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setLength(cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37));
        entity.setFeedWayCode(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setDailyFeedingTimes(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFeedingAmountEachTime(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setVomitCode(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setStoolPropCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setStoolTimes(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setBodyTemperature(cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44));
        entity.setPulses(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setBreathingRate(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setNewbornComplexionCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setNewbornComplexionOthersDesc(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setJaundiceSiteCode(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setBregmaHorizDiameter(cursor.isNull(offset + 50) ? null : cursor.getDouble(offset + 50));
        entity.setBregmaVertDiameter(cursor.isNull(offset + 51) ? null : cursor.getDouble(offset + 51));
        entity.setBregmaTensionCode(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setBregmaTensionOthersDesc(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setEyeAbnormCode(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setEyeAbnormDesc(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setEarAbnormCode(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setEarAbnormDesc(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setNoseAbnormCode(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setNoseAbnormDesc(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setOralAbnormCode(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setOralAbnormDesc(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setLungAbnormCode(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setLungAbnormDesc(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setHeartAbnormCode(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setHeartAbnormDesc(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setAbdomenAbnormCode(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setAbdomenAbnormDesc(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setLimbsAbnormCode(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setLimbsAbnormDesc(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setNeckMassCode(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setNeckMassDesc(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setSkinCode(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setSkinOthersDesc(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setAnusCode(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setAnusAbnormDesc(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setChestCode(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setChestAbnormDesc(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setGenitaliaCode(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setGenitaliaAbnormDesc(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setSpineAbnormCode(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setSpineAbnormDesc(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setUmbCordResultCode(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setUmbCordOthersDesc(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setReferralCode(cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84));
        entity.setRefertoOrgName(cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85));
        entity.setRefertoDeptName(cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86));
        entity.setReferralReason(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setVisitDoctorId(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setVisitDoctorName(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setThisVisitDate(cursor.isNull(offset + 90) ? null : new java.util.Date(cursor.getLong(offset + 90)));
        entity.setNextVisitDate(cursor.isNull(offset + 91) ? null : new java.util.Date(cursor.getLong(offset + 91)));
        entity.setNextVisitPlace(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
        entity.setIsCancel(cursor.isNull(offset + 93) ? null : cursor.getInt(offset + 93));
        entity.setCreateOrgId(cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94));
        entity.setOrgName(cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95));
        entity.setCreatorId(cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96));
        entity.setCreator(cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97));
        entity.setCreateTime(cursor.isNull(offset + 98) ? null : new java.util.Date(cursor.getLong(offset + 98)));
        entity.setModifiedOrgId(cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99));
        entity.setModifiedOrgName(cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100));
        entity.setModifierId(cursor.isNull(offset + 101) ? null : cursor.getString(offset + 101));
        entity.setModifier(cursor.isNull(offset + 102) ? null : cursor.getString(offset + 102));
        entity.setModifiedTime(cursor.isNull(offset + 103) ? null : new java.util.Date(cursor.getLong(offset + 103)));
        entity.setJsonDetail(cursor.isNull(offset + 104) ? null : cursor.getString(offset + 104));
        entity.setApgarScore1(cursor.isNull(offset + 105) ? null : cursor.getInt(offset + 105));
        entity.setApgarScore5(cursor.isNull(offset + 106) ? null : cursor.getInt(offset + 106));
        entity.setApgarScoreOther(cursor.isNull(offset + 107) ? null : cursor.getInt(offset + 107));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildHomeVisit entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildHomeVisit entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
