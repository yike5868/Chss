package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.maternal.MaternalNewbornSituation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_NEWBORN_SITUATION".
*/
public class MaternalNewbornSituationDao extends AbstractDao<MaternalNewbornSituation, Void> {

    public static final String TABLENAME = "MATERNAL_NEWBORN_SITUATION";

    /**
     * Properties of entity MaternalNewbornSituation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NewbornSituationId = new Property(0, String.class, "newbornSituationId", false, "NEWBORN_SITUATION_ID");
        public final static Property MaternalInfoId = new Property(1, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MaternalChildbirthId = new Property(3, String.class, "maternalChildbirthId", false, "MATERNAL_CHILDBIRTH_ID");
        public final static Property BabySex = new Property(4, String.class, "babySex", false, "BABY_SEX");
        public final static Property BabyGivebirthSituation = new Property(5, String.class, "babyGivebirthSituation", false, "BABY_GIVEBIRTH_SITUATION");
        public final static Property BabyWeight = new Property(6, Double.class, "babyWeight", false, "BABY_WEIGHT");
        public final static Property BabyChest = new Property(7, Double.class, "babyChest", false, "BABY_CHEST");
        public final static Property BabyHeight = new Property(8, Double.class, "babyHeight", false, "BABY_HEIGHT");
        public final static Property BabyHeadSize = new Property(9, Double.class, "babyHeadSize", false, "BABY_HEAD_SIZE");
        public final static Property BabyMalformation = new Property(10, String.class, "babyMalformation", false, "BABY_MALFORMATION");
        public final static Property BabySuffocate = new Property(11, String.class, "babySuffocate", false, "BABY_SUFFOCATE");
        public final static Property BabyDeath = new Property(12, String.class, "babyDeath", false, "BABY_DEATH");
        public final static Property BabyApgar1 = new Property(13, Integer.class, "babyApgar1", false, "BABY_APGAR1");
        public final static Property BabyApgar5 = new Property(14, Integer.class, "babyApgar5", false, "BABY_APGAR5");
        public final static Property BabyApgar10 = new Property(15, Integer.class, "babyApgar10", false, "BABY_APGAR10");
        public final static Property BcgVaccineInoculability = new Property(16, String.class, "bcgVaccineInoculability", false, "BCG_VACCINE_INOCULABILITY");
        public final static Property BcgVaccineReason = new Property(17, String.class, "bcgVaccineReason", false, "BCG_VACCINE_REASON");
        public final static Property HepatitisBVaccine = new Property(18, String.class, "hepatitisBVaccine", false, "HEPATITIS_BVACCINE");
        public final static Property HepatitisBReason = new Property(19, String.class, "hepatitisBReason", false, "HEPATITIS_BREASON");
        public final static Property PhenylketonuriaExamination = new Property(20, String.class, "phenylketonuriaExamination", false, "PHENYLKETONURIA_EXAMINATION");
        public final static Property PhenylketonuriaResult = new Property(21, String.class, "phenylketonuriaResult", false, "PHENYLKETONURIA_RESULT");
        public final static Property ThyroidHypofunction = new Property(22, String.class, "thyroidHypofunction", false, "THYROID_HYPOFUNCTION");
        public final static Property ThyroidHypofunctionResult = new Property(23, String.class, "thyroidHypofunctionResult", false, "THYROID_HYPOFUNCTION_RESULT");
        public final static Property HearingExamination = new Property(24, String.class, "hearingExamination", false, "HEARING_EXAMINATION");
        public final static Property HearingResult = new Property(25, String.class, "hearingResult", false, "HEARING_RESULT");
    };


    public MaternalNewbornSituationDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalNewbornSituationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_NEWBORN_SITUATION\" (" + //
                "\"NEWBORN_SITUATION_ID\" TEXT," + // 0: newbornSituationId
                "\"MATERNAL_INFO_ID\" TEXT," + // 1: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"MATERNAL_CHILDBIRTH_ID\" TEXT," + // 3: maternalChildbirthId
                "\"BABY_SEX\" TEXT," + // 4: babySex
                "\"BABY_GIVEBIRTH_SITUATION\" TEXT," + // 5: babyGivebirthSituation
                "\"BABY_WEIGHT\" REAL," + // 6: babyWeight
                "\"BABY_CHEST\" REAL," + // 7: babyChest
                "\"BABY_HEIGHT\" REAL," + // 8: babyHeight
                "\"BABY_HEAD_SIZE\" REAL," + // 9: babyHeadSize
                "\"BABY_MALFORMATION\" TEXT," + // 10: babyMalformation
                "\"BABY_SUFFOCATE\" TEXT," + // 11: babySuffocate
                "\"BABY_DEATH\" TEXT," + // 12: babyDeath
                "\"BABY_APGAR1\" INTEGER," + // 13: babyApgar1
                "\"BABY_APGAR5\" INTEGER," + // 14: babyApgar5
                "\"BABY_APGAR10\" INTEGER," + // 15: babyApgar10
                "\"BCG_VACCINE_INOCULABILITY\" TEXT," + // 16: bcgVaccineInoculability
                "\"BCG_VACCINE_REASON\" TEXT," + // 17: bcgVaccineReason
                "\"HEPATITIS_BVACCINE\" TEXT," + // 18: hepatitisBVaccine
                "\"HEPATITIS_BREASON\" TEXT," + // 19: hepatitisBReason
                "\"PHENYLKETONURIA_EXAMINATION\" TEXT," + // 20: phenylketonuriaExamination
                "\"PHENYLKETONURIA_RESULT\" TEXT," + // 21: phenylketonuriaResult
                "\"THYROID_HYPOFUNCTION\" TEXT," + // 22: thyroidHypofunction
                "\"THYROID_HYPOFUNCTION_RESULT\" TEXT," + // 23: thyroidHypofunctionResult
                "\"HEARING_EXAMINATION\" TEXT," + // 24: hearingExamination
                "\"HEARING_RESULT\" TEXT);"); // 25: hearingResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_NEWBORN_SITUATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalNewbornSituation entity) {
        stmt.clearBindings();
 
        String newbornSituationId = entity.getNewbornSituationId();
        if (newbornSituationId != null) {
            stmt.bindString(1, newbornSituationId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalChildbirthId = entity.getMaternalChildbirthId();
        if (maternalChildbirthId != null) {
            stmt.bindString(4, maternalChildbirthId);
        }
 
        String babySex = entity.getBabySex();
        if (babySex != null) {
            stmt.bindString(5, babySex);
        }
 
        String babyGivebirthSituation = entity.getBabyGivebirthSituation();
        if (babyGivebirthSituation != null) {
            stmt.bindString(6, babyGivebirthSituation);
        }
 
        Double babyWeight = entity.getBabyWeight();
        if (babyWeight != null) {
            stmt.bindDouble(7, babyWeight);
        }
 
        Double babyChest = entity.getBabyChest();
        if (babyChest != null) {
            stmt.bindDouble(8, babyChest);
        }
 
        Double babyHeight = entity.getBabyHeight();
        if (babyHeight != null) {
            stmt.bindDouble(9, babyHeight);
        }
 
        Double babyHeadSize = entity.getBabyHeadSize();
        if (babyHeadSize != null) {
            stmt.bindDouble(10, babyHeadSize);
        }
 
        String babyMalformation = entity.getBabyMalformation();
        if (babyMalformation != null) {
            stmt.bindString(11, babyMalformation);
        }
 
        String babySuffocate = entity.getBabySuffocate();
        if (babySuffocate != null) {
            stmt.bindString(12, babySuffocate);
        }
 
        String babyDeath = entity.getBabyDeath();
        if (babyDeath != null) {
            stmt.bindString(13, babyDeath);
        }
 
        Integer babyApgar1 = entity.getBabyApgar1();
        if (babyApgar1 != null) {
            stmt.bindLong(14, babyApgar1);
        }
 
        Integer babyApgar5 = entity.getBabyApgar5();
        if (babyApgar5 != null) {
            stmt.bindLong(15, babyApgar5);
        }
 
        Integer babyApgar10 = entity.getBabyApgar10();
        if (babyApgar10 != null) {
            stmt.bindLong(16, babyApgar10);
        }
 
        String bcgVaccineInoculability = entity.getBcgVaccineInoculability();
        if (bcgVaccineInoculability != null) {
            stmt.bindString(17, bcgVaccineInoculability);
        }
 
        String bcgVaccineReason = entity.getBcgVaccineReason();
        if (bcgVaccineReason != null) {
            stmt.bindString(18, bcgVaccineReason);
        }
 
        String hepatitisBVaccine = entity.getHepatitisBVaccine();
        if (hepatitisBVaccine != null) {
            stmt.bindString(19, hepatitisBVaccine);
        }
 
        String hepatitisBReason = entity.getHepatitisBReason();
        if (hepatitisBReason != null) {
            stmt.bindString(20, hepatitisBReason);
        }
 
        String phenylketonuriaExamination = entity.getPhenylketonuriaExamination();
        if (phenylketonuriaExamination != null) {
            stmt.bindString(21, phenylketonuriaExamination);
        }
 
        String phenylketonuriaResult = entity.getPhenylketonuriaResult();
        if (phenylketonuriaResult != null) {
            stmt.bindString(22, phenylketonuriaResult);
        }
 
        String thyroidHypofunction = entity.getThyroidHypofunction();
        if (thyroidHypofunction != null) {
            stmt.bindString(23, thyroidHypofunction);
        }
 
        String thyroidHypofunctionResult = entity.getThyroidHypofunctionResult();
        if (thyroidHypofunctionResult != null) {
            stmt.bindString(24, thyroidHypofunctionResult);
        }
 
        String hearingExamination = entity.getHearingExamination();
        if (hearingExamination != null) {
            stmt.bindString(25, hearingExamination);
        }
 
        String hearingResult = entity.getHearingResult();
        if (hearingResult != null) {
            stmt.bindString(26, hearingResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalNewbornSituation entity) {
        stmt.clearBindings();
 
        String newbornSituationId = entity.getNewbornSituationId();
        if (newbornSituationId != null) {
            stmt.bindString(1, newbornSituationId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalChildbirthId = entity.getMaternalChildbirthId();
        if (maternalChildbirthId != null) {
            stmt.bindString(4, maternalChildbirthId);
        }
 
        String babySex = entity.getBabySex();
        if (babySex != null) {
            stmt.bindString(5, babySex);
        }
 
        String babyGivebirthSituation = entity.getBabyGivebirthSituation();
        if (babyGivebirthSituation != null) {
            stmt.bindString(6, babyGivebirthSituation);
        }
 
        Double babyWeight = entity.getBabyWeight();
        if (babyWeight != null) {
            stmt.bindDouble(7, babyWeight);
        }
 
        Double babyChest = entity.getBabyChest();
        if (babyChest != null) {
            stmt.bindDouble(8, babyChest);
        }
 
        Double babyHeight = entity.getBabyHeight();
        if (babyHeight != null) {
            stmt.bindDouble(9, babyHeight);
        }
 
        Double babyHeadSize = entity.getBabyHeadSize();
        if (babyHeadSize != null) {
            stmt.bindDouble(10, babyHeadSize);
        }
 
        String babyMalformation = entity.getBabyMalformation();
        if (babyMalformation != null) {
            stmt.bindString(11, babyMalformation);
        }
 
        String babySuffocate = entity.getBabySuffocate();
        if (babySuffocate != null) {
            stmt.bindString(12, babySuffocate);
        }
 
        String babyDeath = entity.getBabyDeath();
        if (babyDeath != null) {
            stmt.bindString(13, babyDeath);
        }
 
        Integer babyApgar1 = entity.getBabyApgar1();
        if (babyApgar1 != null) {
            stmt.bindLong(14, babyApgar1);
        }
 
        Integer babyApgar5 = entity.getBabyApgar5();
        if (babyApgar5 != null) {
            stmt.bindLong(15, babyApgar5);
        }
 
        Integer babyApgar10 = entity.getBabyApgar10();
        if (babyApgar10 != null) {
            stmt.bindLong(16, babyApgar10);
        }
 
        String bcgVaccineInoculability = entity.getBcgVaccineInoculability();
        if (bcgVaccineInoculability != null) {
            stmt.bindString(17, bcgVaccineInoculability);
        }
 
        String bcgVaccineReason = entity.getBcgVaccineReason();
        if (bcgVaccineReason != null) {
            stmt.bindString(18, bcgVaccineReason);
        }
 
        String hepatitisBVaccine = entity.getHepatitisBVaccine();
        if (hepatitisBVaccine != null) {
            stmt.bindString(19, hepatitisBVaccine);
        }
 
        String hepatitisBReason = entity.getHepatitisBReason();
        if (hepatitisBReason != null) {
            stmt.bindString(20, hepatitisBReason);
        }
 
        String phenylketonuriaExamination = entity.getPhenylketonuriaExamination();
        if (phenylketonuriaExamination != null) {
            stmt.bindString(21, phenylketonuriaExamination);
        }
 
        String phenylketonuriaResult = entity.getPhenylketonuriaResult();
        if (phenylketonuriaResult != null) {
            stmt.bindString(22, phenylketonuriaResult);
        }
 
        String thyroidHypofunction = entity.getThyroidHypofunction();
        if (thyroidHypofunction != null) {
            stmt.bindString(23, thyroidHypofunction);
        }
 
        String thyroidHypofunctionResult = entity.getThyroidHypofunctionResult();
        if (thyroidHypofunctionResult != null) {
            stmt.bindString(24, thyroidHypofunctionResult);
        }
 
        String hearingExamination = entity.getHearingExamination();
        if (hearingExamination != null) {
            stmt.bindString(25, hearingExamination);
        }
 
        String hearingResult = entity.getHearingResult();
        if (hearingResult != null) {
            stmt.bindString(26, hearingResult);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalNewbornSituation readEntity(Cursor cursor, int offset) {
        MaternalNewbornSituation entity = new MaternalNewbornSituation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // newbornSituationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // maternalInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maternalChildbirthId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // babySex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // babyGivebirthSituation
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // babyWeight
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // babyChest
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // babyHeight
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // babyHeadSize
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // babyMalformation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // babySuffocate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // babyDeath
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // babyApgar1
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // babyApgar5
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // babyApgar10
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bcgVaccineInoculability
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // bcgVaccineReason
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // hepatitisBVaccine
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // hepatitisBReason
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // phenylketonuriaExamination
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // phenylketonuriaResult
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // thyroidHypofunction
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // thyroidHypofunctionResult
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // hearingExamination
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // hearingResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalNewbornSituation entity, int offset) {
        entity.setNewbornSituationId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaternalInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaternalChildbirthId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBabySex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBabyGivebirthSituation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBabyWeight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setBabyChest(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setBabyHeight(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBabyHeadSize(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setBabyMalformation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBabySuffocate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBabyDeath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBabyApgar1(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setBabyApgar5(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setBabyApgar10(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setBcgVaccineInoculability(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBcgVaccineReason(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHepatitisBVaccine(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHepatitisBReason(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPhenylketonuriaExamination(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhenylketonuriaResult(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setThyroidHypofunction(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setThyroidHypofunctionResult(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHearingExamination(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHearingResult(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalNewbornSituation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalNewbornSituation entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
