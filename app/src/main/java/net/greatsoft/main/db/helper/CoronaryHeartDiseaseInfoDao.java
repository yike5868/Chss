package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.corconaryHeart.CoronaryHeartDiseaseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CORONARY_HEART_DISEASE_INFO".
*/
public class CoronaryHeartDiseaseInfoDao extends AbstractDao<CoronaryHeartDiseaseInfo, Void> {

    public static final String TABLENAME = "CORONARY_HEART_DISEASE_INFO";

    /**
     * Properties of entity CoronaryHeartDiseaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CoronaryHeartDiseaseInfoId = new Property(0, String.class, "coronaryHeartDiseaseInfoId", false, "CORONARY_HEART_DISEASE_INFO_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ManageOrgId = new Property(2, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property HeartDiseaseInfoNo = new Property(3, String.class, "heartDiseaseInfoNo", false, "HEART_DISEASE_INFO_NO");
        public final static Property ManageGroup = new Property(4, String.class, "manageGroup", false, "MANAGE_GROUP");
        public final static Property UserCreateTime = new Property(5, java.util.Date.class, "userCreateTime", false, "USER_CREATE_TIME");
        public final static Property CaseSource = new Property(6, String.class, "caseSource", false, "CASE_SOURCE");
        public final static Property ConfirmDate = new Property(7, java.util.Date.class, "confirmDate", false, "CONFIRM_DATE");
        public final static Property ConfirmOrgName = new Property(8, String.class, "confirmOrgName", false, "CONFIRM_ORG_NAME");
        public final static Property HeartDiseaseType = new Property(9, String.class, "heartDiseaseType", false, "HEART_DISEASE_TYPE");
        public final static Property Height = new Property(10, Double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(11, Double.class, "weight", false, "WEIGHT");
        public final static Property Bmi = new Property(12, Double.class, "bmi", false, "BMI");
        public final static Property Sbp = new Property(13, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(14, Integer.class, "dbp", false, "DBP");
        public final static Property Waist = new Property(15, Double.class, "waist", false, "WAIST");
        public final static Property FbgMmol = new Property(16, Double.class, "fbgMmol", false, "FBG_MMOL");
        public final static Property PbgMmol = new Property(17, Double.class, "pbgMmol", false, "PBG_MMOL");
        public final static Property Tcho = new Property(18, Double.class, "tcho", false, "TCHO");
        public final static Property Tg = new Property(19, Double.class, "tg", false, "TG");
        public final static Property Ldlc = new Property(20, Double.class, "ldlc", false, "LDLC");
        public final static Property Hdlc = new Property(21, Double.class, "hdlc", false, "HDLC");
        public final static Property CheckDate = new Property(22, java.util.Date.class, "checkDate", false, "CHECK_DATE");
        public final static Property HeartRate = new Property(23, Integer.class, "heartRate", false, "HEART_RATE");
        public final static Property EcgAbnormResult = new Property(24, String.class, "ecgAbnormResult", false, "ECG_ABNORM_RESULT");
        public final static Property HeartCheckResult = new Property(25, String.class, "heartCheckResult", false, "HEART_CHECK_RESULT");
        public final static Property CoronaryArteryResult = new Property(26, String.class, "coronaryArteryResult", false, "CORONARY_ARTERY_RESULT");
        public final static Property EcgExerciseResult = new Property(27, String.class, "ecgExerciseResult", false, "ECG_EXERCISE_RESULT");
        public final static Property CardiacEnzymesResult = new Property(28, String.class, "cardiacEnzymesResult", false, "CARDIAC_ENZYMES_RESULT");
        public final static Property ExerciseFreqCode = new Property(29, String.class, "exerciseFreqCode", false, "EXERCISE_FREQ_CODE");
        public final static Property SmokingStatusCode = new Property(30, String.class, "smokingStatusCode", false, "SMOKING_STATUS_CODE");
        public final static Property DrinkingFreqCode = new Property(31, String.class, "drinkingFreqCode", false, "DRINKING_FREQ_CODE");
        public final static Property SelfCareAssessCode = new Property(32, String.class, "selfCareAssessCode", false, "SELF_CARE_ASSESS_CODE");
        public final static Property HasUseDrugs = new Property(33, String.class, "hasUseDrugs", false, "HAS_USE_DRUGS");
        public final static Property DrugComplianceCode = new Property(34, String.class, "drugComplianceCode", false, "DRUG_COMPLIANCE_CODE");
        public final static Property HasEndManage = new Property(35, String.class, "hasEndManage", false, "HAS_END_MANAGE");
        public final static Property EndManageDate = new Property(36, java.util.Date.class, "endManageDate", false, "END_MANAGE_DATE");
        public final static Property EndManageReason = new Property(37, String.class, "endManageReason", false, "END_MANAGE_REASON");
        public final static Property IsCancel = new Property(38, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(39, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(40, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(41, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(42, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(43, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(44, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(45, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(46, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(47, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(48, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(49, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property AssessmentCount = new Property(50, Integer.class, "assessmentCount", false, "ASSESSMENT_COUNT");
        public final static Property MissingCount = new Property(51, Integer.class, "missingCount", false, "MISSING_COUNT");
        public final static Property IntactRate = new Property(52, Double.class, "intactRate", false, "INTACT_RATE");
        public final static Property IsAutoBuild = new Property(53, String.class, "isAutoBuild", false, "IS_AUTO_BUILD");
    };


    public CoronaryHeartDiseaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CoronaryHeartDiseaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CORONARY_HEART_DISEASE_INFO\" (" + //
                "\"CORONARY_HEART_DISEASE_INFO_ID\" TEXT," + // 0: coronaryHeartDiseaseInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"MANAGE_ORG_ID\" TEXT," + // 2: manageOrgId
                "\"HEART_DISEASE_INFO_NO\" TEXT," + // 3: heartDiseaseInfoNo
                "\"MANAGE_GROUP\" TEXT," + // 4: manageGroup
                "\"USER_CREATE_TIME\" INTEGER," + // 5: userCreateTime
                "\"CASE_SOURCE\" TEXT," + // 6: caseSource
                "\"CONFIRM_DATE\" INTEGER," + // 7: confirmDate
                "\"CONFIRM_ORG_NAME\" TEXT," + // 8: confirmOrgName
                "\"HEART_DISEASE_TYPE\" TEXT," + // 9: heartDiseaseType
                "\"HEIGHT\" REAL," + // 10: height
                "\"WEIGHT\" REAL," + // 11: weight
                "\"BMI\" REAL," + // 12: bmi
                "\"SBP\" INTEGER," + // 13: sbp
                "\"DBP\" INTEGER," + // 14: dbp
                "\"WAIST\" REAL," + // 15: waist
                "\"FBG_MMOL\" REAL," + // 16: fbgMmol
                "\"PBG_MMOL\" REAL," + // 17: pbgMmol
                "\"TCHO\" REAL," + // 18: tcho
                "\"TG\" REAL," + // 19: tg
                "\"LDLC\" REAL," + // 20: ldlc
                "\"HDLC\" REAL," + // 21: hdlc
                "\"CHECK_DATE\" INTEGER," + // 22: checkDate
                "\"HEART_RATE\" INTEGER," + // 23: heartRate
                "\"ECG_ABNORM_RESULT\" TEXT," + // 24: ecgAbnormResult
                "\"HEART_CHECK_RESULT\" TEXT," + // 25: heartCheckResult
                "\"CORONARY_ARTERY_RESULT\" TEXT," + // 26: coronaryArteryResult
                "\"ECG_EXERCISE_RESULT\" TEXT," + // 27: ecgExerciseResult
                "\"CARDIAC_ENZYMES_RESULT\" TEXT," + // 28: cardiacEnzymesResult
                "\"EXERCISE_FREQ_CODE\" TEXT," + // 29: exerciseFreqCode
                "\"SMOKING_STATUS_CODE\" TEXT," + // 30: smokingStatusCode
                "\"DRINKING_FREQ_CODE\" TEXT," + // 31: drinkingFreqCode
                "\"SELF_CARE_ASSESS_CODE\" TEXT," + // 32: selfCareAssessCode
                "\"HAS_USE_DRUGS\" TEXT," + // 33: hasUseDrugs
                "\"DRUG_COMPLIANCE_CODE\" TEXT," + // 34: drugComplianceCode
                "\"HAS_END_MANAGE\" TEXT," + // 35: hasEndManage
                "\"END_MANAGE_DATE\" INTEGER," + // 36: endManageDate
                "\"END_MANAGE_REASON\" TEXT," + // 37: endManageReason
                "\"IS_CANCEL\" INTEGER," + // 38: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 39: createOrgId
                "\"ORG_NAME\" TEXT," + // 40: orgName
                "\"CREATOR_ID\" TEXT," + // 41: creatorId
                "\"CREATOR\" TEXT," + // 42: creator
                "\"CREATE_TIME\" INTEGER," + // 43: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 44: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 45: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 46: modifierId
                "\"MODIFIER\" TEXT," + // 47: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 48: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 49: jsonDetail
                "\"ASSESSMENT_COUNT\" INTEGER," + // 50: assessmentCount
                "\"MISSING_COUNT\" INTEGER," + // 51: missingCount
                "\"INTACT_RATE\" REAL," + // 52: intactRate
                "\"IS_AUTO_BUILD\" TEXT);"); // 53: isAutoBuild
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CORONARY_HEART_DISEASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoronaryHeartDiseaseInfo entity) {
        stmt.clearBindings();
 
        String coronaryHeartDiseaseInfoId = entity.getCoronaryHeartDiseaseInfoId();
        if (coronaryHeartDiseaseInfoId != null) {
            stmt.bindString(1, coronaryHeartDiseaseInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String heartDiseaseInfoNo = entity.getHeartDiseaseInfoNo();
        if (heartDiseaseInfoNo != null) {
            stmt.bindString(4, heartDiseaseInfoNo);
        }
 
        String manageGroup = entity.getManageGroup();
        if (manageGroup != null) {
            stmt.bindString(5, manageGroup);
        }
 
        java.util.Date userCreateTime = entity.getUserCreateTime();
        if (userCreateTime != null) {
            stmt.bindLong(6, userCreateTime.getTime());
        }
 
        String caseSource = entity.getCaseSource();
        if (caseSource != null) {
            stmt.bindString(7, caseSource);
        }
 
        java.util.Date confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(8, confirmDate.getTime());
        }
 
        String confirmOrgName = entity.getConfirmOrgName();
        if (confirmOrgName != null) {
            stmt.bindString(9, confirmOrgName);
        }
 
        String heartDiseaseType = entity.getHeartDiseaseType();
        if (heartDiseaseType != null) {
            stmt.bindString(10, heartDiseaseType);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(11, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(12, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(13, bmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(14, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(15, dbp);
        }
 
        Double waist = entity.getWaist();
        if (waist != null) {
            stmt.bindDouble(16, waist);
        }
 
        Double fbgMmol = entity.getFbgMmol();
        if (fbgMmol != null) {
            stmt.bindDouble(17, fbgMmol);
        }
 
        Double pbgMmol = entity.getPbgMmol();
        if (pbgMmol != null) {
            stmt.bindDouble(18, pbgMmol);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(19, tcho);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(20, tg);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(21, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(22, hdlc);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(23, checkDate.getTime());
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(24, heartRate);
        }
 
        String ecgAbnormResult = entity.getEcgAbnormResult();
        if (ecgAbnormResult != null) {
            stmt.bindString(25, ecgAbnormResult);
        }
 
        String heartCheckResult = entity.getHeartCheckResult();
        if (heartCheckResult != null) {
            stmt.bindString(26, heartCheckResult);
        }
 
        String coronaryArteryResult = entity.getCoronaryArteryResult();
        if (coronaryArteryResult != null) {
            stmt.bindString(27, coronaryArteryResult);
        }
 
        String ecgExerciseResult = entity.getEcgExerciseResult();
        if (ecgExerciseResult != null) {
            stmt.bindString(28, ecgExerciseResult);
        }
 
        String cardiacEnzymesResult = entity.getCardiacEnzymesResult();
        if (cardiacEnzymesResult != null) {
            stmt.bindString(29, cardiacEnzymesResult);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(30, exerciseFreqCode);
        }
 
        String smokingStatusCode = entity.getSmokingStatusCode();
        if (smokingStatusCode != null) {
            stmt.bindString(31, smokingStatusCode);
        }
 
        String drinkingFreqCode = entity.getDrinkingFreqCode();
        if (drinkingFreqCode != null) {
            stmt.bindString(32, drinkingFreqCode);
        }
 
        String selfCareAssessCode = entity.getSelfCareAssessCode();
        if (selfCareAssessCode != null) {
            stmt.bindString(33, selfCareAssessCode);
        }
 
        String hasUseDrugs = entity.getHasUseDrugs();
        if (hasUseDrugs != null) {
            stmt.bindString(34, hasUseDrugs);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(35, drugComplianceCode);
        }
 
        String hasEndManage = entity.getHasEndManage();
        if (hasEndManage != null) {
            stmt.bindString(36, hasEndManage);
        }
 
        java.util.Date endManageDate = entity.getEndManageDate();
        if (endManageDate != null) {
            stmt.bindLong(37, endManageDate.getTime());
        }
 
        String endManageReason = entity.getEndManageReason();
        if (endManageReason != null) {
            stmt.bindString(38, endManageReason);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(39, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(40, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(41, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(42, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(43, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(44, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(45, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(46, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(47, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(48, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(49, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(50, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(51, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(52, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(53, intactRate);
        }
 
        String isAutoBuild = entity.getIsAutoBuild();
        if (isAutoBuild != null) {
            stmt.bindString(54, isAutoBuild);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoronaryHeartDiseaseInfo entity) {
        stmt.clearBindings();
 
        String coronaryHeartDiseaseInfoId = entity.getCoronaryHeartDiseaseInfoId();
        if (coronaryHeartDiseaseInfoId != null) {
            stmt.bindString(1, coronaryHeartDiseaseInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String heartDiseaseInfoNo = entity.getHeartDiseaseInfoNo();
        if (heartDiseaseInfoNo != null) {
            stmt.bindString(4, heartDiseaseInfoNo);
        }
 
        String manageGroup = entity.getManageGroup();
        if (manageGroup != null) {
            stmt.bindString(5, manageGroup);
        }
 
        java.util.Date userCreateTime = entity.getUserCreateTime();
        if (userCreateTime != null) {
            stmt.bindLong(6, userCreateTime.getTime());
        }
 
        String caseSource = entity.getCaseSource();
        if (caseSource != null) {
            stmt.bindString(7, caseSource);
        }
 
        java.util.Date confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(8, confirmDate.getTime());
        }
 
        String confirmOrgName = entity.getConfirmOrgName();
        if (confirmOrgName != null) {
            stmt.bindString(9, confirmOrgName);
        }
 
        String heartDiseaseType = entity.getHeartDiseaseType();
        if (heartDiseaseType != null) {
            stmt.bindString(10, heartDiseaseType);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(11, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(12, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(13, bmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(14, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(15, dbp);
        }
 
        Double waist = entity.getWaist();
        if (waist != null) {
            stmt.bindDouble(16, waist);
        }
 
        Double fbgMmol = entity.getFbgMmol();
        if (fbgMmol != null) {
            stmt.bindDouble(17, fbgMmol);
        }
 
        Double pbgMmol = entity.getPbgMmol();
        if (pbgMmol != null) {
            stmt.bindDouble(18, pbgMmol);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(19, tcho);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(20, tg);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(21, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(22, hdlc);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(23, checkDate.getTime());
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(24, heartRate);
        }
 
        String ecgAbnormResult = entity.getEcgAbnormResult();
        if (ecgAbnormResult != null) {
            stmt.bindString(25, ecgAbnormResult);
        }
 
        String heartCheckResult = entity.getHeartCheckResult();
        if (heartCheckResult != null) {
            stmt.bindString(26, heartCheckResult);
        }
 
        String coronaryArteryResult = entity.getCoronaryArteryResult();
        if (coronaryArteryResult != null) {
            stmt.bindString(27, coronaryArteryResult);
        }
 
        String ecgExerciseResult = entity.getEcgExerciseResult();
        if (ecgExerciseResult != null) {
            stmt.bindString(28, ecgExerciseResult);
        }
 
        String cardiacEnzymesResult = entity.getCardiacEnzymesResult();
        if (cardiacEnzymesResult != null) {
            stmt.bindString(29, cardiacEnzymesResult);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(30, exerciseFreqCode);
        }
 
        String smokingStatusCode = entity.getSmokingStatusCode();
        if (smokingStatusCode != null) {
            stmt.bindString(31, smokingStatusCode);
        }
 
        String drinkingFreqCode = entity.getDrinkingFreqCode();
        if (drinkingFreqCode != null) {
            stmt.bindString(32, drinkingFreqCode);
        }
 
        String selfCareAssessCode = entity.getSelfCareAssessCode();
        if (selfCareAssessCode != null) {
            stmt.bindString(33, selfCareAssessCode);
        }
 
        String hasUseDrugs = entity.getHasUseDrugs();
        if (hasUseDrugs != null) {
            stmt.bindString(34, hasUseDrugs);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(35, drugComplianceCode);
        }
 
        String hasEndManage = entity.getHasEndManage();
        if (hasEndManage != null) {
            stmt.bindString(36, hasEndManage);
        }
 
        java.util.Date endManageDate = entity.getEndManageDate();
        if (endManageDate != null) {
            stmt.bindLong(37, endManageDate.getTime());
        }
 
        String endManageReason = entity.getEndManageReason();
        if (endManageReason != null) {
            stmt.bindString(38, endManageReason);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(39, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(40, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(41, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(42, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(43, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(44, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(45, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(46, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(47, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(48, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(49, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(50, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(51, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(52, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(53, intactRate);
        }
 
        String isAutoBuild = entity.getIsAutoBuild();
        if (isAutoBuild != null) {
            stmt.bindString(54, isAutoBuild);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CoronaryHeartDiseaseInfo readEntity(Cursor cursor, int offset) {
        CoronaryHeartDiseaseInfo entity = new CoronaryHeartDiseaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // coronaryHeartDiseaseInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // manageOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // heartDiseaseInfoNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // manageGroup
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // userCreateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // caseSource
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // confirmDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // confirmOrgName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // heartDiseaseType
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // height
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // weight
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // bmi
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // sbp
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // dbp
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // waist
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // fbgMmol
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // pbgMmol
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // tcho
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // tg
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // ldlc
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // hdlc
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // checkDate
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // heartRate
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ecgAbnormResult
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // heartCheckResult
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // coronaryArteryResult
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ecgExerciseResult
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // cardiacEnzymesResult
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // exerciseFreqCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // smokingStatusCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // drinkingFreqCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // selfCareAssessCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // hasUseDrugs
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // drugComplianceCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // hasEndManage
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // endManageDate
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // endManageReason
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // isCancel
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // createOrgId
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // orgName
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // creatorId
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // creator
            cursor.isNull(offset + 43) ? null : new java.util.Date(cursor.getLong(offset + 43)), // createTime
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // modifiedOrgId
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // modifiedOrgName
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // modifierId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // modifier
            cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)), // modifiedTime
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // jsonDetail
            cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50), // assessmentCount
            cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51), // missingCount
            cursor.isNull(offset + 52) ? null : cursor.getDouble(offset + 52), // intactRate
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53) // isAutoBuild
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoronaryHeartDiseaseInfo entity, int offset) {
        entity.setCoronaryHeartDiseaseInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManageOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeartDiseaseInfoNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManageGroup(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserCreateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setCaseSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConfirmDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setConfirmOrgName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeartDiseaseType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHeight(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setWeight(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setBmi(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setSbp(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDbp(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setWaist(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setFbgMmol(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setPbgMmol(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setTcho(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setTg(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setLdlc(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setHdlc(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setCheckDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setHeartRate(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setEcgAbnormResult(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHeartCheckResult(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCoronaryArteryResult(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEcgExerciseResult(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCardiacEnzymesResult(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setExerciseFreqCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSmokingStatusCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDrinkingFreqCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSelfCareAssessCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setHasUseDrugs(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDrugComplianceCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setHasEndManage(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setEndManageDate(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setEndManageReason(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setIsCancel(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setCreateOrgId(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setOrgName(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCreatorId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCreator(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCreateTime(cursor.isNull(offset + 43) ? null : new java.util.Date(cursor.getLong(offset + 43)));
        entity.setModifiedOrgId(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setModifiedOrgName(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setModifierId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setModifier(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setModifiedTime(cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)));
        entity.setJsonDetail(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setAssessmentCount(cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50));
        entity.setMissingCount(cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51));
        entity.setIntactRate(cursor.isNull(offset + 52) ? null : cursor.getDouble(offset + 52));
        entity.setIsAutoBuild(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CoronaryHeartDiseaseInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CoronaryHeartDiseaseInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
