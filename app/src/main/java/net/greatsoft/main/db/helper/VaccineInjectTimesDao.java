package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.vaccine.VaccineInjectTimes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VACCINE_INJECT_TIMES".
*/
public class VaccineInjectTimesDao extends AbstractDao<VaccineInjectTimes, Void> {

    public static final String TABLENAME = "VACCINE_INJECT_TIMES";

    /**
     * Properties of entity VaccineInjectTimes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VaccineInjectTimesId = new Property(0, String.class, "vaccineInjectTimesId", false, "VACCINE_INJECT_TIMES_ID");
        public final static Property VaccineId = new Property(1, String.class, "vaccineId", false, "VACCINE_ID");
        public final static Property VaccineInjectTimes = new Property(2, Integer.class, "vaccineInjectTimes", false, "VACCINE_INJECT_TIMES");
        public final static Property InjectTimesRemark = new Property(3, String.class, "injectTimesRemark", false, "INJECT_TIMES_REMARK");
        public final static Property MonthsAge = new Property(4, Integer.class, "monthsAge", false, "MONTHS_AGE");
        public final static Property MonthsAgeRemark = new Property(5, String.class, "monthsAgeRemark", false, "MONTHS_AGE_REMARK");
        public final static Property Injectday = new Property(6, Integer.class, "injectday", false, "INJECTDAY");
        public final static Property VaccineType = new Property(7, String.class, "vaccineType", false, "VACCINE_TYPE");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
        public final static Property IsCancel = new Property(9, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(10, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(11, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(12, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(13, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(14, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(15, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(16, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(17, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(18, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(19, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public VaccineInjectTimesDao(DaoConfig config) {
        super(config);
    }
    
    public VaccineInjectTimesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VACCINE_INJECT_TIMES\" (" + //
                "\"VACCINE_INJECT_TIMES_ID\" TEXT," + // 0: vaccineInjectTimesId
                "\"VACCINE_ID\" TEXT," + // 1: vaccineId
                "\"VACCINE_INJECT_TIMES\" INTEGER," + // 2: vaccineInjectTimes
                "\"INJECT_TIMES_REMARK\" TEXT," + // 3: injectTimesRemark
                "\"MONTHS_AGE\" INTEGER," + // 4: monthsAge
                "\"MONTHS_AGE_REMARK\" TEXT," + // 5: monthsAgeRemark
                "\"INJECTDAY\" INTEGER," + // 6: injectday
                "\"VACCINE_TYPE\" TEXT," + // 7: vaccineType
                "\"REMARK\" TEXT," + // 8: remark
                "\"IS_CANCEL\" INTEGER," + // 9: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 10: createOrgId
                "\"ORG_NAME\" TEXT," + // 11: orgName
                "\"CREATOR_ID\" TEXT," + // 12: creatorId
                "\"CREATOR\" TEXT," + // 13: creator
                "\"CREATE_TIME\" INTEGER," + // 14: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 15: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 16: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 17: modifierId
                "\"MODIFIER\" TEXT," + // 18: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 19: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VACCINE_INJECT_TIMES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VaccineInjectTimes entity) {
        stmt.clearBindings();
 
        String vaccineInjectTimesId = entity.getVaccineInjectTimesId();
        if (vaccineInjectTimesId != null) {
            stmt.bindString(1, vaccineInjectTimesId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        Integer vaccineInjectTimes = entity.getVaccineInjectTimes();
        if (vaccineInjectTimes != null) {
            stmt.bindLong(3, vaccineInjectTimes);
        }
 
        String injectTimesRemark = entity.getInjectTimesRemark();
        if (injectTimesRemark != null) {
            stmt.bindString(4, injectTimesRemark);
        }
 
        Integer monthsAge = entity.getMonthsAge();
        if (monthsAge != null) {
            stmt.bindLong(5, monthsAge);
        }
 
        String monthsAgeRemark = entity.getMonthsAgeRemark();
        if (monthsAgeRemark != null) {
            stmt.bindString(6, monthsAgeRemark);
        }
 
        Integer injectday = entity.getInjectday();
        if (injectday != null) {
            stmt.bindLong(7, injectday);
        }
 
        String vaccineType = entity.getVaccineType();
        if (vaccineType != null) {
            stmt.bindString(8, vaccineType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(10, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(11, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(12, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(13, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(14, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(16, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(17, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(18, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(19, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(20, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VaccineInjectTimes entity) {
        stmt.clearBindings();
 
        String vaccineInjectTimesId = entity.getVaccineInjectTimesId();
        if (vaccineInjectTimesId != null) {
            stmt.bindString(1, vaccineInjectTimesId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        Integer vaccineInjectTimes = entity.getVaccineInjectTimes();
        if (vaccineInjectTimes != null) {
            stmt.bindLong(3, vaccineInjectTimes);
        }
 
        String injectTimesRemark = entity.getInjectTimesRemark();
        if (injectTimesRemark != null) {
            stmt.bindString(4, injectTimesRemark);
        }
 
        Integer monthsAge = entity.getMonthsAge();
        if (monthsAge != null) {
            stmt.bindLong(5, monthsAge);
        }
 
        String monthsAgeRemark = entity.getMonthsAgeRemark();
        if (monthsAgeRemark != null) {
            stmt.bindString(6, monthsAgeRemark);
        }
 
        Integer injectday = entity.getInjectday();
        if (injectday != null) {
            stmt.bindLong(7, injectday);
        }
 
        String vaccineType = entity.getVaccineType();
        if (vaccineType != null) {
            stmt.bindString(8, vaccineType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(10, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(11, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(12, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(13, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(14, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(16, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(17, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(18, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(19, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(20, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VaccineInjectTimes readEntity(Cursor cursor, int offset) {
        VaccineInjectTimes entity = new VaccineInjectTimes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vaccineInjectTimesId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vaccineId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // vaccineInjectTimes
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // injectTimesRemark
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // monthsAge
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // monthsAgeRemark
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // injectday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vaccineType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isCancel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createOrgId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orgName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // creatorId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // creator
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // createTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modifiedOrgId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modifiedOrgName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // modifierId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // modifier
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VaccineInjectTimes entity, int offset) {
        entity.setVaccineInjectTimesId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVaccineId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVaccineInjectTimes(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setInjectTimesRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMonthsAge(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMonthsAgeRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInjectday(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setVaccineType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsCancel(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreateOrgId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrgName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreatorId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreator(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setModifiedOrgId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifiedOrgName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setModifierId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setModifier(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setModifiedTime(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VaccineInjectTimes entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VaccineInjectTimes entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
