package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonPastHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_PAST_HISTORY".
*/
public class PersonPastHistoryDao extends AbstractDao<PersonPastHistory, Void> {

    public static final String TABLENAME = "PERSON_PAST_HISTORY";

    /**
     * Properties of entity PersonPastHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonInfoId = new Property(0, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property PersonPastHistoryId = new Property(1, String.class, "personPastHistoryId", false, "PERSON_PAST_HISTORY_ID");
        public final static Property OrderNo = new Property(2, Integer.class, "orderNo", false, "ORDER_NO");
        public final static Property HistoryType = new Property(3, String.class, "historyType", false, "HISTORY_TYPE");
        public final static Property ChoiceStatus = new Property(4, String.class, "choiceStatus", false, "CHOICE_STATUS");
        public final static Property HistoryName = new Property(5, String.class, "historyName", false, "HISTORY_NAME");
        public final static Property ConfirmDate = new Property(6, java.util.Date.class, "confirmDate", false, "CONFIRM_DATE");
    };


    public PersonPastHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public PersonPastHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_PAST_HISTORY\" (" + //
                "\"PERSON_INFO_ID\" TEXT," + // 0: personInfoId
                "\"PERSON_PAST_HISTORY_ID\" TEXT," + // 1: personPastHistoryId
                "\"ORDER_NO\" INTEGER," + // 2: orderNo
                "\"HISTORY_TYPE\" TEXT," + // 3: historyType
                "\"CHOICE_STATUS\" TEXT," + // 4: choiceStatus
                "\"HISTORY_NAME\" TEXT," + // 5: historyName
                "\"CONFIRM_DATE\" INTEGER);"); // 6: confirmDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_PAST_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonPastHistory entity) {
        stmt.clearBindings();
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(1, personInfoId);
        }
 
        String personPastHistoryId = entity.getPersonPastHistoryId();
        if (personPastHistoryId != null) {
            stmt.bindString(2, personPastHistoryId);
        }
 
        Integer orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindLong(3, orderNo);
        }
 
        String historyType = entity.getHistoryType();
        if (historyType != null) {
            stmt.bindString(4, historyType);
        }
 
        String choiceStatus = entity.getChoiceStatus();
        if (choiceStatus != null) {
            stmt.bindString(5, choiceStatus);
        }
 
        String historyName = entity.getHistoryName();
        if (historyName != null) {
            stmt.bindString(6, historyName);
        }
 
        java.util.Date confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(7, confirmDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonPastHistory entity) {
        stmt.clearBindings();
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(1, personInfoId);
        }
 
        String personPastHistoryId = entity.getPersonPastHistoryId();
        if (personPastHistoryId != null) {
            stmt.bindString(2, personPastHistoryId);
        }
 
        Integer orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindLong(3, orderNo);
        }
 
        String historyType = entity.getHistoryType();
        if (historyType != null) {
            stmt.bindString(4, historyType);
        }
 
        String choiceStatus = entity.getChoiceStatus();
        if (choiceStatus != null) {
            stmt.bindString(5, choiceStatus);
        }
 
        String historyName = entity.getHistoryName();
        if (historyName != null) {
            stmt.bindString(6, historyName);
        }
 
        java.util.Date confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(7, confirmDate.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonPastHistory readEntity(Cursor cursor, int offset) {
        PersonPastHistory entity = new PersonPastHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personPastHistoryId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // orderNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // historyType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // choiceStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // historyName
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // confirmDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonPastHistory entity, int offset) {
        entity.setPersonInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonPastHistoryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderNo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHistoryType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChoiceStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHistoryName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConfirmDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonPastHistory entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonPastHistory entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
