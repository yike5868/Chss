package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildPerinatalDeath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_PERINATAL_DEATH".
*/
public class ChildPerinatalDeathDao extends AbstractDao<ChildPerinatalDeath, Void> {

    public static final String TABLENAME = "CHILD_PERINATAL_DEATH";

    /**
     * Properties of entity ChildPerinatalDeath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildPerinatalDeathId = new Property(0, String.class, "childPerinatalDeathId", false, "CHILD_PERINATAL_DEATH_ID");
        public final static Property ChildPerinatalDeathNo = new Property(1, String.class, "childPerinatalDeathNo", false, "CHILD_PERINATAL_DEATH_NO");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ResiCaseNo = new Property(3, String.class, "resiCaseNo", false, "RESI_CASE_NO");
        public final static Property HospitalCode = new Property(4, String.class, "hospitalCode", false, "HOSPITAL_CODE");
        public final static Property PresentAddress = new Property(5, String.class, "presentAddress", false, "PRESENT_ADDRESS");
        public final static Property ProvinceHouseholdFlag = new Property(6, String.class, "provinceHouseholdFlag", false, "PROVINCE_HOUSEHOLD_FLAG");
        public final static Property PlanType = new Property(7, String.class, "planType", false, "PLAN_TYPE");
        public final static Property MotherName = new Property(8, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property MotherAge = new Property(9, Integer.class, "motherAge", false, "MOTHER_AGE");
        public final static Property MotherEducationCode = new Property(10, String.class, "motherEducationCode", false, "MOTHER_EDUCATION_CODE");
        public final static Property MotherOccupCode = new Property(11, String.class, "motherOccupCode", false, "MOTHER_OCCUP_CODE");
        public final static Property FatherName = new Property(12, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property FatherEducationCode = new Property(13, String.class, "fatherEducationCode", false, "FATHER_EDUCATION_CODE");
        public final static Property FatherOccupCode = new Property(14, String.class, "fatherOccupCode", false, "FATHER_OCCUP_CODE");
        public final static Property FamilyIncome = new Property(15, String.class, "familyIncome", false, "FAMILY_INCOME");
        public final static Property PermanentTypeCode = new Property(16, String.class, "permanentTypeCode", false, "PERMANENT_TYPE_CODE");
        public final static Property Gravidity = new Property(17, Integer.class, "gravidity", false, "GRAVIDITY");
        public final static Property Parity = new Property(18, Integer.class, "parity", false, "PARITY");
        public final static Property SpontaneousAbortion = new Property(19, Integer.class, "spontaneousAbortion", false, "SPONTANEOUS_ABORTION");
        public final static Property InducedAbortion = new Property(20, Integer.class, "inducedAbortion", false, "INDUCED_ABORTION");
        public final static Property MedicalAbortion = new Property(21, Integer.class, "medicalAbortion", false, "MEDICAL_ABORTION");
        public final static Property LabourInduction = new Property(22, Integer.class, "labourInduction", false, "LABOUR_INDUCTION");
        public final static Property DeathFetus = new Property(23, Integer.class, "deathFetus", false, "DEATH_FETUS");
        public final static Property DeathDelivery = new Property(24, Integer.class, "deathDelivery", false, "DEATH_DELIVERY");
        public final static Property NewbornDeath = new Property(25, Integer.class, "newbornDeath", false, "NEWBORN_DEATH");
        public final static Property LiveBirth = new Property(26, Integer.class, "liveBirth", false, "LIVE_BIRTH");
        public final static Property PregnancyWeek = new Property(27, Integer.class, "pregnancyWeek", false, "PREGNANCY_WEEK");
        public final static Property EarlyPregnancyExam = new Property(28, Integer.class, "earlyPregnancyExam", false, "EARLY_PREGNANCY_EXAM");
        public final static Property MidPregnancyExam = new Property(29, Integer.class, "midPregnancyExam", false, "MID_PREGNANCY_EXAM");
        public final static Property LatePregnancyExam = new Property(30, Integer.class, "latePregnancyExam", false, "LATE_PREGNANCY_EXAM");
        public final static Property PregnancyHealth = new Property(31, String.class, "pregnancyHealth", false, "PREGNANCY_HEALTH");
        public final static Property PregnancyDrug = new Property(32, String.class, "pregnancyDrug", false, "PREGNANCY_DRUG");
        public final static Property PregnancyDrugName = new Property(33, String.class, "pregnancyDrugName", false, "PREGNANCY_DRUG_NAME");
        public final static Property Detrimental = new Property(34, String.class, "detrimental", false, "DETRIMENTAL");
        public final static Property DetrimentalName = new Property(35, String.class, "detrimentalName", false, "DETRIMENTAL_NAME");
        public final static Property IntrauterineInfection = new Property(36, String.class, "intrauterineInfection", false, "INTRAUTERINE_INFECTION");
        public final static Property PregnancyComplicationCode = new Property(37, String.class, "pregnancyComplicationCode", false, "PREGNANCY_COMPLICATION_CODE");
        public final static Property Preeclampsia = new Property(38, String.class, "preeclampsia", false, "PREECLAMPSIA");
        public final static Property Iugr = new Property(39, String.class, "iugr", false, "IUGR");
        public final static Property Hydramnion = new Property(40, String.class, "hydramnion", false, "HYDRAMNION");
        public final static Property Hypamnion = new Property(41, String.class, "hypamnion", false, "HYPAMNION");
        public final static Property Hemorrhage = new Property(42, String.class, "hemorrhage", false, "HEMORRHAGE");
        public final static Property PregnancyCompliCode = new Property(43, String.class, "pregnancyCompliCode", false, "PREGNANCY_COMPLI_CODE");
        public final static Property Cardiopathy = new Property(44, String.class, "cardiopathy", false, "CARDIOPATHY");
        public final static Property Hepatopathy = new Property(45, String.class, "hepatopathy", false, "HEPATOPATHY");
        public final static Property Hyperthyrodism = new Property(46, String.class, "hyperthyrodism", false, "HYPERTHYRODISM");
        public final static Property Anemia = new Property(47, String.class, "anemia", false, "ANEMIA");
        public final static Property UrinarySystem = new Property(48, String.class, "urinarySystem", false, "URINARY_SYSTEM");
        public final static Property TraumaHistoryCode = new Property(49, String.class, "traumaHistoryCode", false, "TRAUMA_HISTORY_CODE");
        public final static Property HighRiskPregnancy = new Property(50, String.class, "highRiskPregnancy", false, "HIGH_RISK_PREGNANCY");
        public final static Property HighRiskRecord = new Property(51, String.class, "highRiskRecord", false, "HIGH_RISK_RECORD");
        public final static Property LocalDelivery = new Property(52, String.class, "localDelivery", false, "LOCAL_DELIVERY");
        public final static Property DeliveryHospital = new Property(53, String.class, "deliveryHospital", false, "DELIVERY_HOSPITAL");
        public final static Property DeliveryHospitalOther = new Property(54, String.class, "deliveryHospitalOther", false, "DELIVERY_HOSPITAL_OTHER");
        public final static Property DeliveryWay = new Property(55, String.class, "deliveryWay", false, "DELIVERY_WAY");
        public final static Property NoResiDelivery = new Property(56, String.class, "noResiDelivery", false, "NO_RESI_DELIVERY");
        public final static Property Midwife = new Property(57, String.class, "midwife", false, "MIDWIFE");
        public final static Property DeliveryTime = new Property(58, java.util.Date.class, "deliveryTime", false, "DELIVERY_TIME");
        public final static Property DeliveryPregnancyWeek = new Property(59, Integer.class, "deliveryPregnancyWeek", false, "DELIVERY_PREGNANCY_WEEK");
        public final static Property FetusTypeCode = new Property(60, String.class, "fetusTypeCode", false, "FETUS_TYPE_CODE");
        public final static Property SexCode = new Property(61, String.class, "sexCode", false, "SEX_CODE");
        public final static Property DeliverySituation = new Property(62, String.class, "deliverySituation", false, "DELIVERY_SITUATION");
        public final static Property DeliveryHydramnion = new Property(63, String.class, "deliveryHydramnion", false, "DELIVERY_HYDRAMNION");
        public final static Property DeliveryHypamnion = new Property(64, String.class, "deliveryHypamnion", false, "DELIVERY_HYPAMNION");
        public final static Property MembranePrematureRupture = new Property(65, String.class, "membranePrematureRupture", false, "MEMBRANE_PREMATURE_RUPTURE");
        public final static Property ProlongedLabor = new Property(66, String.class, "prolongedLabor", false, "PROLONGED_LABOR");
        public final static Property UmbilialCordAbnormality = new Property(67, String.class, "umbilialCordAbnormality", false, "UMBILIAL_CORD_ABNORMALITY");
        public final static Property PlacentalAbnormality = new Property(68, String.class, "placentalAbnormality", false, "PLACENTAL_ABNORMALITY");
        public final static Property FetalPositionAbnormality = new Property(69, String.class, "fetalPositionAbnormality", false, "FETAL_POSITION_ABNORMALITY");
        public final static Property SeverePih = new Property(70, String.class, "severePih", false, "SEVERE_PIH");
        public final static Property IntrauterineDistress = new Property(71, String.class, "intrauterineDistress", false, "INTRAUTERINE_DISTRESS");
        public final static Property Asphyxia = new Property(72, String.class, "asphyxia", false, "ASPHYXIA");
        public final static Property Deformity = new Property(73, String.class, "deformity", false, "DEFORMITY");
        public final static Property DeformityName = new Property(74, String.class, "deformityName", false, "DEFORMITY_NAME");
        public final static Property BirthWeight = new Property(75, Integer.class, "birthWeight", false, "BIRTH_WEIGHT");
        public final static Property FetusStatus = new Property(76, String.class, "fetusStatus", false, "FETUS_STATUS");
        public final static Property DeathPlaceType = new Property(77, String.class, "deathPlaceType", false, "DEATH_PLACE_TYPE");
        public final static Property DeathDiagnosis = new Property(78, String.class, "deathDiagnosis", false, "DEATH_DIAGNOSIS");
        public final static Property DiagnosisBasis = new Property(79, String.class, "diagnosisBasis", false, "DIAGNOSIS_BASIS");
        public final static Property AuditSuggest = new Property(80, String.class, "auditSuggest", false, "AUDIT_SUGGEST");
        public final static Property DeathSummary = new Property(81, String.class, "deathSummary", false, "DEATH_SUMMARY");
        public final static Property FillOperatorName = new Property(82, String.class, "fillOperatorName", false, "FILL_OPERATOR_NAME");
        public final static Property CreateDate = new Property(83, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property DeathDtime = new Property(84, java.util.Date.class, "deathDtime", false, "DEATH_DTIME");
        public final static Property IsCancel = new Property(85, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(86, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(87, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(88, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(89, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(90, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(91, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(92, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(93, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(94, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(95, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildPerinatalDeathDao(DaoConfig config) {
        super(config);
    }
    
    public ChildPerinatalDeathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_PERINATAL_DEATH\" (" + //
                "\"CHILD_PERINATAL_DEATH_ID\" TEXT," + // 0: childPerinatalDeathId
                "\"CHILD_PERINATAL_DEATH_NO\" TEXT," + // 1: childPerinatalDeathNo
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"RESI_CASE_NO\" TEXT," + // 3: resiCaseNo
                "\"HOSPITAL_CODE\" TEXT," + // 4: hospitalCode
                "\"PRESENT_ADDRESS\" TEXT," + // 5: presentAddress
                "\"PROVINCE_HOUSEHOLD_FLAG\" TEXT," + // 6: provinceHouseholdFlag
                "\"PLAN_TYPE\" TEXT," + // 7: planType
                "\"MOTHER_NAME\" TEXT," + // 8: motherName
                "\"MOTHER_AGE\" INTEGER," + // 9: motherAge
                "\"MOTHER_EDUCATION_CODE\" TEXT," + // 10: motherEducationCode
                "\"MOTHER_OCCUP_CODE\" TEXT," + // 11: motherOccupCode
                "\"FATHER_NAME\" TEXT," + // 12: fatherName
                "\"FATHER_EDUCATION_CODE\" TEXT," + // 13: fatherEducationCode
                "\"FATHER_OCCUP_CODE\" TEXT," + // 14: fatherOccupCode
                "\"FAMILY_INCOME\" TEXT," + // 15: familyIncome
                "\"PERMANENT_TYPE_CODE\" TEXT," + // 16: permanentTypeCode
                "\"GRAVIDITY\" INTEGER," + // 17: gravidity
                "\"PARITY\" INTEGER," + // 18: parity
                "\"SPONTANEOUS_ABORTION\" INTEGER," + // 19: spontaneousAbortion
                "\"INDUCED_ABORTION\" INTEGER," + // 20: inducedAbortion
                "\"MEDICAL_ABORTION\" INTEGER," + // 21: medicalAbortion
                "\"LABOUR_INDUCTION\" INTEGER," + // 22: labourInduction
                "\"DEATH_FETUS\" INTEGER," + // 23: deathFetus
                "\"DEATH_DELIVERY\" INTEGER," + // 24: deathDelivery
                "\"NEWBORN_DEATH\" INTEGER," + // 25: newbornDeath
                "\"LIVE_BIRTH\" INTEGER," + // 26: liveBirth
                "\"PREGNANCY_WEEK\" INTEGER," + // 27: pregnancyWeek
                "\"EARLY_PREGNANCY_EXAM\" INTEGER," + // 28: earlyPregnancyExam
                "\"MID_PREGNANCY_EXAM\" INTEGER," + // 29: midPregnancyExam
                "\"LATE_PREGNANCY_EXAM\" INTEGER," + // 30: latePregnancyExam
                "\"PREGNANCY_HEALTH\" TEXT," + // 31: pregnancyHealth
                "\"PREGNANCY_DRUG\" TEXT," + // 32: pregnancyDrug
                "\"PREGNANCY_DRUG_NAME\" TEXT," + // 33: pregnancyDrugName
                "\"DETRIMENTAL\" TEXT," + // 34: detrimental
                "\"DETRIMENTAL_NAME\" TEXT," + // 35: detrimentalName
                "\"INTRAUTERINE_INFECTION\" TEXT," + // 36: intrauterineInfection
                "\"PREGNANCY_COMPLICATION_CODE\" TEXT," + // 37: pregnancyComplicationCode
                "\"PREECLAMPSIA\" TEXT," + // 38: preeclampsia
                "\"IUGR\" TEXT," + // 39: iugr
                "\"HYDRAMNION\" TEXT," + // 40: hydramnion
                "\"HYPAMNION\" TEXT," + // 41: hypamnion
                "\"HEMORRHAGE\" TEXT," + // 42: hemorrhage
                "\"PREGNANCY_COMPLI_CODE\" TEXT," + // 43: pregnancyCompliCode
                "\"CARDIOPATHY\" TEXT," + // 44: cardiopathy
                "\"HEPATOPATHY\" TEXT," + // 45: hepatopathy
                "\"HYPERTHYRODISM\" TEXT," + // 46: hyperthyrodism
                "\"ANEMIA\" TEXT," + // 47: anemia
                "\"URINARY_SYSTEM\" TEXT," + // 48: urinarySystem
                "\"TRAUMA_HISTORY_CODE\" TEXT," + // 49: traumaHistoryCode
                "\"HIGH_RISK_PREGNANCY\" TEXT," + // 50: highRiskPregnancy
                "\"HIGH_RISK_RECORD\" TEXT," + // 51: highRiskRecord
                "\"LOCAL_DELIVERY\" TEXT," + // 52: localDelivery
                "\"DELIVERY_HOSPITAL\" TEXT," + // 53: deliveryHospital
                "\"DELIVERY_HOSPITAL_OTHER\" TEXT," + // 54: deliveryHospitalOther
                "\"DELIVERY_WAY\" TEXT," + // 55: deliveryWay
                "\"NO_RESI_DELIVERY\" TEXT," + // 56: noResiDelivery
                "\"MIDWIFE\" TEXT," + // 57: midwife
                "\"DELIVERY_TIME\" INTEGER," + // 58: deliveryTime
                "\"DELIVERY_PREGNANCY_WEEK\" INTEGER," + // 59: deliveryPregnancyWeek
                "\"FETUS_TYPE_CODE\" TEXT," + // 60: fetusTypeCode
                "\"SEX_CODE\" TEXT," + // 61: sexCode
                "\"DELIVERY_SITUATION\" TEXT," + // 62: deliverySituation
                "\"DELIVERY_HYDRAMNION\" TEXT," + // 63: deliveryHydramnion
                "\"DELIVERY_HYPAMNION\" TEXT," + // 64: deliveryHypamnion
                "\"MEMBRANE_PREMATURE_RUPTURE\" TEXT," + // 65: membranePrematureRupture
                "\"PROLONGED_LABOR\" TEXT," + // 66: prolongedLabor
                "\"UMBILIAL_CORD_ABNORMALITY\" TEXT," + // 67: umbilialCordAbnormality
                "\"PLACENTAL_ABNORMALITY\" TEXT," + // 68: placentalAbnormality
                "\"FETAL_POSITION_ABNORMALITY\" TEXT," + // 69: fetalPositionAbnormality
                "\"SEVERE_PIH\" TEXT," + // 70: severePih
                "\"INTRAUTERINE_DISTRESS\" TEXT," + // 71: intrauterineDistress
                "\"ASPHYXIA\" TEXT," + // 72: asphyxia
                "\"DEFORMITY\" TEXT," + // 73: deformity
                "\"DEFORMITY_NAME\" TEXT," + // 74: deformityName
                "\"BIRTH_WEIGHT\" INTEGER," + // 75: birthWeight
                "\"FETUS_STATUS\" TEXT," + // 76: fetusStatus
                "\"DEATH_PLACE_TYPE\" TEXT," + // 77: deathPlaceType
                "\"DEATH_DIAGNOSIS\" TEXT," + // 78: deathDiagnosis
                "\"DIAGNOSIS_BASIS\" TEXT," + // 79: diagnosisBasis
                "\"AUDIT_SUGGEST\" TEXT," + // 80: auditSuggest
                "\"DEATH_SUMMARY\" TEXT," + // 81: deathSummary
                "\"FILL_OPERATOR_NAME\" TEXT," + // 82: fillOperatorName
                "\"CREATE_DATE\" INTEGER," + // 83: createDate
                "\"DEATH_DTIME\" INTEGER," + // 84: deathDtime
                "\"IS_CANCEL\" INTEGER," + // 85: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 86: createOrgId
                "\"ORG_NAME\" TEXT," + // 87: orgName
                "\"CREATOR_ID\" TEXT," + // 88: creatorId
                "\"CREATOR\" TEXT," + // 89: creator
                "\"CREATE_TIME\" INTEGER," + // 90: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 91: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 92: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 93: modifierId
                "\"MODIFIER\" TEXT," + // 94: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 95: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_PERINATAL_DEATH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildPerinatalDeath entity) {
        stmt.clearBindings();
 
        String childPerinatalDeathId = entity.getChildPerinatalDeathId();
        if (childPerinatalDeathId != null) {
            stmt.bindString(1, childPerinatalDeathId);
        }
 
        String childPerinatalDeathNo = entity.getChildPerinatalDeathNo();
        if (childPerinatalDeathNo != null) {
            stmt.bindString(2, childPerinatalDeathNo);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String resiCaseNo = entity.getResiCaseNo();
        if (resiCaseNo != null) {
            stmt.bindString(4, resiCaseNo);
        }
 
        String hospitalCode = entity.getHospitalCode();
        if (hospitalCode != null) {
            stmt.bindString(5, hospitalCode);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(6, presentAddress);
        }
 
        String provinceHouseholdFlag = entity.getProvinceHouseholdFlag();
        if (provinceHouseholdFlag != null) {
            stmt.bindString(7, provinceHouseholdFlag);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(8, planType);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(9, motherName);
        }
 
        Integer motherAge = entity.getMotherAge();
        if (motherAge != null) {
            stmt.bindLong(10, motherAge);
        }
 
        String motherEducationCode = entity.getMotherEducationCode();
        if (motherEducationCode != null) {
            stmt.bindString(11, motherEducationCode);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(12, motherOccupCode);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(13, fatherName);
        }
 
        String fatherEducationCode = entity.getFatherEducationCode();
        if (fatherEducationCode != null) {
            stmt.bindString(14, fatherEducationCode);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(15, fatherOccupCode);
        }
 
        String familyIncome = entity.getFamilyIncome();
        if (familyIncome != null) {
            stmt.bindString(16, familyIncome);
        }
 
        String permanentTypeCode = entity.getPermanentTypeCode();
        if (permanentTypeCode != null) {
            stmt.bindString(17, permanentTypeCode);
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(18, gravidity);
        }
 
        Integer parity = entity.getParity();
        if (parity != null) {
            stmt.bindLong(19, parity);
        }
 
        Integer spontaneousAbortion = entity.getSpontaneousAbortion();
        if (spontaneousAbortion != null) {
            stmt.bindLong(20, spontaneousAbortion);
        }
 
        Integer inducedAbortion = entity.getInducedAbortion();
        if (inducedAbortion != null) {
            stmt.bindLong(21, inducedAbortion);
        }
 
        Integer medicalAbortion = entity.getMedicalAbortion();
        if (medicalAbortion != null) {
            stmt.bindLong(22, medicalAbortion);
        }
 
        Integer labourInduction = entity.getLabourInduction();
        if (labourInduction != null) {
            stmt.bindLong(23, labourInduction);
        }
 
        Integer deathFetus = entity.getDeathFetus();
        if (deathFetus != null) {
            stmt.bindLong(24, deathFetus);
        }
 
        Integer deathDelivery = entity.getDeathDelivery();
        if (deathDelivery != null) {
            stmt.bindLong(25, deathDelivery);
        }
 
        Integer newbornDeath = entity.getNewbornDeath();
        if (newbornDeath != null) {
            stmt.bindLong(26, newbornDeath);
        }
 
        Integer liveBirth = entity.getLiveBirth();
        if (liveBirth != null) {
            stmt.bindLong(27, liveBirth);
        }
 
        Integer pregnancyWeek = entity.getPregnancyWeek();
        if (pregnancyWeek != null) {
            stmt.bindLong(28, pregnancyWeek);
        }
 
        Integer earlyPregnancyExam = entity.getEarlyPregnancyExam();
        if (earlyPregnancyExam != null) {
            stmt.bindLong(29, earlyPregnancyExam);
        }
 
        Integer midPregnancyExam = entity.getMidPregnancyExam();
        if (midPregnancyExam != null) {
            stmt.bindLong(30, midPregnancyExam);
        }
 
        Integer latePregnancyExam = entity.getLatePregnancyExam();
        if (latePregnancyExam != null) {
            stmt.bindLong(31, latePregnancyExam);
        }
 
        String pregnancyHealth = entity.getPregnancyHealth();
        if (pregnancyHealth != null) {
            stmt.bindString(32, pregnancyHealth);
        }
 
        String pregnancyDrug = entity.getPregnancyDrug();
        if (pregnancyDrug != null) {
            stmt.bindString(33, pregnancyDrug);
        }
 
        String pregnancyDrugName = entity.getPregnancyDrugName();
        if (pregnancyDrugName != null) {
            stmt.bindString(34, pregnancyDrugName);
        }
 
        String detrimental = entity.getDetrimental();
        if (detrimental != null) {
            stmt.bindString(35, detrimental);
        }
 
        String detrimentalName = entity.getDetrimentalName();
        if (detrimentalName != null) {
            stmt.bindString(36, detrimentalName);
        }
 
        String intrauterineInfection = entity.getIntrauterineInfection();
        if (intrauterineInfection != null) {
            stmt.bindString(37, intrauterineInfection);
        }
 
        String pregnancyComplicationCode = entity.getPregnancyComplicationCode();
        if (pregnancyComplicationCode != null) {
            stmt.bindString(38, pregnancyComplicationCode);
        }
 
        String preeclampsia = entity.getPreeclampsia();
        if (preeclampsia != null) {
            stmt.bindString(39, preeclampsia);
        }
 
        String iugr = entity.getIugr();
        if (iugr != null) {
            stmt.bindString(40, iugr);
        }
 
        String hydramnion = entity.getHydramnion();
        if (hydramnion != null) {
            stmt.bindString(41, hydramnion);
        }
 
        String hypamnion = entity.getHypamnion();
        if (hypamnion != null) {
            stmt.bindString(42, hypamnion);
        }
 
        String hemorrhage = entity.getHemorrhage();
        if (hemorrhage != null) {
            stmt.bindString(43, hemorrhage);
        }
 
        String pregnancyCompliCode = entity.getPregnancyCompliCode();
        if (pregnancyCompliCode != null) {
            stmt.bindString(44, pregnancyCompliCode);
        }
 
        String cardiopathy = entity.getCardiopathy();
        if (cardiopathy != null) {
            stmt.bindString(45, cardiopathy);
        }
 
        String hepatopathy = entity.getHepatopathy();
        if (hepatopathy != null) {
            stmt.bindString(46, hepatopathy);
        }
 
        String hyperthyrodism = entity.getHyperthyrodism();
        if (hyperthyrodism != null) {
            stmt.bindString(47, hyperthyrodism);
        }
 
        String anemia = entity.getAnemia();
        if (anemia != null) {
            stmt.bindString(48, anemia);
        }
 
        String urinarySystem = entity.getUrinarySystem();
        if (urinarySystem != null) {
            stmt.bindString(49, urinarySystem);
        }
 
        String traumaHistoryCode = entity.getTraumaHistoryCode();
        if (traumaHistoryCode != null) {
            stmt.bindString(50, traumaHistoryCode);
        }
 
        String highRiskPregnancy = entity.getHighRiskPregnancy();
        if (highRiskPregnancy != null) {
            stmt.bindString(51, highRiskPregnancy);
        }
 
        String highRiskRecord = entity.getHighRiskRecord();
        if (highRiskRecord != null) {
            stmt.bindString(52, highRiskRecord);
        }
 
        String localDelivery = entity.getLocalDelivery();
        if (localDelivery != null) {
            stmt.bindString(53, localDelivery);
        }
 
        String deliveryHospital = entity.getDeliveryHospital();
        if (deliveryHospital != null) {
            stmt.bindString(54, deliveryHospital);
        }
 
        String deliveryHospitalOther = entity.getDeliveryHospitalOther();
        if (deliveryHospitalOther != null) {
            stmt.bindString(55, deliveryHospitalOther);
        }
 
        String deliveryWay = entity.getDeliveryWay();
        if (deliveryWay != null) {
            stmt.bindString(56, deliveryWay);
        }
 
        String noResiDelivery = entity.getNoResiDelivery();
        if (noResiDelivery != null) {
            stmt.bindString(57, noResiDelivery);
        }
 
        String midwife = entity.getMidwife();
        if (midwife != null) {
            stmt.bindString(58, midwife);
        }
 
        java.util.Date deliveryTime = entity.getDeliveryTime();
        if (deliveryTime != null) {
            stmt.bindLong(59, deliveryTime.getTime());
        }
 
        Integer deliveryPregnancyWeek = entity.getDeliveryPregnancyWeek();
        if (deliveryPregnancyWeek != null) {
            stmt.bindLong(60, deliveryPregnancyWeek);
        }
 
        String fetusTypeCode = entity.getFetusTypeCode();
        if (fetusTypeCode != null) {
            stmt.bindString(61, fetusTypeCode);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(62, sexCode);
        }
 
        String deliverySituation = entity.getDeliverySituation();
        if (deliverySituation != null) {
            stmt.bindString(63, deliverySituation);
        }
 
        String deliveryHydramnion = entity.getDeliveryHydramnion();
        if (deliveryHydramnion != null) {
            stmt.bindString(64, deliveryHydramnion);
        }
 
        String deliveryHypamnion = entity.getDeliveryHypamnion();
        if (deliveryHypamnion != null) {
            stmt.bindString(65, deliveryHypamnion);
        }
 
        String membranePrematureRupture = entity.getMembranePrematureRupture();
        if (membranePrematureRupture != null) {
            stmt.bindString(66, membranePrematureRupture);
        }
 
        String prolongedLabor = entity.getProlongedLabor();
        if (prolongedLabor != null) {
            stmt.bindString(67, prolongedLabor);
        }
 
        String umbilialCordAbnormality = entity.getUmbilialCordAbnormality();
        if (umbilialCordAbnormality != null) {
            stmt.bindString(68, umbilialCordAbnormality);
        }
 
        String placentalAbnormality = entity.getPlacentalAbnormality();
        if (placentalAbnormality != null) {
            stmt.bindString(69, placentalAbnormality);
        }
 
        String fetalPositionAbnormality = entity.getFetalPositionAbnormality();
        if (fetalPositionAbnormality != null) {
            stmt.bindString(70, fetalPositionAbnormality);
        }
 
        String severePih = entity.getSeverePih();
        if (severePih != null) {
            stmt.bindString(71, severePih);
        }
 
        String intrauterineDistress = entity.getIntrauterineDistress();
        if (intrauterineDistress != null) {
            stmt.bindString(72, intrauterineDistress);
        }
 
        String asphyxia = entity.getAsphyxia();
        if (asphyxia != null) {
            stmt.bindString(73, asphyxia);
        }
 
        String deformity = entity.getDeformity();
        if (deformity != null) {
            stmt.bindString(74, deformity);
        }
 
        String deformityName = entity.getDeformityName();
        if (deformityName != null) {
            stmt.bindString(75, deformityName);
        }
 
        Integer birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindLong(76, birthWeight);
        }
 
        String fetusStatus = entity.getFetusStatus();
        if (fetusStatus != null) {
            stmt.bindString(77, fetusStatus);
        }
 
        String deathPlaceType = entity.getDeathPlaceType();
        if (deathPlaceType != null) {
            stmt.bindString(78, deathPlaceType);
        }
 
        String deathDiagnosis = entity.getDeathDiagnosis();
        if (deathDiagnosis != null) {
            stmt.bindString(79, deathDiagnosis);
        }
 
        String diagnosisBasis = entity.getDiagnosisBasis();
        if (diagnosisBasis != null) {
            stmt.bindString(80, diagnosisBasis);
        }
 
        String auditSuggest = entity.getAuditSuggest();
        if (auditSuggest != null) {
            stmt.bindString(81, auditSuggest);
        }
 
        String deathSummary = entity.getDeathSummary();
        if (deathSummary != null) {
            stmt.bindString(82, deathSummary);
        }
 
        String fillOperatorName = entity.getFillOperatorName();
        if (fillOperatorName != null) {
            stmt.bindString(83, fillOperatorName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(84, createDate.getTime());
        }
 
        java.util.Date deathDtime = entity.getDeathDtime();
        if (deathDtime != null) {
            stmt.bindLong(85, deathDtime.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(86, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(87, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(88, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(89, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(90, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(91, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(92, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(93, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(94, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(95, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(96, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildPerinatalDeath entity) {
        stmt.clearBindings();
 
        String childPerinatalDeathId = entity.getChildPerinatalDeathId();
        if (childPerinatalDeathId != null) {
            stmt.bindString(1, childPerinatalDeathId);
        }
 
        String childPerinatalDeathNo = entity.getChildPerinatalDeathNo();
        if (childPerinatalDeathNo != null) {
            stmt.bindString(2, childPerinatalDeathNo);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String resiCaseNo = entity.getResiCaseNo();
        if (resiCaseNo != null) {
            stmt.bindString(4, resiCaseNo);
        }
 
        String hospitalCode = entity.getHospitalCode();
        if (hospitalCode != null) {
            stmt.bindString(5, hospitalCode);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(6, presentAddress);
        }
 
        String provinceHouseholdFlag = entity.getProvinceHouseholdFlag();
        if (provinceHouseholdFlag != null) {
            stmt.bindString(7, provinceHouseholdFlag);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(8, planType);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(9, motherName);
        }
 
        Integer motherAge = entity.getMotherAge();
        if (motherAge != null) {
            stmt.bindLong(10, motherAge);
        }
 
        String motherEducationCode = entity.getMotherEducationCode();
        if (motherEducationCode != null) {
            stmt.bindString(11, motherEducationCode);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(12, motherOccupCode);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(13, fatherName);
        }
 
        String fatherEducationCode = entity.getFatherEducationCode();
        if (fatherEducationCode != null) {
            stmt.bindString(14, fatherEducationCode);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(15, fatherOccupCode);
        }
 
        String familyIncome = entity.getFamilyIncome();
        if (familyIncome != null) {
            stmt.bindString(16, familyIncome);
        }
 
        String permanentTypeCode = entity.getPermanentTypeCode();
        if (permanentTypeCode != null) {
            stmt.bindString(17, permanentTypeCode);
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(18, gravidity);
        }
 
        Integer parity = entity.getParity();
        if (parity != null) {
            stmt.bindLong(19, parity);
        }
 
        Integer spontaneousAbortion = entity.getSpontaneousAbortion();
        if (spontaneousAbortion != null) {
            stmt.bindLong(20, spontaneousAbortion);
        }
 
        Integer inducedAbortion = entity.getInducedAbortion();
        if (inducedAbortion != null) {
            stmt.bindLong(21, inducedAbortion);
        }
 
        Integer medicalAbortion = entity.getMedicalAbortion();
        if (medicalAbortion != null) {
            stmt.bindLong(22, medicalAbortion);
        }
 
        Integer labourInduction = entity.getLabourInduction();
        if (labourInduction != null) {
            stmt.bindLong(23, labourInduction);
        }
 
        Integer deathFetus = entity.getDeathFetus();
        if (deathFetus != null) {
            stmt.bindLong(24, deathFetus);
        }
 
        Integer deathDelivery = entity.getDeathDelivery();
        if (deathDelivery != null) {
            stmt.bindLong(25, deathDelivery);
        }
 
        Integer newbornDeath = entity.getNewbornDeath();
        if (newbornDeath != null) {
            stmt.bindLong(26, newbornDeath);
        }
 
        Integer liveBirth = entity.getLiveBirth();
        if (liveBirth != null) {
            stmt.bindLong(27, liveBirth);
        }
 
        Integer pregnancyWeek = entity.getPregnancyWeek();
        if (pregnancyWeek != null) {
            stmt.bindLong(28, pregnancyWeek);
        }
 
        Integer earlyPregnancyExam = entity.getEarlyPregnancyExam();
        if (earlyPregnancyExam != null) {
            stmt.bindLong(29, earlyPregnancyExam);
        }
 
        Integer midPregnancyExam = entity.getMidPregnancyExam();
        if (midPregnancyExam != null) {
            stmt.bindLong(30, midPregnancyExam);
        }
 
        Integer latePregnancyExam = entity.getLatePregnancyExam();
        if (latePregnancyExam != null) {
            stmt.bindLong(31, latePregnancyExam);
        }
 
        String pregnancyHealth = entity.getPregnancyHealth();
        if (pregnancyHealth != null) {
            stmt.bindString(32, pregnancyHealth);
        }
 
        String pregnancyDrug = entity.getPregnancyDrug();
        if (pregnancyDrug != null) {
            stmt.bindString(33, pregnancyDrug);
        }
 
        String pregnancyDrugName = entity.getPregnancyDrugName();
        if (pregnancyDrugName != null) {
            stmt.bindString(34, pregnancyDrugName);
        }
 
        String detrimental = entity.getDetrimental();
        if (detrimental != null) {
            stmt.bindString(35, detrimental);
        }
 
        String detrimentalName = entity.getDetrimentalName();
        if (detrimentalName != null) {
            stmt.bindString(36, detrimentalName);
        }
 
        String intrauterineInfection = entity.getIntrauterineInfection();
        if (intrauterineInfection != null) {
            stmt.bindString(37, intrauterineInfection);
        }
 
        String pregnancyComplicationCode = entity.getPregnancyComplicationCode();
        if (pregnancyComplicationCode != null) {
            stmt.bindString(38, pregnancyComplicationCode);
        }
 
        String preeclampsia = entity.getPreeclampsia();
        if (preeclampsia != null) {
            stmt.bindString(39, preeclampsia);
        }
 
        String iugr = entity.getIugr();
        if (iugr != null) {
            stmt.bindString(40, iugr);
        }
 
        String hydramnion = entity.getHydramnion();
        if (hydramnion != null) {
            stmt.bindString(41, hydramnion);
        }
 
        String hypamnion = entity.getHypamnion();
        if (hypamnion != null) {
            stmt.bindString(42, hypamnion);
        }
 
        String hemorrhage = entity.getHemorrhage();
        if (hemorrhage != null) {
            stmt.bindString(43, hemorrhage);
        }
 
        String pregnancyCompliCode = entity.getPregnancyCompliCode();
        if (pregnancyCompliCode != null) {
            stmt.bindString(44, pregnancyCompliCode);
        }
 
        String cardiopathy = entity.getCardiopathy();
        if (cardiopathy != null) {
            stmt.bindString(45, cardiopathy);
        }
 
        String hepatopathy = entity.getHepatopathy();
        if (hepatopathy != null) {
            stmt.bindString(46, hepatopathy);
        }
 
        String hyperthyrodism = entity.getHyperthyrodism();
        if (hyperthyrodism != null) {
            stmt.bindString(47, hyperthyrodism);
        }
 
        String anemia = entity.getAnemia();
        if (anemia != null) {
            stmt.bindString(48, anemia);
        }
 
        String urinarySystem = entity.getUrinarySystem();
        if (urinarySystem != null) {
            stmt.bindString(49, urinarySystem);
        }
 
        String traumaHistoryCode = entity.getTraumaHistoryCode();
        if (traumaHistoryCode != null) {
            stmt.bindString(50, traumaHistoryCode);
        }
 
        String highRiskPregnancy = entity.getHighRiskPregnancy();
        if (highRiskPregnancy != null) {
            stmt.bindString(51, highRiskPregnancy);
        }
 
        String highRiskRecord = entity.getHighRiskRecord();
        if (highRiskRecord != null) {
            stmt.bindString(52, highRiskRecord);
        }
 
        String localDelivery = entity.getLocalDelivery();
        if (localDelivery != null) {
            stmt.bindString(53, localDelivery);
        }
 
        String deliveryHospital = entity.getDeliveryHospital();
        if (deliveryHospital != null) {
            stmt.bindString(54, deliveryHospital);
        }
 
        String deliveryHospitalOther = entity.getDeliveryHospitalOther();
        if (deliveryHospitalOther != null) {
            stmt.bindString(55, deliveryHospitalOther);
        }
 
        String deliveryWay = entity.getDeliveryWay();
        if (deliveryWay != null) {
            stmt.bindString(56, deliveryWay);
        }
 
        String noResiDelivery = entity.getNoResiDelivery();
        if (noResiDelivery != null) {
            stmt.bindString(57, noResiDelivery);
        }
 
        String midwife = entity.getMidwife();
        if (midwife != null) {
            stmt.bindString(58, midwife);
        }
 
        java.util.Date deliveryTime = entity.getDeliveryTime();
        if (deliveryTime != null) {
            stmt.bindLong(59, deliveryTime.getTime());
        }
 
        Integer deliveryPregnancyWeek = entity.getDeliveryPregnancyWeek();
        if (deliveryPregnancyWeek != null) {
            stmt.bindLong(60, deliveryPregnancyWeek);
        }
 
        String fetusTypeCode = entity.getFetusTypeCode();
        if (fetusTypeCode != null) {
            stmt.bindString(61, fetusTypeCode);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(62, sexCode);
        }
 
        String deliverySituation = entity.getDeliverySituation();
        if (deliverySituation != null) {
            stmt.bindString(63, deliverySituation);
        }
 
        String deliveryHydramnion = entity.getDeliveryHydramnion();
        if (deliveryHydramnion != null) {
            stmt.bindString(64, deliveryHydramnion);
        }
 
        String deliveryHypamnion = entity.getDeliveryHypamnion();
        if (deliveryHypamnion != null) {
            stmt.bindString(65, deliveryHypamnion);
        }
 
        String membranePrematureRupture = entity.getMembranePrematureRupture();
        if (membranePrematureRupture != null) {
            stmt.bindString(66, membranePrematureRupture);
        }
 
        String prolongedLabor = entity.getProlongedLabor();
        if (prolongedLabor != null) {
            stmt.bindString(67, prolongedLabor);
        }
 
        String umbilialCordAbnormality = entity.getUmbilialCordAbnormality();
        if (umbilialCordAbnormality != null) {
            stmt.bindString(68, umbilialCordAbnormality);
        }
 
        String placentalAbnormality = entity.getPlacentalAbnormality();
        if (placentalAbnormality != null) {
            stmt.bindString(69, placentalAbnormality);
        }
 
        String fetalPositionAbnormality = entity.getFetalPositionAbnormality();
        if (fetalPositionAbnormality != null) {
            stmt.bindString(70, fetalPositionAbnormality);
        }
 
        String severePih = entity.getSeverePih();
        if (severePih != null) {
            stmt.bindString(71, severePih);
        }
 
        String intrauterineDistress = entity.getIntrauterineDistress();
        if (intrauterineDistress != null) {
            stmt.bindString(72, intrauterineDistress);
        }
 
        String asphyxia = entity.getAsphyxia();
        if (asphyxia != null) {
            stmt.bindString(73, asphyxia);
        }
 
        String deformity = entity.getDeformity();
        if (deformity != null) {
            stmt.bindString(74, deformity);
        }
 
        String deformityName = entity.getDeformityName();
        if (deformityName != null) {
            stmt.bindString(75, deformityName);
        }
 
        Integer birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindLong(76, birthWeight);
        }
 
        String fetusStatus = entity.getFetusStatus();
        if (fetusStatus != null) {
            stmt.bindString(77, fetusStatus);
        }
 
        String deathPlaceType = entity.getDeathPlaceType();
        if (deathPlaceType != null) {
            stmt.bindString(78, deathPlaceType);
        }
 
        String deathDiagnosis = entity.getDeathDiagnosis();
        if (deathDiagnosis != null) {
            stmt.bindString(79, deathDiagnosis);
        }
 
        String diagnosisBasis = entity.getDiagnosisBasis();
        if (diagnosisBasis != null) {
            stmt.bindString(80, diagnosisBasis);
        }
 
        String auditSuggest = entity.getAuditSuggest();
        if (auditSuggest != null) {
            stmt.bindString(81, auditSuggest);
        }
 
        String deathSummary = entity.getDeathSummary();
        if (deathSummary != null) {
            stmt.bindString(82, deathSummary);
        }
 
        String fillOperatorName = entity.getFillOperatorName();
        if (fillOperatorName != null) {
            stmt.bindString(83, fillOperatorName);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(84, createDate.getTime());
        }
 
        java.util.Date deathDtime = entity.getDeathDtime();
        if (deathDtime != null) {
            stmt.bindLong(85, deathDtime.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(86, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(87, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(88, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(89, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(90, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(91, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(92, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(93, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(94, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(95, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(96, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildPerinatalDeath readEntity(Cursor cursor, int offset) {
        ChildPerinatalDeath entity = new ChildPerinatalDeath( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childPerinatalDeathId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // childPerinatalDeathNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resiCaseNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hospitalCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // presentAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provinceHouseholdFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // planType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // motherName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // motherAge
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // motherEducationCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // motherOccupCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fatherName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fatherEducationCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fatherOccupCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // familyIncome
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // permanentTypeCode
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // gravidity
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // parity
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // spontaneousAbortion
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // inducedAbortion
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // medicalAbortion
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // labourInduction
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // deathFetus
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // deathDelivery
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // newbornDeath
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // liveBirth
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // pregnancyWeek
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // earlyPregnancyExam
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // midPregnancyExam
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // latePregnancyExam
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // pregnancyHealth
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // pregnancyDrug
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // pregnancyDrugName
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // detrimental
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // detrimentalName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // intrauterineInfection
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // pregnancyComplicationCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // preeclampsia
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // iugr
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // hydramnion
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // hypamnion
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // hemorrhage
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // pregnancyCompliCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // cardiopathy
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // hepatopathy
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // hyperthyrodism
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // anemia
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // urinarySystem
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // traumaHistoryCode
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // highRiskPregnancy
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // highRiskRecord
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // localDelivery
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // deliveryHospital
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // deliveryHospitalOther
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // deliveryWay
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // noResiDelivery
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // midwife
            cursor.isNull(offset + 58) ? null : new java.util.Date(cursor.getLong(offset + 58)), // deliveryTime
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // deliveryPregnancyWeek
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // fetusTypeCode
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // sexCode
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // deliverySituation
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // deliveryHydramnion
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // deliveryHypamnion
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // membranePrematureRupture
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // prolongedLabor
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // umbilialCordAbnormality
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // placentalAbnormality
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // fetalPositionAbnormality
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // severePih
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // intrauterineDistress
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // asphyxia
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // deformity
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // deformityName
            cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75), // birthWeight
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // fetusStatus
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // deathPlaceType
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // deathDiagnosis
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // diagnosisBasis
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // auditSuggest
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // deathSummary
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // fillOperatorName
            cursor.isNull(offset + 83) ? null : new java.util.Date(cursor.getLong(offset + 83)), // createDate
            cursor.isNull(offset + 84) ? null : new java.util.Date(cursor.getLong(offset + 84)), // deathDtime
            cursor.isNull(offset + 85) ? null : cursor.getInt(offset + 85), // isCancel
            cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86), // createOrgId
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // orgName
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // creatorId
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // creator
            cursor.isNull(offset + 90) ? null : new java.util.Date(cursor.getLong(offset + 90)), // createTime
            cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91), // modifiedOrgId
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92), // modifiedOrgName
            cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93), // modifierId
            cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94), // modifier
            cursor.isNull(offset + 95) ? null : new java.util.Date(cursor.getLong(offset + 95)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildPerinatalDeath entity, int offset) {
        entity.setChildPerinatalDeathId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChildPerinatalDeathNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResiCaseNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHospitalCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPresentAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvinceHouseholdFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlanType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMotherName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMotherAge(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMotherEducationCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMotherOccupCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFatherName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFatherEducationCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFatherOccupCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFamilyIncome(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPermanentTypeCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGravidity(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setParity(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setSpontaneousAbortion(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setInducedAbortion(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setMedicalAbortion(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setLabourInduction(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setDeathFetus(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setDeathDelivery(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setNewbornDeath(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setLiveBirth(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setPregnancyWeek(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setEarlyPregnancyExam(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setMidPregnancyExam(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setLatePregnancyExam(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setPregnancyHealth(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPregnancyDrug(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setPregnancyDrugName(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDetrimental(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setDetrimentalName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setIntrauterineInfection(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setPregnancyComplicationCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setPreeclampsia(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setIugr(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setHydramnion(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setHypamnion(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setHemorrhage(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setPregnancyCompliCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setCardiopathy(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setHepatopathy(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setHyperthyrodism(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setAnemia(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setUrinarySystem(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setTraumaHistoryCode(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setHighRiskPregnancy(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setHighRiskRecord(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setLocalDelivery(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setDeliveryHospital(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setDeliveryHospitalOther(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setDeliveryWay(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setNoResiDelivery(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setMidwife(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setDeliveryTime(cursor.isNull(offset + 58) ? null : new java.util.Date(cursor.getLong(offset + 58)));
        entity.setDeliveryPregnancyWeek(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setFetusTypeCode(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setSexCode(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setDeliverySituation(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setDeliveryHydramnion(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setDeliveryHypamnion(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setMembranePrematureRupture(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setProlongedLabor(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setUmbilialCordAbnormality(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setPlacentalAbnormality(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setFetalPositionAbnormality(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setSeverePih(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setIntrauterineDistress(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setAsphyxia(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setDeformity(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setDeformityName(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setBirthWeight(cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75));
        entity.setFetusStatus(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setDeathPlaceType(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setDeathDiagnosis(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setDiagnosisBasis(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setAuditSuggest(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setDeathSummary(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setFillOperatorName(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setCreateDate(cursor.isNull(offset + 83) ? null : new java.util.Date(cursor.getLong(offset + 83)));
        entity.setDeathDtime(cursor.isNull(offset + 84) ? null : new java.util.Date(cursor.getLong(offset + 84)));
        entity.setIsCancel(cursor.isNull(offset + 85) ? null : cursor.getInt(offset + 85));
        entity.setCreateOrgId(cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86));
        entity.setOrgName(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setCreatorId(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setCreator(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setCreateTime(cursor.isNull(offset + 90) ? null : new java.util.Date(cursor.getLong(offset + 90)));
        entity.setModifiedOrgId(cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91));
        entity.setModifiedOrgName(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
        entity.setModifierId(cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93));
        entity.setModifier(cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94));
        entity.setModifiedTime(cursor.isNull(offset + 95) ? null : new java.util.Date(cursor.getLong(offset + 95)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildPerinatalDeath entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildPerinatalDeath entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
