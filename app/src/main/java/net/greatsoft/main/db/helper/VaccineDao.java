package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.vaccine.Vaccine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VACCINE".
*/
public class VaccineDao extends AbstractDao<Vaccine, Void> {

    public static final String TABLENAME = "VACCINE";

    /**
     * Properties of entity Vaccine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VaccineId = new Property(0, String.class, "vaccineId", false, "VACCINE_ID");
        public final static Property VaccineCode = new Property(1, String.class, "vaccineCode", false, "VACCINE_CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Unit = new Property(3, String.class, "unit", false, "UNIT");
        public final static Property VaccreportMeasure = new Property(4, String.class, "vaccreportMeasure", false, "VACCREPORT_MEASURE");
        public final static Property Part = new Property(5, String.class, "part", false, "PART");
        public final static Property PartCN = new Property(6, String.class, "partCN", false, "PART_CN");
        public final static Property Approach = new Property(7, String.class, "approach", false, "APPROACH");
        public final static Property PreventDisease = new Property(8, String.class, "preventDisease", false, "PREVENT_DISEASE");
        public final static Property RemindDays = new Property(9, Integer.class, "remindDays", false, "REMIND_DAYS");
        public final static Property VaccinePeople = new Property(10, Integer.class, "vaccinePeople", false, "VACCINE_PEOPLE");
        public final static Property IsPlan = new Property(11, Integer.class, "isPlan", false, "IS_PLAN");
        public final static Property IsValid = new Property(12, Integer.class, "isValid", false, "IS_VALID");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property IsCancel = new Property(14, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(15, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(16, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(17, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(18, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(19, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(20, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(21, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(22, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(23, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(24, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public VaccineDao(DaoConfig config) {
        super(config);
    }
    
    public VaccineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VACCINE\" (" + //
                "\"VACCINE_ID\" TEXT," + // 0: vaccineId
                "\"VACCINE_CODE\" TEXT," + // 1: vaccineCode
                "\"NAME\" TEXT," + // 2: name
                "\"UNIT\" TEXT," + // 3: unit
                "\"VACCREPORT_MEASURE\" TEXT," + // 4: vaccreportMeasure
                "\"PART\" TEXT," + // 5: part
                "\"PART_CN\" TEXT," + // 6: partCN
                "\"APPROACH\" TEXT," + // 7: approach
                "\"PREVENT_DISEASE\" TEXT," + // 8: preventDisease
                "\"REMIND_DAYS\" INTEGER," + // 9: remindDays
                "\"VACCINE_PEOPLE\" INTEGER," + // 10: vaccinePeople
                "\"IS_PLAN\" INTEGER," + // 11: isPlan
                "\"IS_VALID\" INTEGER," + // 12: isValid
                "\"REMARK\" TEXT," + // 13: remark
                "\"IS_CANCEL\" INTEGER," + // 14: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 15: createOrgId
                "\"ORG_NAME\" TEXT," + // 16: orgName
                "\"CREATOR_ID\" TEXT," + // 17: creatorId
                "\"CREATOR\" TEXT," + // 18: creator
                "\"CREATE_TIME\" INTEGER," + // 19: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 20: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 21: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 22: modifierId
                "\"MODIFIER\" TEXT," + // 23: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 24: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VACCINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vaccine entity) {
        stmt.clearBindings();
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(1, vaccineId);
        }
 
        String vaccineCode = entity.getVaccineCode();
        if (vaccineCode != null) {
            stmt.bindString(2, vaccineCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(4, unit);
        }
 
        String vaccreportMeasure = entity.getVaccreportMeasure();
        if (vaccreportMeasure != null) {
            stmt.bindString(5, vaccreportMeasure);
        }
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(6, part);
        }
 
        String partCN = entity.getPartCN();
        if (partCN != null) {
            stmt.bindString(7, partCN);
        }
 
        String approach = entity.getApproach();
        if (approach != null) {
            stmt.bindString(8, approach);
        }
 
        String preventDisease = entity.getPreventDisease();
        if (preventDisease != null) {
            stmt.bindString(9, preventDisease);
        }
 
        Integer remindDays = entity.getRemindDays();
        if (remindDays != null) {
            stmt.bindLong(10, remindDays);
        }
 
        Integer vaccinePeople = entity.getVaccinePeople();
        if (vaccinePeople != null) {
            stmt.bindLong(11, vaccinePeople);
        }
 
        Integer isPlan = entity.getIsPlan();
        if (isPlan != null) {
            stmt.bindLong(12, isPlan);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(13, isValid);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(15, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(16, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(17, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(18, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(19, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(20, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(21, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(22, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(23, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(24, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(25, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vaccine entity) {
        stmt.clearBindings();
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(1, vaccineId);
        }
 
        String vaccineCode = entity.getVaccineCode();
        if (vaccineCode != null) {
            stmt.bindString(2, vaccineCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(4, unit);
        }
 
        String vaccreportMeasure = entity.getVaccreportMeasure();
        if (vaccreportMeasure != null) {
            stmt.bindString(5, vaccreportMeasure);
        }
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(6, part);
        }
 
        String partCN = entity.getPartCN();
        if (partCN != null) {
            stmt.bindString(7, partCN);
        }
 
        String approach = entity.getApproach();
        if (approach != null) {
            stmt.bindString(8, approach);
        }
 
        String preventDisease = entity.getPreventDisease();
        if (preventDisease != null) {
            stmt.bindString(9, preventDisease);
        }
 
        Integer remindDays = entity.getRemindDays();
        if (remindDays != null) {
            stmt.bindLong(10, remindDays);
        }
 
        Integer vaccinePeople = entity.getVaccinePeople();
        if (vaccinePeople != null) {
            stmt.bindLong(11, vaccinePeople);
        }
 
        Integer isPlan = entity.getIsPlan();
        if (isPlan != null) {
            stmt.bindLong(12, isPlan);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(13, isValid);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(15, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(16, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(17, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(18, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(19, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(20, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(21, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(22, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(23, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(24, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(25, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Vaccine readEntity(Cursor cursor, int offset) {
        Vaccine entity = new Vaccine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vaccineId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vaccineCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vaccreportMeasure
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // part
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // partCN
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // approach
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // preventDisease
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // remindDays
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // vaccinePeople
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isPlan
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // isValid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // isCancel
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createOrgId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // orgName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // creatorId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // creator
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // createTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // modifiedOrgId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // modifiedOrgName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // modifierId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // modifier
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vaccine entity, int offset) {
        entity.setVaccineId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVaccineCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVaccreportMeasure(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPart(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPartCN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApproach(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPreventDisease(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemindDays(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setVaccinePeople(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsPlan(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsValid(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsCancel(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCreateOrgId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOrgName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreatorId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreator(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreateTime(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setModifiedOrgId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setModifiedOrgName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModifierId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setModifier(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setModifiedTime(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Vaccine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Vaccine entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
