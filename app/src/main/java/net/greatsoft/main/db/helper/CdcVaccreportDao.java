package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.vaccine.CdcVaccreport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CDC_VACCREPORT".
*/
public class CdcVaccreportDao extends AbstractDao<CdcVaccreport, Void> {

    public static final String TABLENAME = "CDC_VACCREPORT";

    /**
     * Properties of entity CdcVaccreport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CdcVaccreportId = new Property(0, String.class, "cdcVaccreportId", false, "CDC_VACCREPORT_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property CdcVaccreportNo = new Property(2, String.class, "cdcVaccreportNo", false, "CDC_VACCREPORT_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property HealthRecordNo = new Property(4, String.class, "healthRecordNo", false, "HEALTH_RECORD_NO");
        public final static Property SexCode = new Property(5, String.class, "sexCode", false, "SEX_CODE");
        public final static Property BirthDate = new Property(6, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property GuardianName = new Property(7, String.class, "guardianName", false, "GUARDIAN_NAME");
        public final static Property GuardianRelationCode = new Property(8, String.class, "guardianRelationCode", false, "GUARDIAN_RELATION_CODE");
        public final static Property TelNo = new Property(9, String.class, "telNo", false, "TEL_NO");
        public final static Property FamilyTelNo = new Property(10, String.class, "familyTelNo", false, "FAMILY_TEL_NO");
        public final static Property EmployerTelNo = new Property(11, String.class, "employerTelNo", false, "EMPLOYER_TEL_NO");
        public final static Property PresentAddr = new Property(12, String.class, "presentAddr", false, "PRESENT_ADDR");
        public final static Property RegisterAddrProvince = new Property(13, String.class, "registerAddrProvince", false, "REGISTER_ADDR_PROVINCE");
        public final static Property IsSame = new Property(14, String.class, "isSame", false, "IS_SAME");
        public final static Property MoveOutDate = new Property(15, java.util.Date.class, "moveOutDate", false, "MOVE_OUT_DATE");
        public final static Property MoveOutReason = new Property(16, String.class, "moveOutReason", false, "MOVE_OUT_REASON");
        public final static Property MoveInDate = new Property(17, java.util.Date.class, "moveInDate", false, "MOVE_IN_DATE");
        public final static Property VaccineAbnormHistory = new Property(18, String.class, "vaccineAbnormHistory", false, "VACCINE_ABNORM_HISTORY");
        public final static Property VaccinateContraindication = new Property(19, String.class, "vaccinateContraindication", false, "VACCINATE_CONTRAINDICATION");
        public final static Property InfectionHistory = new Property(20, String.class, "infectionHistory", false, "INFECTION_HISTORY");
        public final static Property CardIssuerName = new Property(21, String.class, "cardIssuerName", false, "CARD_ISSUER_NAME");
        public final static Property CardIssueDate = new Property(22, java.util.Date.class, "cardIssueDate", false, "CARD_ISSUE_DATE");
        public final static Property IsCancel = new Property(23, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(24, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(25, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(26, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(27, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(28, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(29, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(30, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(31, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(32, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(33, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public CdcVaccreportDao(DaoConfig config) {
        super(config);
    }
    
    public CdcVaccreportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CDC_VACCREPORT\" (" + //
                "\"CDC_VACCREPORT_ID\" TEXT," + // 0: cdcVaccreportId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CDC_VACCREPORT_NO\" TEXT," + // 2: cdcVaccreportNo
                "\"NAME\" TEXT," + // 3: name
                "\"HEALTH_RECORD_NO\" TEXT," + // 4: healthRecordNo
                "\"SEX_CODE\" TEXT," + // 5: sexCode
                "\"BIRTH_DATE\" TEXT," + // 6: birthDate
                "\"GUARDIAN_NAME\" TEXT," + // 7: guardianName
                "\"GUARDIAN_RELATION_CODE\" TEXT," + // 8: guardianRelationCode
                "\"TEL_NO\" TEXT," + // 9: telNo
                "\"FAMILY_TEL_NO\" TEXT," + // 10: familyTelNo
                "\"EMPLOYER_TEL_NO\" TEXT," + // 11: employerTelNo
                "\"PRESENT_ADDR\" TEXT," + // 12: presentAddr
                "\"REGISTER_ADDR_PROVINCE\" TEXT," + // 13: registerAddrProvince
                "\"IS_SAME\" TEXT," + // 14: isSame
                "\"MOVE_OUT_DATE\" INTEGER," + // 15: moveOutDate
                "\"MOVE_OUT_REASON\" TEXT," + // 16: moveOutReason
                "\"MOVE_IN_DATE\" INTEGER," + // 17: moveInDate
                "\"VACCINE_ABNORM_HISTORY\" TEXT," + // 18: vaccineAbnormHistory
                "\"VACCINATE_CONTRAINDICATION\" TEXT," + // 19: vaccinateContraindication
                "\"INFECTION_HISTORY\" TEXT," + // 20: infectionHistory
                "\"CARD_ISSUER_NAME\" TEXT," + // 21: cardIssuerName
                "\"CARD_ISSUE_DATE\" INTEGER," + // 22: cardIssueDate
                "\"IS_CANCEL\" INTEGER," + // 23: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 24: createOrgId
                "\"ORG_NAME\" TEXT," + // 25: orgName
                "\"CREATOR_ID\" TEXT," + // 26: creatorId
                "\"CREATOR\" TEXT," + // 27: creator
                "\"CREATE_TIME\" INTEGER," + // 28: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 29: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 30: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 31: modifierId
                "\"MODIFIER\" TEXT," + // 32: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 33: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CDC_VACCREPORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CdcVaccreport entity) {
        stmt.clearBindings();
 
        String cdcVaccreportId = entity.getCdcVaccreportId();
        if (cdcVaccreportId != null) {
            stmt.bindString(1, cdcVaccreportId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String cdcVaccreportNo = entity.getCdcVaccreportNo();
        if (cdcVaccreportNo != null) {
            stmt.bindString(3, cdcVaccreportNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String healthRecordNo = entity.getHealthRecordNo();
        if (healthRecordNo != null) {
            stmt.bindString(5, healthRecordNo);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(6, sexCode);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(7, birthDate);
        }
 
        String guardianName = entity.getGuardianName();
        if (guardianName != null) {
            stmt.bindString(8, guardianName);
        }
 
        String guardianRelationCode = entity.getGuardianRelationCode();
        if (guardianRelationCode != null) {
            stmt.bindString(9, guardianRelationCode);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(10, telNo);
        }
 
        String familyTelNo = entity.getFamilyTelNo();
        if (familyTelNo != null) {
            stmt.bindString(11, familyTelNo);
        }
 
        String employerTelNo = entity.getEmployerTelNo();
        if (employerTelNo != null) {
            stmt.bindString(12, employerTelNo);
        }
 
        String presentAddr = entity.getPresentAddr();
        if (presentAddr != null) {
            stmt.bindString(13, presentAddr);
        }
 
        String registerAddrProvince = entity.getRegisterAddrProvince();
        if (registerAddrProvince != null) {
            stmt.bindString(14, registerAddrProvince);
        }
 
        String isSame = entity.getIsSame();
        if (isSame != null) {
            stmt.bindString(15, isSame);
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(16, moveOutDate.getTime());
        }
 
        String moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindString(17, moveOutReason);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(18, moveInDate.getTime());
        }
 
        String vaccineAbnormHistory = entity.getVaccineAbnormHistory();
        if (vaccineAbnormHistory != null) {
            stmt.bindString(19, vaccineAbnormHistory);
        }
 
        String vaccinateContraindication = entity.getVaccinateContraindication();
        if (vaccinateContraindication != null) {
            stmt.bindString(20, vaccinateContraindication);
        }
 
        String infectionHistory = entity.getInfectionHistory();
        if (infectionHistory != null) {
            stmt.bindString(21, infectionHistory);
        }
 
        String cardIssuerName = entity.getCardIssuerName();
        if (cardIssuerName != null) {
            stmt.bindString(22, cardIssuerName);
        }
 
        java.util.Date cardIssueDate = entity.getCardIssueDate();
        if (cardIssueDate != null) {
            stmt.bindLong(23, cardIssueDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(24, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(25, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(26, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(27, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(28, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(29, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(30, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(31, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(32, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(33, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(34, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CdcVaccreport entity) {
        stmt.clearBindings();
 
        String cdcVaccreportId = entity.getCdcVaccreportId();
        if (cdcVaccreportId != null) {
            stmt.bindString(1, cdcVaccreportId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String cdcVaccreportNo = entity.getCdcVaccreportNo();
        if (cdcVaccreportNo != null) {
            stmt.bindString(3, cdcVaccreportNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String healthRecordNo = entity.getHealthRecordNo();
        if (healthRecordNo != null) {
            stmt.bindString(5, healthRecordNo);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(6, sexCode);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(7, birthDate);
        }
 
        String guardianName = entity.getGuardianName();
        if (guardianName != null) {
            stmt.bindString(8, guardianName);
        }
 
        String guardianRelationCode = entity.getGuardianRelationCode();
        if (guardianRelationCode != null) {
            stmt.bindString(9, guardianRelationCode);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(10, telNo);
        }
 
        String familyTelNo = entity.getFamilyTelNo();
        if (familyTelNo != null) {
            stmt.bindString(11, familyTelNo);
        }
 
        String employerTelNo = entity.getEmployerTelNo();
        if (employerTelNo != null) {
            stmt.bindString(12, employerTelNo);
        }
 
        String presentAddr = entity.getPresentAddr();
        if (presentAddr != null) {
            stmt.bindString(13, presentAddr);
        }
 
        String registerAddrProvince = entity.getRegisterAddrProvince();
        if (registerAddrProvince != null) {
            stmt.bindString(14, registerAddrProvince);
        }
 
        String isSame = entity.getIsSame();
        if (isSame != null) {
            stmt.bindString(15, isSame);
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(16, moveOutDate.getTime());
        }
 
        String moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindString(17, moveOutReason);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(18, moveInDate.getTime());
        }
 
        String vaccineAbnormHistory = entity.getVaccineAbnormHistory();
        if (vaccineAbnormHistory != null) {
            stmt.bindString(19, vaccineAbnormHistory);
        }
 
        String vaccinateContraindication = entity.getVaccinateContraindication();
        if (vaccinateContraindication != null) {
            stmt.bindString(20, vaccinateContraindication);
        }
 
        String infectionHistory = entity.getInfectionHistory();
        if (infectionHistory != null) {
            stmt.bindString(21, infectionHistory);
        }
 
        String cardIssuerName = entity.getCardIssuerName();
        if (cardIssuerName != null) {
            stmt.bindString(22, cardIssuerName);
        }
 
        java.util.Date cardIssueDate = entity.getCardIssueDate();
        if (cardIssueDate != null) {
            stmt.bindLong(23, cardIssueDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(24, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(25, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(26, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(27, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(28, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(29, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(30, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(31, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(32, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(33, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(34, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CdcVaccreport readEntity(Cursor cursor, int offset) {
        CdcVaccreport entity = new CdcVaccreport( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cdcVaccreportId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cdcVaccreportNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthRecordNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sexCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // guardianName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // guardianRelationCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // familyTelNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // employerTelNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // presentAddr
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // registerAddrProvince
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isSame
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // moveOutDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // moveOutReason
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // moveInDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // vaccineAbnormHistory
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // vaccinateContraindication
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // infectionHistory
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // cardIssuerName
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // cardIssueDate
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // isCancel
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // createOrgId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // orgName
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // creatorId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // creator
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // createTime
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // modifiedOrgId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // modifiedOrgName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // modifierId
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // modifier
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CdcVaccreport entity, int offset) {
        entity.setCdcVaccreportId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCdcVaccreportNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthRecordNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSexCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGuardianName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGuardianRelationCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFamilyTelNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmployerTelNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPresentAddr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRegisterAddrProvince(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsSame(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMoveOutDate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setMoveOutReason(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMoveInDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setVaccineAbnormHistory(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVaccinateContraindication(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInfectionHistory(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCardIssuerName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCardIssueDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setIsCancel(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setCreateOrgId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrgName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreatorId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCreator(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCreateTime(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setModifiedOrgId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setModifiedOrgName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setModifierId(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setModifier(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setModifiedTime(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CdcVaccreport entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CdcVaccreport entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
