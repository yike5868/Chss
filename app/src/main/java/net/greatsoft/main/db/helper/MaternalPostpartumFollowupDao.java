package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.maternal.MaternalPostpartumFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_POSTPARTUM_FOLLOWUP".
*/
public class MaternalPostpartumFollowupDao extends AbstractDao<MaternalPostpartumFollowup, Void> {

    public static final String TABLENAME = "MATERNAL_POSTPARTUM_FOLLOWUP";

    /**
     * Properties of entity MaternalPostpartumFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaternalPostpartumFollowupId = new Property(0, String.class, "maternalPostpartumFollowupId", false, "MATERNAL_POSTPARTUM_FOLLOWUP_ID");
        public final static Property MaternalInfoId = new Property(1, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MaternalPostpartumFollowupNo = new Property(3, String.class, "maternalPostpartumFollowupNo", false, "MATERNAL_POSTPARTUM_FOLLOWUP_NO");
        public final static Property MaternalPostpartumTypeCode = new Property(4, String.class, "maternalPostpartumTypeCode", false, "MATERNAL_POSTPARTUM_TYPE_CODE");
        public final static Property PregnantCount = new Property(5, Integer.class, "pregnantCount", false, "PREGNANT_COUNT");
        public final static Property MaternalRegisterId = new Property(6, String.class, "maternalRegisterId", false, "MATERNAL_REGISTER_ID");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property FollowupDate = new Property(8, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(9, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property DeliveryDate = new Property(10, java.util.Date.class, "deliveryDate", false, "DELIVERY_DATE");
        public final static Property ResiOutDate = new Property(11, java.util.Date.class, "resiOutDate", false, "RESI_OUT_DATE");
        public final static Property HealthDesc = new Property(12, String.class, "healthDesc", false, "HEALTH_DESC");
        public final static Property PsyDesc = new Property(13, String.class, "psyDesc", false, "PSY_DESC");
        public final static Property Systilic = new Property(14, Integer.class, "systilic", false, "SYSTILIC");
        public final static Property Diastolic = new Property(15, Integer.class, "diastolic", false, "DIASTOLIC");
        public final static Property UberCode = new Property(16, String.class, "uberCode", false, "UBER_CODE");
        public final static Property UberAbnormDesc = new Property(17, String.class, "uberAbnormDesc", false, "UBER_ABNORM_DESC");
        public final static Property LochiaCode = new Property(18, String.class, "lochiaCode", false, "LOCHIA_CODE");
        public final static Property LochiaAbnormDesc = new Property(19, String.class, "lochiaAbnormDesc", false, "LOCHIA_ABNORM_DESC");
        public final static Property UterusCode = new Property(20, String.class, "uterusCode", false, "UTERUS_CODE");
        public final static Property UterusAbnormDesc = new Property(21, String.class, "uterusAbnormDesc", false, "UTERUS_ABNORM_DESC");
        public final static Property WoundCode = new Property(22, String.class, "woundCode", false, "WOUND_CODE");
        public final static Property WoundAbnormDesc = new Property(23, String.class, "woundAbnormDesc", false, "WOUND_ABNORM_DESC");
        public final static Property OthersDesc = new Property(24, String.class, "othersDesc", false, "OTHERS_DESC");
        public final static Property FollowupClassifyCode = new Property(25, String.class, "followupClassifyCode", false, "FOLLOWUP_CLASSIFY_CODE");
        public final static Property FollowupClassifyValue = new Property(26, String.class, "followupClassifyValue", false, "FOLLOWUP_CLASSIFY_VALUE");
        public final static Property Pulses = new Property(27, Integer.class, "pulses", false, "PULSES");
        public final static Property BodyTemperature = new Property(28, Double.class, "bodyTemperature", false, "BODY_TEMPERATURE");
        public final static Property ReferralCode = new Property(29, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property RefertoOrgName = new Property(30, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(31, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property ReferralReason = new Property(32, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property CaseCloseCode = new Property(33, String.class, "caseCloseCode", false, "CASE_CLOSE_CODE");
        public final static Property NextFollowupDate = new Property(34, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property PreviousVisitDate = new Property(35, java.util.Date.class, "previousVisitDate", false, "PREVIOUS_VISIT_DATE");
        public final static Property PreviousVisitPerson = new Property(36, String.class, "previousVisitPerson", false, "PREVIOUS_VISIT_PERSON");
        public final static Property PreviousVisitTypeCode = new Property(37, String.class, "previousVisitTypeCode", false, "PREVIOUS_VISIT_TYPE_CODE");
        public final static Property FollowupDoctorId = new Property(38, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(39, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property IsCancel = new Property(40, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(41, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(42, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(43, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(44, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(45, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(46, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(47, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(48, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(49, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(50, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(51, String.class, "jsonDetail", false, "JSON_DETAIL");
    };


    public MaternalPostpartumFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalPostpartumFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_POSTPARTUM_FOLLOWUP\" (" + //
                "\"MATERNAL_POSTPARTUM_FOLLOWUP_ID\" TEXT," + // 0: maternalPostpartumFollowupId
                "\"MATERNAL_INFO_ID\" TEXT," + // 1: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"MATERNAL_POSTPARTUM_FOLLOWUP_NO\" TEXT," + // 3: maternalPostpartumFollowupNo
                "\"MATERNAL_POSTPARTUM_TYPE_CODE\" TEXT," + // 4: maternalPostpartumTypeCode
                "\"PREGNANT_COUNT\" INTEGER," + // 5: pregnantCount
                "\"MATERNAL_REGISTER_ID\" TEXT," + // 6: maternalRegisterId
                "\"NAME\" TEXT," + // 7: name
                "\"FOLLOWUP_DATE\" INTEGER," + // 8: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 9: followupWayCode
                "\"DELIVERY_DATE\" INTEGER," + // 10: deliveryDate
                "\"RESI_OUT_DATE\" INTEGER," + // 11: resiOutDate
                "\"HEALTH_DESC\" TEXT," + // 12: healthDesc
                "\"PSY_DESC\" TEXT," + // 13: psyDesc
                "\"SYSTILIC\" INTEGER," + // 14: systilic
                "\"DIASTOLIC\" INTEGER," + // 15: diastolic
                "\"UBER_CODE\" TEXT," + // 16: uberCode
                "\"UBER_ABNORM_DESC\" TEXT," + // 17: uberAbnormDesc
                "\"LOCHIA_CODE\" TEXT," + // 18: lochiaCode
                "\"LOCHIA_ABNORM_DESC\" TEXT," + // 19: lochiaAbnormDesc
                "\"UTERUS_CODE\" TEXT," + // 20: uterusCode
                "\"UTERUS_ABNORM_DESC\" TEXT," + // 21: uterusAbnormDesc
                "\"WOUND_CODE\" TEXT," + // 22: woundCode
                "\"WOUND_ABNORM_DESC\" TEXT," + // 23: woundAbnormDesc
                "\"OTHERS_DESC\" TEXT," + // 24: othersDesc
                "\"FOLLOWUP_CLASSIFY_CODE\" TEXT," + // 25: followupClassifyCode
                "\"FOLLOWUP_CLASSIFY_VALUE\" TEXT," + // 26: followupClassifyValue
                "\"PULSES\" INTEGER," + // 27: pulses
                "\"BODY_TEMPERATURE\" REAL," + // 28: bodyTemperature
                "\"REFERRAL_CODE\" TEXT," + // 29: referralCode
                "\"REFERTO_ORG_NAME\" TEXT," + // 30: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 31: refertoDeptName
                "\"REFERRAL_REASON\" TEXT," + // 32: referralReason
                "\"CASE_CLOSE_CODE\" TEXT," + // 33: caseCloseCode
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 34: nextFollowupDate
                "\"PREVIOUS_VISIT_DATE\" INTEGER," + // 35: previousVisitDate
                "\"PREVIOUS_VISIT_PERSON\" TEXT," + // 36: previousVisitPerson
                "\"PREVIOUS_VISIT_TYPE_CODE\" TEXT," + // 37: previousVisitTypeCode
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 38: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 39: followupDoctorName
                "\"IS_CANCEL\" INTEGER," + // 40: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 41: createOrgId
                "\"ORG_NAME\" TEXT," + // 42: orgName
                "\"CREATOR_ID\" TEXT," + // 43: creatorId
                "\"CREATOR\" TEXT," + // 44: creator
                "\"CREATE_TIME\" INTEGER," + // 45: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 46: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 47: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 48: modifierId
                "\"MODIFIER\" TEXT," + // 49: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 50: modifiedTime
                "\"JSON_DETAIL\" TEXT);"); // 51: jsonDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_POSTPARTUM_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalPostpartumFollowup entity) {
        stmt.clearBindings();
 
        String maternalPostpartumFollowupId = entity.getMaternalPostpartumFollowupId();
        if (maternalPostpartumFollowupId != null) {
            stmt.bindString(1, maternalPostpartumFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalPostpartumFollowupNo = entity.getMaternalPostpartumFollowupNo();
        if (maternalPostpartumFollowupNo != null) {
            stmt.bindString(4, maternalPostpartumFollowupNo);
        }
 
        String maternalPostpartumTypeCode = entity.getMaternalPostpartumTypeCode();
        if (maternalPostpartumTypeCode != null) {
            stmt.bindString(5, maternalPostpartumTypeCode);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(7, maternalRegisterId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(9, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(10, followupWayCode);
        }
 
        java.util.Date deliveryDate = entity.getDeliveryDate();
        if (deliveryDate != null) {
            stmt.bindLong(11, deliveryDate.getTime());
        }
 
        java.util.Date resiOutDate = entity.getResiOutDate();
        if (resiOutDate != null) {
            stmt.bindLong(12, resiOutDate.getTime());
        }
 
        String healthDesc = entity.getHealthDesc();
        if (healthDesc != null) {
            stmt.bindString(13, healthDesc);
        }
 
        String psyDesc = entity.getPsyDesc();
        if (psyDesc != null) {
            stmt.bindString(14, psyDesc);
        }
 
        Integer systilic = entity.getSystilic();
        if (systilic != null) {
            stmt.bindLong(15, systilic);
        }
 
        Integer diastolic = entity.getDiastolic();
        if (diastolic != null) {
            stmt.bindLong(16, diastolic);
        }
 
        String uberCode = entity.getUberCode();
        if (uberCode != null) {
            stmt.bindString(17, uberCode);
        }
 
        String uberAbnormDesc = entity.getUberAbnormDesc();
        if (uberAbnormDesc != null) {
            stmt.bindString(18, uberAbnormDesc);
        }
 
        String lochiaCode = entity.getLochiaCode();
        if (lochiaCode != null) {
            stmt.bindString(19, lochiaCode);
        }
 
        String lochiaAbnormDesc = entity.getLochiaAbnormDesc();
        if (lochiaAbnormDesc != null) {
            stmt.bindString(20, lochiaAbnormDesc);
        }
 
        String uterusCode = entity.getUterusCode();
        if (uterusCode != null) {
            stmt.bindString(21, uterusCode);
        }
 
        String uterusAbnormDesc = entity.getUterusAbnormDesc();
        if (uterusAbnormDesc != null) {
            stmt.bindString(22, uterusAbnormDesc);
        }
 
        String woundCode = entity.getWoundCode();
        if (woundCode != null) {
            stmt.bindString(23, woundCode);
        }
 
        String woundAbnormDesc = entity.getWoundAbnormDesc();
        if (woundAbnormDesc != null) {
            stmt.bindString(24, woundAbnormDesc);
        }
 
        String othersDesc = entity.getOthersDesc();
        if (othersDesc != null) {
            stmt.bindString(25, othersDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(26, followupClassifyCode);
        }
 
        String followupClassifyValue = entity.getFollowupClassifyValue();
        if (followupClassifyValue != null) {
            stmt.bindString(27, followupClassifyValue);
        }
 
        Integer pulses = entity.getPulses();
        if (pulses != null) {
            stmt.bindLong(28, pulses);
        }
 
        Double bodyTemperature = entity.getBodyTemperature();
        if (bodyTemperature != null) {
            stmt.bindDouble(29, bodyTemperature);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(30, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(31, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(32, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(33, referralReason);
        }
 
        String caseCloseCode = entity.getCaseCloseCode();
        if (caseCloseCode != null) {
            stmt.bindString(34, caseCloseCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(35, nextFollowupDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(36, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(37, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(38, previousVisitTypeCode);
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(39, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(40, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(41, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(42, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(43, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(44, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(45, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(46, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(47, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(48, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(49, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(50, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(51, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(52, jsonDetail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalPostpartumFollowup entity) {
        stmt.clearBindings();
 
        String maternalPostpartumFollowupId = entity.getMaternalPostpartumFollowupId();
        if (maternalPostpartumFollowupId != null) {
            stmt.bindString(1, maternalPostpartumFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalPostpartumFollowupNo = entity.getMaternalPostpartumFollowupNo();
        if (maternalPostpartumFollowupNo != null) {
            stmt.bindString(4, maternalPostpartumFollowupNo);
        }
 
        String maternalPostpartumTypeCode = entity.getMaternalPostpartumTypeCode();
        if (maternalPostpartumTypeCode != null) {
            stmt.bindString(5, maternalPostpartumTypeCode);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(7, maternalRegisterId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(9, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(10, followupWayCode);
        }
 
        java.util.Date deliveryDate = entity.getDeliveryDate();
        if (deliveryDate != null) {
            stmt.bindLong(11, deliveryDate.getTime());
        }
 
        java.util.Date resiOutDate = entity.getResiOutDate();
        if (resiOutDate != null) {
            stmt.bindLong(12, resiOutDate.getTime());
        }
 
        String healthDesc = entity.getHealthDesc();
        if (healthDesc != null) {
            stmt.bindString(13, healthDesc);
        }
 
        String psyDesc = entity.getPsyDesc();
        if (psyDesc != null) {
            stmt.bindString(14, psyDesc);
        }
 
        Integer systilic = entity.getSystilic();
        if (systilic != null) {
            stmt.bindLong(15, systilic);
        }
 
        Integer diastolic = entity.getDiastolic();
        if (diastolic != null) {
            stmt.bindLong(16, diastolic);
        }
 
        String uberCode = entity.getUberCode();
        if (uberCode != null) {
            stmt.bindString(17, uberCode);
        }
 
        String uberAbnormDesc = entity.getUberAbnormDesc();
        if (uberAbnormDesc != null) {
            stmt.bindString(18, uberAbnormDesc);
        }
 
        String lochiaCode = entity.getLochiaCode();
        if (lochiaCode != null) {
            stmt.bindString(19, lochiaCode);
        }
 
        String lochiaAbnormDesc = entity.getLochiaAbnormDesc();
        if (lochiaAbnormDesc != null) {
            stmt.bindString(20, lochiaAbnormDesc);
        }
 
        String uterusCode = entity.getUterusCode();
        if (uterusCode != null) {
            stmt.bindString(21, uterusCode);
        }
 
        String uterusAbnormDesc = entity.getUterusAbnormDesc();
        if (uterusAbnormDesc != null) {
            stmt.bindString(22, uterusAbnormDesc);
        }
 
        String woundCode = entity.getWoundCode();
        if (woundCode != null) {
            stmt.bindString(23, woundCode);
        }
 
        String woundAbnormDesc = entity.getWoundAbnormDesc();
        if (woundAbnormDesc != null) {
            stmt.bindString(24, woundAbnormDesc);
        }
 
        String othersDesc = entity.getOthersDesc();
        if (othersDesc != null) {
            stmt.bindString(25, othersDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(26, followupClassifyCode);
        }
 
        String followupClassifyValue = entity.getFollowupClassifyValue();
        if (followupClassifyValue != null) {
            stmt.bindString(27, followupClassifyValue);
        }
 
        Integer pulses = entity.getPulses();
        if (pulses != null) {
            stmt.bindLong(28, pulses);
        }
 
        Double bodyTemperature = entity.getBodyTemperature();
        if (bodyTemperature != null) {
            stmt.bindDouble(29, bodyTemperature);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(30, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(31, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(32, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(33, referralReason);
        }
 
        String caseCloseCode = entity.getCaseCloseCode();
        if (caseCloseCode != null) {
            stmt.bindString(34, caseCloseCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(35, nextFollowupDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(36, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(37, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(38, previousVisitTypeCode);
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(39, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(40, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(41, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(42, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(43, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(44, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(45, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(46, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(47, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(48, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(49, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(50, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(51, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(52, jsonDetail);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalPostpartumFollowup readEntity(Cursor cursor, int offset) {
        MaternalPostpartumFollowup entity = new MaternalPostpartumFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maternalPostpartumFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // maternalInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maternalPostpartumFollowupNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maternalPostpartumTypeCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pregnantCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // maternalRegisterId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // followupDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // followupWayCode
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // deliveryDate
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // resiOutDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // healthDesc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // psyDesc
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // systilic
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // diastolic
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // uberCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // uberAbnormDesc
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // lochiaCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lochiaAbnormDesc
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // uterusCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // uterusAbnormDesc
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // woundCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // woundAbnormDesc
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // othersDesc
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // followupClassifyCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // followupClassifyValue
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // pulses
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // bodyTemperature
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // referralCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // refertoOrgName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // refertoDeptName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // referralReason
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // caseCloseCode
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // nextFollowupDate
            cursor.isNull(offset + 35) ? null : new java.util.Date(cursor.getLong(offset + 35)), // previousVisitDate
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // previousVisitPerson
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // previousVisitTypeCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // followupDoctorId
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // followupDoctorName
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // isCancel
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // createOrgId
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // orgName
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // creatorId
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // creator
            cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)), // createTime
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // modifiedOrgId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // modifiedOrgName
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // modifierId
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // modifier
            cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)), // modifiedTime
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51) // jsonDetail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalPostpartumFollowup entity, int offset) {
        entity.setMaternalPostpartumFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaternalInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaternalPostpartumFollowupNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaternalPostpartumTypeCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMaternalRegisterId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFollowupDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFollowupWayCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeliveryDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setResiOutDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setHealthDesc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPsyDesc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSystilic(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDiastolic(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setUberCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUberAbnormDesc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLochiaCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLochiaAbnormDesc(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUterusCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUterusAbnormDesc(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWoundCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWoundAbnormDesc(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOthersDesc(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFollowupClassifyCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFollowupClassifyValue(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPulses(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setBodyTemperature(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setReferralCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRefertoOrgName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRefertoDeptName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setReferralReason(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCaseCloseCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setNextFollowupDate(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setPreviousVisitDate(cursor.isNull(offset + 35) ? null : new java.util.Date(cursor.getLong(offset + 35)));
        entity.setPreviousVisitPerson(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setPreviousVisitTypeCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFollowupDoctorId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setFollowupDoctorName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIsCancel(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setCreateOrgId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setOrgName(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCreatorId(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setCreator(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCreateTime(cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)));
        entity.setModifiedOrgId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setModifiedOrgName(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setModifierId(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setModifier(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setModifiedTime(cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)));
        entity.setJsonDetail(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalPostpartumFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalPostpartumFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
