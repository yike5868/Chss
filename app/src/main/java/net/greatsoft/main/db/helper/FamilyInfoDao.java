package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.family.FamilyInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_INFO".
*/
public class FamilyInfoDao extends AbstractDao<FamilyInfo, Void> {

    public static final String TABLENAME = "FAMILY_INFO";

    /**
     * Properties of entity FamilyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FamilyInfoId = new Property(0, String.class, "familyInfoId", false, "FAMILY_INFO_ID");
        public final static Property CreateOrgId = new Property(1, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property ManageOrgId = new Property(2, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property FamilyRecordNo = new Property(3, String.class, "familyRecordNo", false, "FAMILY_RECORD_NO");
        public final static Property FamilyRecordSno = new Property(4, String.class, "familyRecordSno", false, "FAMILY_RECORD_SNO");
        public final static Property FamilyDoctorOrgId = new Property(5, String.class, "familyDoctorOrgId", false, "FAMILY_DOCTOR_ORG_ID");
        public final static Property FamilyDoctorTeamId = new Property(6, String.class, "familyDoctorTeamId", false, "FAMILY_DOCTOR_TEAM_ID");
        public final static Property RespDoctorId = new Property(7, String.class, "respDoctorId", false, "RESP_DOCTOR_ID");
        public final static Property RespDoctorName = new Property(8, String.class, "respDoctorName", false, "RESP_DOCTOR_NAME");
        public final static Property FamilyDoctorEndDate = new Property(9, java.util.Date.class, "familyDoctorEndDate", false, "FAMILY_DOCTOR_END_DATE");
        public final static Property Householder = new Property(10, String.class, "householder", false, "HOUSEHOLDER");
        public final static Property HouseholderIdNo = new Property(11, String.class, "householderIdNo", false, "HOUSEHOLDER_ID_NO");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property TelNo = new Property(13, String.class, "telNo", false, "TEL_NO");
        public final static Property HouseholdNo = new Property(14, String.class, "householdNo", false, "HOUSEHOLD_NO");
        public final static Property FamilySize = new Property(15, Integer.class, "familySize", false, "FAMILY_SIZE");
        public final static Property Committee = new Property(16, String.class, "committee", false, "COMMITTEE");
        public final static Property Residential = new Property(17, String.class, "residential", false, "RESIDENTIAL");
        public final static Property Building = new Property(18, String.class, "building", false, "BUILDING");
        public final static Property Unit = new Property(19, String.class, "unit", false, "UNIT");
        public final static Property RoomNumber = new Property(20, String.class, "roomNumber", false, "ROOM_NUMBER");
        public final static Property StatusCode = new Property(21, String.class, "statusCode", false, "STATUS_CODE");
        public final static Property CancelReasonCode = new Property(22, String.class, "cancelReasonCode", false, "CANCEL_REASON_CODE");
        public final static Property CancelReason = new Property(23, String.class, "cancelReason", false, "CANCEL_REASON");
        public final static Property CancelTime = new Property(24, java.util.Date.class, "cancelTime", false, "CANCEL_TIME");
        public final static Property OrgName = new Property(25, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(26, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(27, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(28, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(29, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(30, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(31, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(32, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(33, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(34, String.class, "jsonDetail", false, "JSON_DETAIL");
    };


    public FamilyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_INFO\" (" + //
                "\"FAMILY_INFO_ID\" TEXT," + // 0: familyInfoId
                "\"CREATE_ORG_ID\" TEXT," + // 1: createOrgId
                "\"MANAGE_ORG_ID\" TEXT," + // 2: manageOrgId
                "\"FAMILY_RECORD_NO\" TEXT," + // 3: familyRecordNo
                "\"FAMILY_RECORD_SNO\" TEXT," + // 4: familyRecordSno
                "\"FAMILY_DOCTOR_ORG_ID\" TEXT," + // 5: familyDoctorOrgId
                "\"FAMILY_DOCTOR_TEAM_ID\" TEXT," + // 6: familyDoctorTeamId
                "\"RESP_DOCTOR_ID\" TEXT," + // 7: respDoctorId
                "\"RESP_DOCTOR_NAME\" TEXT," + // 8: respDoctorName
                "\"FAMILY_DOCTOR_END_DATE\" INTEGER," + // 9: familyDoctorEndDate
                "\"HOUSEHOLDER\" TEXT," + // 10: householder
                "\"HOUSEHOLDER_ID_NO\" TEXT," + // 11: householderIdNo
                "\"ADDRESS\" TEXT," + // 12: address
                "\"TEL_NO\" TEXT," + // 13: telNo
                "\"HOUSEHOLD_NO\" TEXT," + // 14: householdNo
                "\"FAMILY_SIZE\" INTEGER," + // 15: familySize
                "\"COMMITTEE\" TEXT," + // 16: committee
                "\"RESIDENTIAL\" TEXT," + // 17: residential
                "\"BUILDING\" TEXT," + // 18: building
                "\"UNIT\" TEXT," + // 19: unit
                "\"ROOM_NUMBER\" TEXT," + // 20: roomNumber
                "\"STATUS_CODE\" TEXT," + // 21: statusCode
                "\"CANCEL_REASON_CODE\" TEXT," + // 22: cancelReasonCode
                "\"CANCEL_REASON\" TEXT," + // 23: cancelReason
                "\"CANCEL_TIME\" INTEGER," + // 24: cancelTime
                "\"ORG_NAME\" TEXT," + // 25: orgName
                "\"CREATOR_ID\" TEXT," + // 26: creatorId
                "\"CREATOR\" TEXT," + // 27: creator
                "\"CREATE_TIME\" INTEGER," + // 28: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 29: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 30: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 31: modifierId
                "\"MODIFIER\" TEXT," + // 32: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 33: modifiedTime
                "\"JSON_DETAIL\" TEXT);"); // 34: jsonDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyInfo entity) {
        stmt.clearBindings();
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(1, familyInfoId);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(2, createOrgId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String familyRecordNo = entity.getFamilyRecordNo();
        if (familyRecordNo != null) {
            stmt.bindString(4, familyRecordNo);
        }
 
        String familyRecordSno = entity.getFamilyRecordSno();
        if (familyRecordSno != null) {
            stmt.bindString(5, familyRecordSno);
        }
 
        String familyDoctorOrgId = entity.getFamilyDoctorOrgId();
        if (familyDoctorOrgId != null) {
            stmt.bindString(6, familyDoctorOrgId);
        }
 
        String familyDoctorTeamId = entity.getFamilyDoctorTeamId();
        if (familyDoctorTeamId != null) {
            stmt.bindString(7, familyDoctorTeamId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(8, respDoctorId);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(9, respDoctorName);
        }
 
        java.util.Date familyDoctorEndDate = entity.getFamilyDoctorEndDate();
        if (familyDoctorEndDate != null) {
            stmt.bindLong(10, familyDoctorEndDate.getTime());
        }
 
        String householder = entity.getHouseholder();
        if (householder != null) {
            stmt.bindString(11, householder);
        }
 
        String householderIdNo = entity.getHouseholderIdNo();
        if (householderIdNo != null) {
            stmt.bindString(12, householderIdNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(14, telNo);
        }
 
        String householdNo = entity.getHouseholdNo();
        if (householdNo != null) {
            stmt.bindString(15, householdNo);
        }
 
        Integer familySize = entity.getFamilySize();
        if (familySize != null) {
            stmt.bindLong(16, familySize);
        }
 
        String committee = entity.getCommittee();
        if (committee != null) {
            stmt.bindString(17, committee);
        }
 
        String residential = entity.getResidential();
        if (residential != null) {
            stmt.bindString(18, residential);
        }
 
        String building = entity.getBuilding();
        if (building != null) {
            stmt.bindString(19, building);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(20, unit);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(21, roomNumber);
        }
 
        String statusCode = entity.getStatusCode();
        if (statusCode != null) {
            stmt.bindString(22, statusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(23, cancelReasonCode);
        }
 
        String cancelReason = entity.getCancelReason();
        if (cancelReason != null) {
            stmt.bindString(24, cancelReason);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(25, cancelTime.getTime());
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(26, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(27, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(28, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(29, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(30, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(31, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(32, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(33, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(34, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(35, jsonDetail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyInfo entity) {
        stmt.clearBindings();
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(1, familyInfoId);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(2, createOrgId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String familyRecordNo = entity.getFamilyRecordNo();
        if (familyRecordNo != null) {
            stmt.bindString(4, familyRecordNo);
        }
 
        String familyRecordSno = entity.getFamilyRecordSno();
        if (familyRecordSno != null) {
            stmt.bindString(5, familyRecordSno);
        }
 
        String familyDoctorOrgId = entity.getFamilyDoctorOrgId();
        if (familyDoctorOrgId != null) {
            stmt.bindString(6, familyDoctorOrgId);
        }
 
        String familyDoctorTeamId = entity.getFamilyDoctorTeamId();
        if (familyDoctorTeamId != null) {
            stmt.bindString(7, familyDoctorTeamId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(8, respDoctorId);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(9, respDoctorName);
        }
 
        java.util.Date familyDoctorEndDate = entity.getFamilyDoctorEndDate();
        if (familyDoctorEndDate != null) {
            stmt.bindLong(10, familyDoctorEndDate.getTime());
        }
 
        String householder = entity.getHouseholder();
        if (householder != null) {
            stmt.bindString(11, householder);
        }
 
        String householderIdNo = entity.getHouseholderIdNo();
        if (householderIdNo != null) {
            stmt.bindString(12, householderIdNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(14, telNo);
        }
 
        String householdNo = entity.getHouseholdNo();
        if (householdNo != null) {
            stmt.bindString(15, householdNo);
        }
 
        Integer familySize = entity.getFamilySize();
        if (familySize != null) {
            stmt.bindLong(16, familySize);
        }
 
        String committee = entity.getCommittee();
        if (committee != null) {
            stmt.bindString(17, committee);
        }
 
        String residential = entity.getResidential();
        if (residential != null) {
            stmt.bindString(18, residential);
        }
 
        String building = entity.getBuilding();
        if (building != null) {
            stmt.bindString(19, building);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(20, unit);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(21, roomNumber);
        }
 
        String statusCode = entity.getStatusCode();
        if (statusCode != null) {
            stmt.bindString(22, statusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(23, cancelReasonCode);
        }
 
        String cancelReason = entity.getCancelReason();
        if (cancelReason != null) {
            stmt.bindString(24, cancelReason);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(25, cancelTime.getTime());
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(26, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(27, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(28, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(29, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(30, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(31, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(32, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(33, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(34, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(35, jsonDetail);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FamilyInfo readEntity(Cursor cursor, int offset) {
        FamilyInfo entity = new FamilyInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // familyInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createOrgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // manageOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // familyRecordNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // familyRecordSno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // familyDoctorOrgId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // familyDoctorTeamId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // respDoctorId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // respDoctorName
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // familyDoctorEndDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // householder
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // householderIdNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // telNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // householdNo
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // familySize
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // committee
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // residential
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // building
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // unit
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // roomNumber
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // statusCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // cancelReasonCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // cancelReason
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // cancelTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // orgName
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // creatorId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // creator
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // createTime
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // modifiedOrgId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // modifiedOrgName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // modifierId
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // modifier
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // modifiedTime
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // jsonDetail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyInfo entity, int offset) {
        entity.setFamilyInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreateOrgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManageOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFamilyRecordNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFamilyRecordSno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFamilyDoctorOrgId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFamilyDoctorTeamId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRespDoctorId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRespDoctorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFamilyDoctorEndDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setHouseholder(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHouseholderIdNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTelNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHouseholdNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFamilySize(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCommittee(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setResidential(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBuilding(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUnit(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRoomNumber(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatusCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCancelReasonCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCancelReason(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCancelTime(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setOrgName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreatorId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCreator(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCreateTime(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setModifiedOrgId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setModifiedOrgName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setModifierId(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setModifier(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setModifiedTime(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setJsonDetail(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FamilyInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FamilyInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
