package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.family.FamilyMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_MEMBER".
*/
public class FamilyMemberDao extends AbstractDao<FamilyMember, Void> {

    public static final String TABLENAME = "FAMILY_MEMBER";

    /**
     * Properties of entity FamilyMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FamilyMemberId = new Property(0, String.class, "familyMemberId", false, "FAMILY_MEMBER_ID");
        public final static Property MemberNo = new Property(1, Integer.class, "memberNo", false, "MEMBER_NO");
        public final static Property FamilyId = new Property(2, String.class, "familyId", false, "FAMILY_ID");
        public final static Property PersonId = new Property(3, String.class, "personId", false, "PERSON_ID");
        public final static Property MoveInDate = new Property(4, java.util.Date.class, "moveInDate", false, "MOVE_IN_DATE");
        public final static Property MoveInReason = new Property(5, String.class, "moveInReason", false, "MOVE_IN_REASON");
        public final static Property MoveOutDate = new Property(6, java.util.Date.class, "moveOutDate", false, "MOVE_OUT_DATE");
        public final static Property MoveOutReason = new Property(7, String.class, "moveOutReason", false, "MOVE_OUT_REASON");
        public final static Property IsCancel = new Property(8, Integer.class, "isCancel", false, "IS_CANCEL");
    };


    public FamilyMemberDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_MEMBER\" (" + //
                "\"FAMILY_MEMBER_ID\" TEXT," + // 0: familyMemberId
                "\"MEMBER_NO\" INTEGER," + // 1: memberNo
                "\"FAMILY_ID\" TEXT," + // 2: familyId
                "\"PERSON_ID\" TEXT," + // 3: personId
                "\"MOVE_IN_DATE\" INTEGER," + // 4: moveInDate
                "\"MOVE_IN_REASON\" TEXT," + // 5: moveInReason
                "\"MOVE_OUT_DATE\" INTEGER," + // 6: moveOutDate
                "\"MOVE_OUT_REASON\" TEXT," + // 7: moveOutReason
                "\"IS_CANCEL\" INTEGER);"); // 8: isCancel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyMember entity) {
        stmt.clearBindings();
 
        String familyMemberId = entity.getFamilyMemberId();
        if (familyMemberId != null) {
            stmt.bindString(1, familyMemberId);
        }
 
        Integer memberNo = entity.getMemberNo();
        if (memberNo != null) {
            stmt.bindLong(2, memberNo);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(3, familyId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(4, personId);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(5, moveInDate.getTime());
        }
 
        String moveInReason = entity.getMoveInReason();
        if (moveInReason != null) {
            stmt.bindString(6, moveInReason);
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(7, moveOutDate.getTime());
        }
 
        String moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindString(8, moveOutReason);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(9, isCancel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyMember entity) {
        stmt.clearBindings();
 
        String familyMemberId = entity.getFamilyMemberId();
        if (familyMemberId != null) {
            stmt.bindString(1, familyMemberId);
        }
 
        Integer memberNo = entity.getMemberNo();
        if (memberNo != null) {
            stmt.bindLong(2, memberNo);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(3, familyId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(4, personId);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(5, moveInDate.getTime());
        }
 
        String moveInReason = entity.getMoveInReason();
        if (moveInReason != null) {
            stmt.bindString(6, moveInReason);
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(7, moveOutDate.getTime());
        }
 
        String moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindString(8, moveOutReason);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(9, isCancel);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FamilyMember readEntity(Cursor cursor, int offset) {
        FamilyMember entity = new FamilyMember( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // familyMemberId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // memberNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // familyId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // personId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // moveInDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // moveInReason
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // moveOutDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // moveOutReason
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // isCancel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyMember entity, int offset) {
        entity.setFamilyMemberId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMemberNo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFamilyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoveInDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setMoveInReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMoveOutDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setMoveOutReason(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCancel(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FamilyMember entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FamilyMember entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
