package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.diabetes.DiabetesInfoComp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIABETES_INFO_COMP".
*/
public class DiabetesInfoCompDao extends AbstractDao<DiabetesInfoComp, Void> {

    public static final String TABLENAME = "DIABETES_INFO_COMP";

    /**
     * Properties of entity DiabetesInfoComp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DiabetesInfoCompId = new Property(0, String.class, "diabetesInfoCompId", false, "DIABETES_INFO_COMP_ID");
        public final static Property DiabetesInfoId = new Property(1, String.class, "diabetesInfoId", false, "DIABETES_INFO_ID");
        public final static Property ComplicationId = new Property(2, String.class, "complicationId", false, "COMPLICATION_ID");
        public final static Property Complication = new Property(3, String.class, "complication", false, "COMPLICATION");
        public final static Property CurrentSituation = new Property(4, String.class, "currentSituation", false, "CURRENT_SITUATION");
        public final static Property DiagnoseDate = new Property(5, java.util.Date.class, "diagnoseDate", false, "DIAGNOSE_DATE");
        public final static Property TreatmentMethod = new Property(6, String.class, "treatmentMethod", false, "TREATMENT_METHOD");
    };


    public DiabetesInfoCompDao(DaoConfig config) {
        super(config);
    }
    
    public DiabetesInfoCompDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIABETES_INFO_COMP\" (" + //
                "\"DIABETES_INFO_COMP_ID\" TEXT," + // 0: diabetesInfoCompId
                "\"DIABETES_INFO_ID\" TEXT," + // 1: diabetesInfoId
                "\"COMPLICATION_ID\" TEXT," + // 2: complicationId
                "\"COMPLICATION\" TEXT," + // 3: complication
                "\"CURRENT_SITUATION\" TEXT," + // 4: currentSituation
                "\"DIAGNOSE_DATE\" INTEGER," + // 5: diagnoseDate
                "\"TREATMENT_METHOD\" TEXT);"); // 6: treatmentMethod
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIABETES_INFO_COMP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiabetesInfoComp entity) {
        stmt.clearBindings();
 
        String diabetesInfoCompId = entity.getDiabetesInfoCompId();
        if (diabetesInfoCompId != null) {
            stmt.bindString(1, diabetesInfoCompId);
        }
 
        String diabetesInfoId = entity.getDiabetesInfoId();
        if (diabetesInfoId != null) {
            stmt.bindString(2, diabetesInfoId);
        }
 
        String complicationId = entity.getComplicationId();
        if (complicationId != null) {
            stmt.bindString(3, complicationId);
        }
 
        String complication = entity.getComplication();
        if (complication != null) {
            stmt.bindString(4, complication);
        }
 
        String currentSituation = entity.getCurrentSituation();
        if (currentSituation != null) {
            stmt.bindString(5, currentSituation);
        }
 
        java.util.Date diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindLong(6, diagnoseDate.getTime());
        }
 
        String treatmentMethod = entity.getTreatmentMethod();
        if (treatmentMethod != null) {
            stmt.bindString(7, treatmentMethod);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiabetesInfoComp entity) {
        stmt.clearBindings();
 
        String diabetesInfoCompId = entity.getDiabetesInfoCompId();
        if (diabetesInfoCompId != null) {
            stmt.bindString(1, diabetesInfoCompId);
        }
 
        String diabetesInfoId = entity.getDiabetesInfoId();
        if (diabetesInfoId != null) {
            stmt.bindString(2, diabetesInfoId);
        }
 
        String complicationId = entity.getComplicationId();
        if (complicationId != null) {
            stmt.bindString(3, complicationId);
        }
 
        String complication = entity.getComplication();
        if (complication != null) {
            stmt.bindString(4, complication);
        }
 
        String currentSituation = entity.getCurrentSituation();
        if (currentSituation != null) {
            stmt.bindString(5, currentSituation);
        }
 
        java.util.Date diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindLong(6, diagnoseDate.getTime());
        }
 
        String treatmentMethod = entity.getTreatmentMethod();
        if (treatmentMethod != null) {
            stmt.bindString(7, treatmentMethod);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DiabetesInfoComp readEntity(Cursor cursor, int offset) {
        DiabetesInfoComp entity = new DiabetesInfoComp( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // diabetesInfoCompId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // diabetesInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // complicationId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // complication
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // currentSituation
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // diagnoseDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // treatmentMethod
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiabetesInfoComp entity, int offset) {
        entity.setDiabetesInfoCompId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDiabetesInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComplicationId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComplication(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentSituation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiagnoseDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTreatmentMethod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DiabetesInfoComp entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DiabetesInfoComp entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
