package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.tuberculosis.TuberculosisInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TUBERCULOSIS_INFO".
*/
public class TuberculosisInfoDao extends AbstractDao<TuberculosisInfo, Void> {

    public static final String TABLENAME = "TUBERCULOSIS_INFO";

    /**
     * Properties of entity TuberculosisInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TuberculosisInfoId = new Property(0, String.class, "tuberculosisInfoId", false, "TUBERCULOSIS_INFO_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ManageOrgId = new Property(2, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property TuberculosisInfoNo = new Property(3, String.class, "tuberculosisInfoNo", false, "TUBERCULOSIS_INFO_NO");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Age = new Property(5, Integer.class, "age", false, "AGE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Familyname = new Property(8, String.class, "familyname", false, "FAMILYNAME");
        public final static Property Familyrelation = new Property(9, String.class, "familyrelation", false, "FAMILYRELATION");
        public final static Property Famliyphone = new Property(10, String.class, "famliyphone", false, "FAMLIYPHONE");
        public final static Property CommitOrg = new Property(11, String.class, "commitOrg", false, "COMMIT_ORG");
        public final static Property CommitDoctor = new Property(12, String.class, "commitDoctor", false, "COMMIT_DOCTOR");
        public final static Property CommitDate = new Property(13, java.util.Date.class, "commitDate", false, "COMMIT_DATE");
        public final static Property HasFirstVisit = new Property(14, String.class, "hasFirstVisit", false, "HAS_FIRST_VISIT");
        public final static Property StopTreatmentDate = new Property(15, java.util.Date.class, "stopTreatmentDate", false, "STOP_TREATMENT_DATE");
        public final static Property StopTreatmentReasonCode = new Property(16, String.class, "stopTreatmentReasonCode", false, "STOP_TREATMENT_REASON_CODE");
        public final static Property ShouldFollowupTimes = new Property(17, Integer.class, "shouldFollowupTimes", false, "SHOULD_FOLLOWUP_TIMES");
        public final static Property ActualFollowupTimes = new Property(18, Integer.class, "actualFollowupTimes", false, "ACTUAL_FOLLOWUP_TIMES");
        public final static Property ShouldDrugTimes = new Property(19, Integer.class, "shouldDrugTimes", false, "SHOULD_DRUG_TIMES");
        public final static Property ActualDrugTimes = new Property(20, Integer.class, "actualDrugTimes", false, "ACTUAL_DRUG_TIMES");
        public final static Property DrugRatio = new Property(21, Integer.class, "drugRatio", false, "DRUG_RATIO");
        public final static Property AssessDoctorId = new Property(22, String.class, "assessDoctorId", false, "ASSESS_DOCTOR_ID");
        public final static Property AssessDoctorName = new Property(23, String.class, "assessDoctorName", false, "ASSESS_DOCTOR_NAME");
        public final static Property BeginManageDate = new Property(24, java.util.Date.class, "beginManageDate", false, "BEGIN_MANAGE_DATE");
        public final static Property CaseStatus = new Property(25, String.class, "caseStatus", false, "CASE_STATUS");
        public final static Property LastVisitDate = new Property(26, java.util.Date.class, "lastVisitDate", false, "LAST_VISIT_DATE");
        public final static Property NextVisitDate = new Property(27, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property IsCancel = new Property(28, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(29, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(30, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(31, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(32, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(33, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(34, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(35, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(36, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(37, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(38, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property IsAutoBuild = new Property(39, String.class, "isAutoBuild", false, "IS_AUTO_BUILD");
    };


    public TuberculosisInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TuberculosisInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TUBERCULOSIS_INFO\" (" + //
                "\"TUBERCULOSIS_INFO_ID\" TEXT," + // 0: tuberculosisInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"MANAGE_ORG_ID\" TEXT," + // 2: manageOrgId
                "\"TUBERCULOSIS_INFO_NO\" TEXT," + // 3: tuberculosisInfoNo
                "\"NAME\" TEXT," + // 4: name
                "\"AGE\" INTEGER," + // 5: age
                "\"ADDRESS\" TEXT," + // 6: address
                "\"PHONE\" TEXT," + // 7: phone
                "\"FAMILYNAME\" TEXT," + // 8: familyname
                "\"FAMILYRELATION\" TEXT," + // 9: familyrelation
                "\"FAMLIYPHONE\" TEXT," + // 10: famliyphone
                "\"COMMIT_ORG\" TEXT," + // 11: commitOrg
                "\"COMMIT_DOCTOR\" TEXT," + // 12: commitDoctor
                "\"COMMIT_DATE\" INTEGER," + // 13: commitDate
                "\"HAS_FIRST_VISIT\" TEXT," + // 14: hasFirstVisit
                "\"STOP_TREATMENT_DATE\" INTEGER," + // 15: stopTreatmentDate
                "\"STOP_TREATMENT_REASON_CODE\" TEXT," + // 16: stopTreatmentReasonCode
                "\"SHOULD_FOLLOWUP_TIMES\" INTEGER," + // 17: shouldFollowupTimes
                "\"ACTUAL_FOLLOWUP_TIMES\" INTEGER," + // 18: actualFollowupTimes
                "\"SHOULD_DRUG_TIMES\" INTEGER," + // 19: shouldDrugTimes
                "\"ACTUAL_DRUG_TIMES\" INTEGER," + // 20: actualDrugTimes
                "\"DRUG_RATIO\" INTEGER," + // 21: drugRatio
                "\"ASSESS_DOCTOR_ID\" TEXT," + // 22: assessDoctorId
                "\"ASSESS_DOCTOR_NAME\" TEXT," + // 23: assessDoctorName
                "\"BEGIN_MANAGE_DATE\" INTEGER," + // 24: beginManageDate
                "\"CASE_STATUS\" TEXT," + // 25: caseStatus
                "\"LAST_VISIT_DATE\" INTEGER," + // 26: lastVisitDate
                "\"NEXT_VISIT_DATE\" INTEGER," + // 27: nextVisitDate
                "\"IS_CANCEL\" INTEGER," + // 28: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 29: createOrgId
                "\"ORG_NAME\" TEXT," + // 30: orgName
                "\"CREATOR_ID\" TEXT," + // 31: creatorId
                "\"CREATOR\" TEXT," + // 32: creator
                "\"CREATE_TIME\" INTEGER," + // 33: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 34: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 35: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 36: modifierId
                "\"MODIFIER\" TEXT," + // 37: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 38: modifiedTime
                "\"IS_AUTO_BUILD\" TEXT);"); // 39: isAutoBuild
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TUBERCULOSIS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TuberculosisInfo entity) {
        stmt.clearBindings();
 
        String tuberculosisInfoId = entity.getTuberculosisInfoId();
        if (tuberculosisInfoId != null) {
            stmt.bindString(1, tuberculosisInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String tuberculosisInfoNo = entity.getTuberculosisInfoNo();
        if (tuberculosisInfoNo != null) {
            stmt.bindString(4, tuberculosisInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String familyname = entity.getFamilyname();
        if (familyname != null) {
            stmt.bindString(9, familyname);
        }
 
        String familyrelation = entity.getFamilyrelation();
        if (familyrelation != null) {
            stmt.bindString(10, familyrelation);
        }
 
        String famliyphone = entity.getFamliyphone();
        if (famliyphone != null) {
            stmt.bindString(11, famliyphone);
        }
 
        String commitOrg = entity.getCommitOrg();
        if (commitOrg != null) {
            stmt.bindString(12, commitOrg);
        }
 
        String commitDoctor = entity.getCommitDoctor();
        if (commitDoctor != null) {
            stmt.bindString(13, commitDoctor);
        }
 
        java.util.Date commitDate = entity.getCommitDate();
        if (commitDate != null) {
            stmt.bindLong(14, commitDate.getTime());
        }
 
        String hasFirstVisit = entity.getHasFirstVisit();
        if (hasFirstVisit != null) {
            stmt.bindString(15, hasFirstVisit);
        }
 
        java.util.Date stopTreatmentDate = entity.getStopTreatmentDate();
        if (stopTreatmentDate != null) {
            stmt.bindLong(16, stopTreatmentDate.getTime());
        }
 
        String stopTreatmentReasonCode = entity.getStopTreatmentReasonCode();
        if (stopTreatmentReasonCode != null) {
            stmt.bindString(17, stopTreatmentReasonCode);
        }
 
        Integer shouldFollowupTimes = entity.getShouldFollowupTimes();
        if (shouldFollowupTimes != null) {
            stmt.bindLong(18, shouldFollowupTimes);
        }
 
        Integer actualFollowupTimes = entity.getActualFollowupTimes();
        if (actualFollowupTimes != null) {
            stmt.bindLong(19, actualFollowupTimes);
        }
 
        Integer shouldDrugTimes = entity.getShouldDrugTimes();
        if (shouldDrugTimes != null) {
            stmt.bindLong(20, shouldDrugTimes);
        }
 
        Integer actualDrugTimes = entity.getActualDrugTimes();
        if (actualDrugTimes != null) {
            stmt.bindLong(21, actualDrugTimes);
        }
 
        Integer drugRatio = entity.getDrugRatio();
        if (drugRatio != null) {
            stmt.bindLong(22, drugRatio);
        }
 
        String assessDoctorId = entity.getAssessDoctorId();
        if (assessDoctorId != null) {
            stmt.bindString(23, assessDoctorId);
        }
 
        String assessDoctorName = entity.getAssessDoctorName();
        if (assessDoctorName != null) {
            stmt.bindString(24, assessDoctorName);
        }
 
        java.util.Date beginManageDate = entity.getBeginManageDate();
        if (beginManageDate != null) {
            stmt.bindLong(25, beginManageDate.getTime());
        }
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(26, caseStatus);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(27, lastVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(28, nextVisitDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(29, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(30, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(31, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(32, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(33, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(34, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(35, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(36, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(37, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(38, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(39, modifiedTime.getTime());
        }
 
        String isAutoBuild = entity.getIsAutoBuild();
        if (isAutoBuild != null) {
            stmt.bindString(40, isAutoBuild);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TuberculosisInfo entity) {
        stmt.clearBindings();
 
        String tuberculosisInfoId = entity.getTuberculosisInfoId();
        if (tuberculosisInfoId != null) {
            stmt.bindString(1, tuberculosisInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String tuberculosisInfoNo = entity.getTuberculosisInfoNo();
        if (tuberculosisInfoNo != null) {
            stmt.bindString(4, tuberculosisInfoNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String familyname = entity.getFamilyname();
        if (familyname != null) {
            stmt.bindString(9, familyname);
        }
 
        String familyrelation = entity.getFamilyrelation();
        if (familyrelation != null) {
            stmt.bindString(10, familyrelation);
        }
 
        String famliyphone = entity.getFamliyphone();
        if (famliyphone != null) {
            stmt.bindString(11, famliyphone);
        }
 
        String commitOrg = entity.getCommitOrg();
        if (commitOrg != null) {
            stmt.bindString(12, commitOrg);
        }
 
        String commitDoctor = entity.getCommitDoctor();
        if (commitDoctor != null) {
            stmt.bindString(13, commitDoctor);
        }
 
        java.util.Date commitDate = entity.getCommitDate();
        if (commitDate != null) {
            stmt.bindLong(14, commitDate.getTime());
        }
 
        String hasFirstVisit = entity.getHasFirstVisit();
        if (hasFirstVisit != null) {
            stmt.bindString(15, hasFirstVisit);
        }
 
        java.util.Date stopTreatmentDate = entity.getStopTreatmentDate();
        if (stopTreatmentDate != null) {
            stmt.bindLong(16, stopTreatmentDate.getTime());
        }
 
        String stopTreatmentReasonCode = entity.getStopTreatmentReasonCode();
        if (stopTreatmentReasonCode != null) {
            stmt.bindString(17, stopTreatmentReasonCode);
        }
 
        Integer shouldFollowupTimes = entity.getShouldFollowupTimes();
        if (shouldFollowupTimes != null) {
            stmt.bindLong(18, shouldFollowupTimes);
        }
 
        Integer actualFollowupTimes = entity.getActualFollowupTimes();
        if (actualFollowupTimes != null) {
            stmt.bindLong(19, actualFollowupTimes);
        }
 
        Integer shouldDrugTimes = entity.getShouldDrugTimes();
        if (shouldDrugTimes != null) {
            stmt.bindLong(20, shouldDrugTimes);
        }
 
        Integer actualDrugTimes = entity.getActualDrugTimes();
        if (actualDrugTimes != null) {
            stmt.bindLong(21, actualDrugTimes);
        }
 
        Integer drugRatio = entity.getDrugRatio();
        if (drugRatio != null) {
            stmt.bindLong(22, drugRatio);
        }
 
        String assessDoctorId = entity.getAssessDoctorId();
        if (assessDoctorId != null) {
            stmt.bindString(23, assessDoctorId);
        }
 
        String assessDoctorName = entity.getAssessDoctorName();
        if (assessDoctorName != null) {
            stmt.bindString(24, assessDoctorName);
        }
 
        java.util.Date beginManageDate = entity.getBeginManageDate();
        if (beginManageDate != null) {
            stmt.bindLong(25, beginManageDate.getTime());
        }
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(26, caseStatus);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(27, lastVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(28, nextVisitDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(29, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(30, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(31, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(32, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(33, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(34, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(35, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(36, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(37, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(38, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(39, modifiedTime.getTime());
        }
 
        String isAutoBuild = entity.getIsAutoBuild();
        if (isAutoBuild != null) {
            stmt.bindString(40, isAutoBuild);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TuberculosisInfo readEntity(Cursor cursor, int offset) {
        TuberculosisInfo entity = new TuberculosisInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tuberculosisInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // manageOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tuberculosisInfoNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // familyname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // familyrelation
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // famliyphone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // commitOrg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // commitDoctor
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // commitDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // hasFirstVisit
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // stopTreatmentDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // stopTreatmentReasonCode
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // shouldFollowupTimes
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // actualFollowupTimes
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // shouldDrugTimes
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // actualDrugTimes
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // drugRatio
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // assessDoctorId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // assessDoctorName
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // beginManageDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // caseStatus
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // lastVisitDate
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // nextVisitDate
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // isCancel
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // createOrgId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // orgName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // creatorId
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // creator
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // createTime
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // modifiedOrgId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // modifiedOrgName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modifierId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // modifier
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)), // modifiedTime
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // isAutoBuild
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TuberculosisInfo entity, int offset) {
        entity.setTuberculosisInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManageOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTuberculosisInfoNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFamilyname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFamilyrelation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFamliyphone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCommitOrg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCommitDoctor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCommitDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setHasFirstVisit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStopTreatmentDate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setStopTreatmentReasonCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShouldFollowupTimes(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setActualFollowupTimes(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setShouldDrugTimes(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setActualDrugTimes(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setDrugRatio(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAssessDoctorId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAssessDoctorName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBeginManageDate(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setCaseStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLastVisitDate(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setNextVisitDate(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setIsCancel(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setCreateOrgId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setOrgName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCreatorId(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCreator(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCreateTime(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setModifiedOrgId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setModifiedOrgName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModifierId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModifier(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setModifiedTime(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
        entity.setIsAutoBuild(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TuberculosisInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TuberculosisInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
