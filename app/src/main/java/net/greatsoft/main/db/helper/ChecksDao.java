package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.Checks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECKS".
*/
public class ChecksDao extends AbstractDao<Checks, Void> {

    public static final String TABLENAME = "CHECKS";

    /**
     * Properties of entity Checks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property IsDefault = new Property(3, String.class, "isDefault", false, "IS_DEFAULT");
        public final static Property IsOther = new Property(4, String.class, "isOther", false, "IS_OTHER");
        public final static Property SerialNumber = new Property(5, Integer.class, "serialNumber", false, "SERIAL_NUMBER");
    };


    public ChecksDao(DaoConfig config) {
        super(config);
    }
    
    public ChecksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECKS\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"CODE\" TEXT," + // 1: code
                "\"VALUE\" TEXT," + // 2: value
                "\"IS_DEFAULT\" TEXT," + // 3: isDefault
                "\"IS_OTHER\" TEXT," + // 4: isOther
                "\"SERIAL_NUMBER\" INTEGER);"); // 5: serialNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Checks entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindString(4, isDefault);
        }
 
        String isOther = entity.getIsOther();
        if (isOther != null) {
            stmt.bindString(5, isOther);
        }
 
        Integer serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindLong(6, serialNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Checks entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindString(4, isDefault);
        }
 
        String isOther = entity.getIsOther();
        if (isOther != null) {
            stmt.bindString(5, isOther);
        }
 
        Integer serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindLong(6, serialNumber);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Checks readEntity(Cursor cursor, int offset) {
        Checks entity = new Checks( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isDefault
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // isOther
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // serialNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Checks entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDefault(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsOther(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSerialNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Checks entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Checks entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
