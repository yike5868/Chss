package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.family.FamilyDoctor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_DOCTOR".
*/
public class FamilyDoctorDao extends AbstractDao<FamilyDoctor, Void> {

    public static final String TABLENAME = "FAMILY_DOCTOR";

    /**
     * Properties of entity FamilyDoctor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FamilyDoctorId = new Property(0, String.class, "familyDoctorId", false, "FAMILY_DOCTOR_ID");
        public final static Property FamilyId = new Property(1, String.class, "familyId", false, "FAMILY_ID");
        public final static Property FamilyDoctorTeamId = new Property(2, String.class, "familyDoctorTeamId", false, "FAMILY_DOCTOR_TEAM_ID");
        public final static Property StartDate = new Property(3, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(4, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property FamilyContractor = new Property(5, String.class, "familyContractor", false, "FAMILY_CONTRACTOR");
        public final static Property OrgContractor = new Property(6, String.class, "orgContractor", false, "ORG_CONTRACTOR");
        public final static Property ContractModeCode = new Property(7, String.class, "contractModeCode", false, "CONTRACT_MODE_CODE");
    };


    public FamilyDoctorDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyDoctorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_DOCTOR\" (" + //
                "\"FAMILY_DOCTOR_ID\" TEXT," + // 0: familyDoctorId
                "\"FAMILY_ID\" TEXT," + // 1: familyId
                "\"FAMILY_DOCTOR_TEAM_ID\" TEXT," + // 2: familyDoctorTeamId
                "\"START_DATE\" INTEGER," + // 3: startDate
                "\"END_DATE\" INTEGER," + // 4: endDate
                "\"FAMILY_CONTRACTOR\" TEXT," + // 5: familyContractor
                "\"ORG_CONTRACTOR\" TEXT," + // 6: orgContractor
                "\"CONTRACT_MODE_CODE\" TEXT);"); // 7: contractModeCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_DOCTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyDoctor entity) {
        stmt.clearBindings();
 
        String familyDoctorId = entity.getFamilyDoctorId();
        if (familyDoctorId != null) {
            stmt.bindString(1, familyDoctorId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(2, familyId);
        }
 
        String familyDoctorTeamId = entity.getFamilyDoctorTeamId();
        if (familyDoctorTeamId != null) {
            stmt.bindString(3, familyDoctorTeamId);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(4, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(5, endDate.getTime());
        }
 
        String familyContractor = entity.getFamilyContractor();
        if (familyContractor != null) {
            stmt.bindString(6, familyContractor);
        }
 
        String orgContractor = entity.getOrgContractor();
        if (orgContractor != null) {
            stmt.bindString(7, orgContractor);
        }
 
        String contractModeCode = entity.getContractModeCode();
        if (contractModeCode != null) {
            stmt.bindString(8, contractModeCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyDoctor entity) {
        stmt.clearBindings();
 
        String familyDoctorId = entity.getFamilyDoctorId();
        if (familyDoctorId != null) {
            stmt.bindString(1, familyDoctorId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(2, familyId);
        }
 
        String familyDoctorTeamId = entity.getFamilyDoctorTeamId();
        if (familyDoctorTeamId != null) {
            stmt.bindString(3, familyDoctorTeamId);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(4, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(5, endDate.getTime());
        }
 
        String familyContractor = entity.getFamilyContractor();
        if (familyContractor != null) {
            stmt.bindString(6, familyContractor);
        }
 
        String orgContractor = entity.getOrgContractor();
        if (orgContractor != null) {
            stmt.bindString(7, orgContractor);
        }
 
        String contractModeCode = entity.getContractModeCode();
        if (contractModeCode != null) {
            stmt.bindString(8, contractModeCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FamilyDoctor readEntity(Cursor cursor, int offset) {
        FamilyDoctor entity = new FamilyDoctor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // familyDoctorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // familyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // familyDoctorTeamId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // familyContractor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orgContractor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // contractModeCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyDoctor entity, int offset) {
        entity.setFamilyDoctorId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFamilyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFamilyDoctorTeamId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFamilyContractor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrgContractor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContractModeCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FamilyDoctor entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FamilyDoctor entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
