package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_INFO".
*/
public class PersonInfoDao extends AbstractDao<PersonInfo, Void> {

    public static final String TABLENAME = "PERSON_INFO";

    /**
     * Properties of entity PersonInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonInfoId = new Property(0, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ManageOrgId = new Property(1, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property PersonInfoNo = new Property(2, String.class, "personInfoNo", false, "PERSON_INFO_NO");
        public final static Property PersonInfoSno = new Property(3, String.class, "personInfoSno", false, "PERSON_INFO_SNO");
        public final static Property HealthcareOrg = new Property(4, String.class, "healthcareOrg", false, "HEALTHCARE_ORG");
        public final static Property CardNo = new Property(5, String.class, "cardNo", false, "CARD_NO");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property FormerName = new Property(7, String.class, "formerName", false, "FORMER_NAME");
        public final static Property SexCode = new Property(8, String.class, "sexCode", false, "SEX_CODE");
        public final static Property SexValue = new Property(9, String.class, "sexValue", false, "SEX_VALUE");
        public final static Property Birthday = new Property(10, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property IdNo = new Property(11, String.class, "idNo", false, "ID_NO");
        public final static Property WorkUnit = new Property(12, String.class, "workUnit", false, "WORK_UNIT");
        public final static Property TelNo = new Property(13, String.class, "telNo", false, "TEL_NO");
        public final static Property FixedPhones = new Property(14, String.class, "fixedPhones", false, "FIXED_PHONES");
        public final static Property ContactName = new Property(15, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactTelNo = new Property(16, String.class, "contactTelNo", false, "CONTACT_TEL_NO");
        public final static Property ResidenceTypeCode = new Property(17, String.class, "residenceTypeCode", false, "RESIDENCE_TYPE_CODE");
        public final static Property HouseholdTypeCode = new Property(18, String.class, "householdTypeCode", false, "HOUSEHOLD_TYPE_CODE");
        public final static Property NationalityCode = new Property(19, String.class, "nationalityCode", false, "NATIONALITY_CODE");
        public final static Property NationalityValue = new Property(20, String.class, "nationalityValue", false, "NATIONALITY_VALUE");
        public final static Property AboCode = new Property(21, String.class, "aboCode", false, "ABO_CODE");
        public final static Property RhCode = new Property(22, String.class, "rhCode", false, "RH_CODE");
        public final static Property RelationCode = new Property(23, String.class, "relationCode", false, "RELATION_CODE");
        public final static Property RelationValue = new Property(24, String.class, "relationValue", false, "RELATION_VALUE");
        public final static Property EducationCode = new Property(25, String.class, "educationCode", false, "EDUCATION_CODE");
        public final static Property OccupationCode = new Property(26, String.class, "occupationCode", false, "OCCUPATION_CODE");
        public final static Property MarriageCode = new Property(27, String.class, "marriageCode", false, "MARRIAGE_CODE");
        public final static Property GeneticDiseaseHistoryCode = new Property(28, String.class, "geneticDiseaseHistoryCode", false, "GENETIC_DISEASE_HISTORY_CODE");
        public final static Property GeneticDiseaseHistoryName = new Property(29, String.class, "geneticDiseaseHistoryName", false, "GENETIC_DISEASE_HISTORY_NAME");
        public final static Property KitchenExhaustCode = new Property(30, String.class, "kitchenExhaustCode", false, "KITCHEN_EXHAUST_CODE");
        public final static Property ToiletCode = new Property(31, String.class, "toiletCode", false, "TOILET_CODE");
        public final static Property LivestockFenceCode = new Property(32, String.class, "livestockFenceCode", false, "LIVESTOCK_FENCE_CODE");
        public final static Property ExamCount = new Property(33, Integer.class, "examCount", false, "EXAM_COUNT");
        public final static Property LastHealthExamDate = new Property(34, java.util.Date.class, "lastHealthExamDate", false, "LAST_HEALTH_EXAM_DATE");
        public final static Property IsChild = new Property(35, Integer.class, "isChild", false, "IS_CHILD");
        public final static Property IsChildDate = new Property(36, java.util.Date.class, "isChildDate", false, "IS_CHILD_DATE");
        public final static Property IsMaternal = new Property(37, Integer.class, "isMaternal", false, "IS_MATERNAL");
        public final static Property IsMaternalDate = new Property(38, java.util.Date.class, "isMaternalDate", false, "IS_MATERNAL_DATE");
        public final static Property IsElder = new Property(39, Integer.class, "isElder", false, "IS_ELDER");
        public final static Property IsElderDate = new Property(40, java.util.Date.class, "isElderDate", false, "IS_ELDER_DATE");
        public final static Property IsHypertension = new Property(41, Integer.class, "isHypertension", false, "IS_HYPERTENSION");
        public final static Property IsHypertensionDate = new Property(42, java.util.Date.class, "isHypertensionDate", false, "IS_HYPERTENSION_DATE");
        public final static Property IsDiabetes = new Property(43, Integer.class, "isDiabetes", false, "IS_DIABETES");
        public final static Property IsDiabetesDate = new Property(44, java.util.Date.class, "isDiabetesDate", false, "IS_DIABETES_DATE");
        public final static Property IsSmi = new Property(45, Integer.class, "isSmi", false, "IS_SMI");
        public final static Property IsSmiDate = new Property(46, java.util.Date.class, "isSmiDate", false, "IS_SMI_DATE");
        public final static Property IsTuberculosis = new Property(47, Integer.class, "isTuberculosis", false, "IS_TUBERCULOSIS");
        public final static Property IsTuberculosisDate = new Property(48, java.util.Date.class, "isTuberculosisDate", false, "IS_TUBERCULOSIS_DATE");
        public final static Property IsDeath = new Property(49, Integer.class, "isDeath", false, "IS_DEATH");
        public final static Property DeathDate = new Property(50, java.util.Date.class, "deathDate", false, "DEATH_DATE");
        public final static Property Address = new Property(51, String.class, "address", false, "ADDRESS");
        public final static Property HouseholdAddress = new Property(52, String.class, "householdAddress", false, "HOUSEHOLD_ADDRESS");
        public final static Property PaperArchiveDate = new Property(53, java.util.Date.class, "paperArchiveDate", false, "PAPER_ARCHIVE_DATE");
        public final static Property PaperCardNum = new Property(54, String.class, "paperCardNum", false, "PAPER_CARD_NUM");
        public final static Property Committee = new Property(55, String.class, "committee", false, "COMMITTEE");
        public final static Property CommitteeCN = new Property(56, String.class, "committeeCN", false, "COMMITTEE_CN");
        public final static Property Residential = new Property(57, String.class, "residential", false, "RESIDENTIAL");
        public final static Property ResidentialCN = new Property(58, String.class, "residentialCN", false, "RESIDENTIAL_CN");
        public final static Property Building = new Property(59, String.class, "building", false, "BUILDING");
        public final static Property BuildingCN = new Property(60, String.class, "buildingCN", false, "BUILDING_CN");
        public final static Property FamilyInfoId = new Property(61, String.class, "familyInfoId", false, "FAMILY_INFO_ID");
        public final static Property RespDoctorId = new Property(62, String.class, "respDoctorId", false, "RESP_DOCTOR_ID");
        public final static Property PhotoUrl = new Property(63, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property StatusCode = new Property(64, String.class, "statusCode", false, "STATUS_CODE");
        public final static Property CancelReasonCode = new Property(65, String.class, "cancelReasonCode", false, "CANCEL_REASON_CODE");
        public final static Property CancelReason = new Property(66, String.class, "cancelReason", false, "CANCEL_REASON");
        public final static Property CancelTime = new Property(67, java.util.Date.class, "cancelTime", false, "CANCEL_TIME");
        public final static Property CreateOrgId = new Property(68, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(69, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgCode = new Property(70, String.class, "orgCode", false, "ORG_CODE");
        public final static Property CreatorId = new Property(71, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(72, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(73, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(74, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(75, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(76, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(77, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(78, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property PersonInfoCode = new Property(79, String.class, "personInfoCode", false, "PERSON_INFO_CODE");
        public final static Property IsHyperHr = new Property(80, Integer.class, "isHyperHr", false, "IS_HYPER_HR");
        public final static Property IsHyperHrDate = new Property(81, java.util.Date.class, "isHyperHrDate", false, "IS_HYPER_HR_DATE");
        public final static Property IsDiabetesHr = new Property(82, Integer.class, "isDiabetesHr", false, "IS_DIABETES_HR");
        public final static Property IsDiabetesHrDate = new Property(83, java.util.Date.class, "isDiabetesHrDate", false, "IS_DIABETES_HR_DATE");
        public final static Property IsChd = new Property(84, Integer.class, "isChd", false, "IS_CHD");
        public final static Property IsChdDate = new Property(85, java.util.Date.class, "isChdDate", false, "IS_CHD_DATE");
        public final static Property IsCa = new Property(86, Integer.class, "isCa", false, "IS_CA");
        public final static Property IsCaDate = new Property(87, java.util.Date.class, "isCaDate", false, "IS_CA_DATE");
        public final static Property JsonDetail = new Property(88, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property IsDisabilityEyesight = new Property(89, Integer.class, "isDisabilityEyesight", false, "IS_DISABILITY_EYESIGHT");
        public final static Property IsDisabilityHearing = new Property(90, Integer.class, "isDisabilityHearing", false, "IS_DISABILITY_HEARING");
        public final static Property IsDisabilityLanguage = new Property(91, Integer.class, "isDisabilityLanguage", false, "IS_DISABILITY_LANGUAGE");
        public final static Property IsDisabilityLimbs = new Property(92, Integer.class, "isDisabilityLimbs", false, "IS_DISABILITY_LIMBS");
        public final static Property IsDisabilityBrain = new Property(93, Integer.class, "isDisabilityBrain", false, "IS_DISABILITY_BRAIN");
        public final static Property IsDisabilityMind = new Property(94, Integer.class, "isDisabilityMind", false, "IS_DISABILITY_MIND");
    };


    public PersonInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PersonInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_INFO\" (" + //
                "\"PERSON_INFO_ID\" TEXT," + // 0: personInfoId
                "\"MANAGE_ORG_ID\" TEXT," + // 1: manageOrgId
                "\"PERSON_INFO_NO\" TEXT," + // 2: personInfoNo
                "\"PERSON_INFO_SNO\" TEXT," + // 3: personInfoSno
                "\"HEALTHCARE_ORG\" TEXT," + // 4: healthcareOrg
                "\"CARD_NO\" TEXT," + // 5: cardNo
                "\"NAME\" TEXT," + // 6: name
                "\"FORMER_NAME\" TEXT," + // 7: formerName
                "\"SEX_CODE\" TEXT," + // 8: sexCode
                "\"SEX_VALUE\" TEXT," + // 9: sexValue
                "\"BIRTHDAY\" INTEGER," + // 10: birthday
                "\"ID_NO\" TEXT," + // 11: idNo
                "\"WORK_UNIT\" TEXT," + // 12: workUnit
                "\"TEL_NO\" TEXT," + // 13: telNo
                "\"FIXED_PHONES\" TEXT," + // 14: fixedPhones
                "\"CONTACT_NAME\" TEXT," + // 15: contactName
                "\"CONTACT_TEL_NO\" TEXT," + // 16: contactTelNo
                "\"RESIDENCE_TYPE_CODE\" TEXT," + // 17: residenceTypeCode
                "\"HOUSEHOLD_TYPE_CODE\" TEXT," + // 18: householdTypeCode
                "\"NATIONALITY_CODE\" TEXT," + // 19: nationalityCode
                "\"NATIONALITY_VALUE\" TEXT," + // 20: nationalityValue
                "\"ABO_CODE\" TEXT," + // 21: aboCode
                "\"RH_CODE\" TEXT," + // 22: rhCode
                "\"RELATION_CODE\" TEXT," + // 23: relationCode
                "\"RELATION_VALUE\" TEXT," + // 24: relationValue
                "\"EDUCATION_CODE\" TEXT," + // 25: educationCode
                "\"OCCUPATION_CODE\" TEXT," + // 26: occupationCode
                "\"MARRIAGE_CODE\" TEXT," + // 27: marriageCode
                "\"GENETIC_DISEASE_HISTORY_CODE\" TEXT," + // 28: geneticDiseaseHistoryCode
                "\"GENETIC_DISEASE_HISTORY_NAME\" TEXT," + // 29: geneticDiseaseHistoryName
                "\"KITCHEN_EXHAUST_CODE\" TEXT," + // 30: kitchenExhaustCode
                "\"TOILET_CODE\" TEXT," + // 31: toiletCode
                "\"LIVESTOCK_FENCE_CODE\" TEXT," + // 32: livestockFenceCode
                "\"EXAM_COUNT\" INTEGER," + // 33: examCount
                "\"LAST_HEALTH_EXAM_DATE\" INTEGER," + // 34: lastHealthExamDate
                "\"IS_CHILD\" INTEGER," + // 35: isChild
                "\"IS_CHILD_DATE\" INTEGER," + // 36: isChildDate
                "\"IS_MATERNAL\" INTEGER," + // 37: isMaternal
                "\"IS_MATERNAL_DATE\" INTEGER," + // 38: isMaternalDate
                "\"IS_ELDER\" INTEGER," + // 39: isElder
                "\"IS_ELDER_DATE\" INTEGER," + // 40: isElderDate
                "\"IS_HYPERTENSION\" INTEGER," + // 41: isHypertension
                "\"IS_HYPERTENSION_DATE\" INTEGER," + // 42: isHypertensionDate
                "\"IS_DIABETES\" INTEGER," + // 43: isDiabetes
                "\"IS_DIABETES_DATE\" INTEGER," + // 44: isDiabetesDate
                "\"IS_SMI\" INTEGER," + // 45: isSmi
                "\"IS_SMI_DATE\" INTEGER," + // 46: isSmiDate
                "\"IS_TUBERCULOSIS\" INTEGER," + // 47: isTuberculosis
                "\"IS_TUBERCULOSIS_DATE\" INTEGER," + // 48: isTuberculosisDate
                "\"IS_DEATH\" INTEGER," + // 49: isDeath
                "\"DEATH_DATE\" INTEGER," + // 50: deathDate
                "\"ADDRESS\" TEXT," + // 51: address
                "\"HOUSEHOLD_ADDRESS\" TEXT," + // 52: householdAddress
                "\"PAPER_ARCHIVE_DATE\" INTEGER," + // 53: paperArchiveDate
                "\"PAPER_CARD_NUM\" TEXT," + // 54: paperCardNum
                "\"COMMITTEE\" TEXT," + // 55: committee
                "\"COMMITTEE_CN\" TEXT," + // 56: committeeCN
                "\"RESIDENTIAL\" TEXT," + // 57: residential
                "\"RESIDENTIAL_CN\" TEXT," + // 58: residentialCN
                "\"BUILDING\" TEXT," + // 59: building
                "\"BUILDING_CN\" TEXT," + // 60: buildingCN
                "\"FAMILY_INFO_ID\" TEXT," + // 61: familyInfoId
                "\"RESP_DOCTOR_ID\" TEXT," + // 62: respDoctorId
                "\"PHOTO_URL\" TEXT," + // 63: photoUrl
                "\"STATUS_CODE\" TEXT," + // 64: statusCode
                "\"CANCEL_REASON_CODE\" TEXT," + // 65: cancelReasonCode
                "\"CANCEL_REASON\" TEXT," + // 66: cancelReason
                "\"CANCEL_TIME\" INTEGER," + // 67: cancelTime
                "\"CREATE_ORG_ID\" TEXT," + // 68: createOrgId
                "\"ORG_NAME\" TEXT," + // 69: orgName
                "\"ORG_CODE\" TEXT," + // 70: orgCode
                "\"CREATOR_ID\" TEXT," + // 71: creatorId
                "\"CREATOR\" TEXT," + // 72: creator
                "\"CREATE_TIME\" INTEGER," + // 73: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 74: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 75: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 76: modifierId
                "\"MODIFIER\" TEXT," + // 77: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 78: modifiedTime
                "\"PERSON_INFO_CODE\" TEXT," + // 79: personInfoCode
                "\"IS_HYPER_HR\" INTEGER," + // 80: isHyperHr
                "\"IS_HYPER_HR_DATE\" INTEGER," + // 81: isHyperHrDate
                "\"IS_DIABETES_HR\" INTEGER," + // 82: isDiabetesHr
                "\"IS_DIABETES_HR_DATE\" INTEGER," + // 83: isDiabetesHrDate
                "\"IS_CHD\" INTEGER," + // 84: isChd
                "\"IS_CHD_DATE\" INTEGER," + // 85: isChdDate
                "\"IS_CA\" INTEGER," + // 86: isCa
                "\"IS_CA_DATE\" INTEGER," + // 87: isCaDate
                "\"JSON_DETAIL\" TEXT," + // 88: jsonDetail
                "\"IS_DISABILITY_EYESIGHT\" INTEGER," + // 89: isDisabilityEyesight
                "\"IS_DISABILITY_HEARING\" INTEGER," + // 90: isDisabilityHearing
                "\"IS_DISABILITY_LANGUAGE\" INTEGER," + // 91: isDisabilityLanguage
                "\"IS_DISABILITY_LIMBS\" INTEGER," + // 92: isDisabilityLimbs
                "\"IS_DISABILITY_BRAIN\" INTEGER," + // 93: isDisabilityBrain
                "\"IS_DISABILITY_MIND\" INTEGER);"); // 94: isDisabilityMind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonInfo entity) {
        stmt.clearBindings();
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(1, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(2, manageOrgId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(3, personInfoNo);
        }
 
        String personInfoSno = entity.getPersonInfoSno();
        if (personInfoSno != null) {
            stmt.bindString(4, personInfoSno);
        }
 
        String healthcareOrg = entity.getHealthcareOrg();
        if (healthcareOrg != null) {
            stmt.bindString(5, healthcareOrg);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String formerName = entity.getFormerName();
        if (formerName != null) {
            stmt.bindString(8, formerName);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(9, sexCode);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(10, sexValue);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(11, birthday.getTime());
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(12, idNo);
        }
 
        String workUnit = entity.getWorkUnit();
        if (workUnit != null) {
            stmt.bindString(13, workUnit);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(14, telNo);
        }
 
        String fixedPhones = entity.getFixedPhones();
        if (fixedPhones != null) {
            stmt.bindString(15, fixedPhones);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(16, contactName);
        }
 
        String contactTelNo = entity.getContactTelNo();
        if (contactTelNo != null) {
            stmt.bindString(17, contactTelNo);
        }
 
        String residenceTypeCode = entity.getResidenceTypeCode();
        if (residenceTypeCode != null) {
            stmt.bindString(18, residenceTypeCode);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(19, householdTypeCode);
        }
 
        String nationalityCode = entity.getNationalityCode();
        if (nationalityCode != null) {
            stmt.bindString(20, nationalityCode);
        }
 
        String nationalityValue = entity.getNationalityValue();
        if (nationalityValue != null) {
            stmt.bindString(21, nationalityValue);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(22, aboCode);
        }
 
        String rhCode = entity.getRhCode();
        if (rhCode != null) {
            stmt.bindString(23, rhCode);
        }
 
        String relationCode = entity.getRelationCode();
        if (relationCode != null) {
            stmt.bindString(24, relationCode);
        }
 
        String relationValue = entity.getRelationValue();
        if (relationValue != null) {
            stmt.bindString(25, relationValue);
        }
 
        String educationCode = entity.getEducationCode();
        if (educationCode != null) {
            stmt.bindString(26, educationCode);
        }
 
        String occupationCode = entity.getOccupationCode();
        if (occupationCode != null) {
            stmt.bindString(27, occupationCode);
        }
 
        String marriageCode = entity.getMarriageCode();
        if (marriageCode != null) {
            stmt.bindString(28, marriageCode);
        }
 
        String geneticDiseaseHistoryCode = entity.getGeneticDiseaseHistoryCode();
        if (geneticDiseaseHistoryCode != null) {
            stmt.bindString(29, geneticDiseaseHistoryCode);
        }
 
        String geneticDiseaseHistoryName = entity.getGeneticDiseaseHistoryName();
        if (geneticDiseaseHistoryName != null) {
            stmt.bindString(30, geneticDiseaseHistoryName);
        }
 
        String kitchenExhaustCode = entity.getKitchenExhaustCode();
        if (kitchenExhaustCode != null) {
            stmt.bindString(31, kitchenExhaustCode);
        }
 
        String toiletCode = entity.getToiletCode();
        if (toiletCode != null) {
            stmt.bindString(32, toiletCode);
        }
 
        String livestockFenceCode = entity.getLivestockFenceCode();
        if (livestockFenceCode != null) {
            stmt.bindString(33, livestockFenceCode);
        }
 
        Integer examCount = entity.getExamCount();
        if (examCount != null) {
            stmt.bindLong(34, examCount);
        }
 
        java.util.Date lastHealthExamDate = entity.getLastHealthExamDate();
        if (lastHealthExamDate != null) {
            stmt.bindLong(35, lastHealthExamDate.getTime());
        }
 
        Integer isChild = entity.getIsChild();
        if (isChild != null) {
            stmt.bindLong(36, isChild);
        }
 
        java.util.Date isChildDate = entity.getIsChildDate();
        if (isChildDate != null) {
            stmt.bindLong(37, isChildDate.getTime());
        }
 
        Integer isMaternal = entity.getIsMaternal();
        if (isMaternal != null) {
            stmt.bindLong(38, isMaternal);
        }
 
        java.util.Date isMaternalDate = entity.getIsMaternalDate();
        if (isMaternalDate != null) {
            stmt.bindLong(39, isMaternalDate.getTime());
        }
 
        Integer isElder = entity.getIsElder();
        if (isElder != null) {
            stmt.bindLong(40, isElder);
        }
 
        java.util.Date isElderDate = entity.getIsElderDate();
        if (isElderDate != null) {
            stmt.bindLong(41, isElderDate.getTime());
        }
 
        Integer isHypertension = entity.getIsHypertension();
        if (isHypertension != null) {
            stmt.bindLong(42, isHypertension);
        }
 
        java.util.Date isHypertensionDate = entity.getIsHypertensionDate();
        if (isHypertensionDate != null) {
            stmt.bindLong(43, isHypertensionDate.getTime());
        }
 
        Integer isDiabetes = entity.getIsDiabetes();
        if (isDiabetes != null) {
            stmt.bindLong(44, isDiabetes);
        }
 
        java.util.Date isDiabetesDate = entity.getIsDiabetesDate();
        if (isDiabetesDate != null) {
            stmt.bindLong(45, isDiabetesDate.getTime());
        }
 
        Integer isSmi = entity.getIsSmi();
        if (isSmi != null) {
            stmt.bindLong(46, isSmi);
        }
 
        java.util.Date isSmiDate = entity.getIsSmiDate();
        if (isSmiDate != null) {
            stmt.bindLong(47, isSmiDate.getTime());
        }
 
        Integer isTuberculosis = entity.getIsTuberculosis();
        if (isTuberculosis != null) {
            stmt.bindLong(48, isTuberculosis);
        }
 
        java.util.Date isTuberculosisDate = entity.getIsTuberculosisDate();
        if (isTuberculosisDate != null) {
            stmt.bindLong(49, isTuberculosisDate.getTime());
        }
 
        Integer isDeath = entity.getIsDeath();
        if (isDeath != null) {
            stmt.bindLong(50, isDeath);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(51, deathDate.getTime());
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(52, address);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(53, householdAddress);
        }
 
        java.util.Date paperArchiveDate = entity.getPaperArchiveDate();
        if (paperArchiveDate != null) {
            stmt.bindLong(54, paperArchiveDate.getTime());
        }
 
        String paperCardNum = entity.getPaperCardNum();
        if (paperCardNum != null) {
            stmt.bindString(55, paperCardNum);
        }
 
        String committee = entity.getCommittee();
        if (committee != null) {
            stmt.bindString(56, committee);
        }
 
        String committeeCN = entity.getCommitteeCN();
        if (committeeCN != null) {
            stmt.bindString(57, committeeCN);
        }
 
        String residential = entity.getResidential();
        if (residential != null) {
            stmt.bindString(58, residential);
        }
 
        String residentialCN = entity.getResidentialCN();
        if (residentialCN != null) {
            stmt.bindString(59, residentialCN);
        }
 
        String building = entity.getBuilding();
        if (building != null) {
            stmt.bindString(60, building);
        }
 
        String buildingCN = entity.getBuildingCN();
        if (buildingCN != null) {
            stmt.bindString(61, buildingCN);
        }
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(62, familyInfoId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(63, respDoctorId);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(64, photoUrl);
        }
 
        String statusCode = entity.getStatusCode();
        if (statusCode != null) {
            stmt.bindString(65, statusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(66, cancelReasonCode);
        }
 
        String cancelReason = entity.getCancelReason();
        if (cancelReason != null) {
            stmt.bindString(67, cancelReason);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(68, cancelTime.getTime());
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(69, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(70, orgName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(71, orgCode);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(72, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(73, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(74, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(75, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(76, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(77, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(78, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(79, modifiedTime.getTime());
        }
 
        String personInfoCode = entity.getPersonInfoCode();
        if (personInfoCode != null) {
            stmt.bindString(80, personInfoCode);
        }
 
        Integer isHyperHr = entity.getIsHyperHr();
        if (isHyperHr != null) {
            stmt.bindLong(81, isHyperHr);
        }
 
        java.util.Date isHyperHrDate = entity.getIsHyperHrDate();
        if (isHyperHrDate != null) {
            stmt.bindLong(82, isHyperHrDate.getTime());
        }
 
        Integer isDiabetesHr = entity.getIsDiabetesHr();
        if (isDiabetesHr != null) {
            stmt.bindLong(83, isDiabetesHr);
        }
 
        java.util.Date isDiabetesHrDate = entity.getIsDiabetesHrDate();
        if (isDiabetesHrDate != null) {
            stmt.bindLong(84, isDiabetesHrDate.getTime());
        }
 
        Integer isChd = entity.getIsChd();
        if (isChd != null) {
            stmt.bindLong(85, isChd);
        }
 
        java.util.Date isChdDate = entity.getIsChdDate();
        if (isChdDate != null) {
            stmt.bindLong(86, isChdDate.getTime());
        }
 
        Integer isCa = entity.getIsCa();
        if (isCa != null) {
            stmt.bindLong(87, isCa);
        }
 
        java.util.Date isCaDate = entity.getIsCaDate();
        if (isCaDate != null) {
            stmt.bindLong(88, isCaDate.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(89, jsonDetail);
        }
 
        Integer isDisabilityEyesight = entity.getIsDisabilityEyesight();
        if (isDisabilityEyesight != null) {
            stmt.bindLong(90, isDisabilityEyesight);
        }
 
        Integer isDisabilityHearing = entity.getIsDisabilityHearing();
        if (isDisabilityHearing != null) {
            stmt.bindLong(91, isDisabilityHearing);
        }
 
        Integer isDisabilityLanguage = entity.getIsDisabilityLanguage();
        if (isDisabilityLanguage != null) {
            stmt.bindLong(92, isDisabilityLanguage);
        }
 
        Integer isDisabilityLimbs = entity.getIsDisabilityLimbs();
        if (isDisabilityLimbs != null) {
            stmt.bindLong(93, isDisabilityLimbs);
        }
 
        Integer isDisabilityBrain = entity.getIsDisabilityBrain();
        if (isDisabilityBrain != null) {
            stmt.bindLong(94, isDisabilityBrain);
        }
 
        Integer isDisabilityMind = entity.getIsDisabilityMind();
        if (isDisabilityMind != null) {
            stmt.bindLong(95, isDisabilityMind);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonInfo entity) {
        stmt.clearBindings();
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(1, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(2, manageOrgId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(3, personInfoNo);
        }
 
        String personInfoSno = entity.getPersonInfoSno();
        if (personInfoSno != null) {
            stmt.bindString(4, personInfoSno);
        }
 
        String healthcareOrg = entity.getHealthcareOrg();
        if (healthcareOrg != null) {
            stmt.bindString(5, healthcareOrg);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String formerName = entity.getFormerName();
        if (formerName != null) {
            stmt.bindString(8, formerName);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(9, sexCode);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(10, sexValue);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(11, birthday.getTime());
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(12, idNo);
        }
 
        String workUnit = entity.getWorkUnit();
        if (workUnit != null) {
            stmt.bindString(13, workUnit);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(14, telNo);
        }
 
        String fixedPhones = entity.getFixedPhones();
        if (fixedPhones != null) {
            stmt.bindString(15, fixedPhones);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(16, contactName);
        }
 
        String contactTelNo = entity.getContactTelNo();
        if (contactTelNo != null) {
            stmt.bindString(17, contactTelNo);
        }
 
        String residenceTypeCode = entity.getResidenceTypeCode();
        if (residenceTypeCode != null) {
            stmt.bindString(18, residenceTypeCode);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(19, householdTypeCode);
        }
 
        String nationalityCode = entity.getNationalityCode();
        if (nationalityCode != null) {
            stmt.bindString(20, nationalityCode);
        }
 
        String nationalityValue = entity.getNationalityValue();
        if (nationalityValue != null) {
            stmt.bindString(21, nationalityValue);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(22, aboCode);
        }
 
        String rhCode = entity.getRhCode();
        if (rhCode != null) {
            stmt.bindString(23, rhCode);
        }
 
        String relationCode = entity.getRelationCode();
        if (relationCode != null) {
            stmt.bindString(24, relationCode);
        }
 
        String relationValue = entity.getRelationValue();
        if (relationValue != null) {
            stmt.bindString(25, relationValue);
        }
 
        String educationCode = entity.getEducationCode();
        if (educationCode != null) {
            stmt.bindString(26, educationCode);
        }
 
        String occupationCode = entity.getOccupationCode();
        if (occupationCode != null) {
            stmt.bindString(27, occupationCode);
        }
 
        String marriageCode = entity.getMarriageCode();
        if (marriageCode != null) {
            stmt.bindString(28, marriageCode);
        }
 
        String geneticDiseaseHistoryCode = entity.getGeneticDiseaseHistoryCode();
        if (geneticDiseaseHistoryCode != null) {
            stmt.bindString(29, geneticDiseaseHistoryCode);
        }
 
        String geneticDiseaseHistoryName = entity.getGeneticDiseaseHistoryName();
        if (geneticDiseaseHistoryName != null) {
            stmt.bindString(30, geneticDiseaseHistoryName);
        }
 
        String kitchenExhaustCode = entity.getKitchenExhaustCode();
        if (kitchenExhaustCode != null) {
            stmt.bindString(31, kitchenExhaustCode);
        }
 
        String toiletCode = entity.getToiletCode();
        if (toiletCode != null) {
            stmt.bindString(32, toiletCode);
        }
 
        String livestockFenceCode = entity.getLivestockFenceCode();
        if (livestockFenceCode != null) {
            stmt.bindString(33, livestockFenceCode);
        }
 
        Integer examCount = entity.getExamCount();
        if (examCount != null) {
            stmt.bindLong(34, examCount);
        }
 
        java.util.Date lastHealthExamDate = entity.getLastHealthExamDate();
        if (lastHealthExamDate != null) {
            stmt.bindLong(35, lastHealthExamDate.getTime());
        }
 
        Integer isChild = entity.getIsChild();
        if (isChild != null) {
            stmt.bindLong(36, isChild);
        }
 
        java.util.Date isChildDate = entity.getIsChildDate();
        if (isChildDate != null) {
            stmt.bindLong(37, isChildDate.getTime());
        }
 
        Integer isMaternal = entity.getIsMaternal();
        if (isMaternal != null) {
            stmt.bindLong(38, isMaternal);
        }
 
        java.util.Date isMaternalDate = entity.getIsMaternalDate();
        if (isMaternalDate != null) {
            stmt.bindLong(39, isMaternalDate.getTime());
        }
 
        Integer isElder = entity.getIsElder();
        if (isElder != null) {
            stmt.bindLong(40, isElder);
        }
 
        java.util.Date isElderDate = entity.getIsElderDate();
        if (isElderDate != null) {
            stmt.bindLong(41, isElderDate.getTime());
        }
 
        Integer isHypertension = entity.getIsHypertension();
        if (isHypertension != null) {
            stmt.bindLong(42, isHypertension);
        }
 
        java.util.Date isHypertensionDate = entity.getIsHypertensionDate();
        if (isHypertensionDate != null) {
            stmt.bindLong(43, isHypertensionDate.getTime());
        }
 
        Integer isDiabetes = entity.getIsDiabetes();
        if (isDiabetes != null) {
            stmt.bindLong(44, isDiabetes);
        }
 
        java.util.Date isDiabetesDate = entity.getIsDiabetesDate();
        if (isDiabetesDate != null) {
            stmt.bindLong(45, isDiabetesDate.getTime());
        }
 
        Integer isSmi = entity.getIsSmi();
        if (isSmi != null) {
            stmt.bindLong(46, isSmi);
        }
 
        java.util.Date isSmiDate = entity.getIsSmiDate();
        if (isSmiDate != null) {
            stmt.bindLong(47, isSmiDate.getTime());
        }
 
        Integer isTuberculosis = entity.getIsTuberculosis();
        if (isTuberculosis != null) {
            stmt.bindLong(48, isTuberculosis);
        }
 
        java.util.Date isTuberculosisDate = entity.getIsTuberculosisDate();
        if (isTuberculosisDate != null) {
            stmt.bindLong(49, isTuberculosisDate.getTime());
        }
 
        Integer isDeath = entity.getIsDeath();
        if (isDeath != null) {
            stmt.bindLong(50, isDeath);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(51, deathDate.getTime());
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(52, address);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(53, householdAddress);
        }
 
        java.util.Date paperArchiveDate = entity.getPaperArchiveDate();
        if (paperArchiveDate != null) {
            stmt.bindLong(54, paperArchiveDate.getTime());
        }
 
        String paperCardNum = entity.getPaperCardNum();
        if (paperCardNum != null) {
            stmt.bindString(55, paperCardNum);
        }
 
        String committee = entity.getCommittee();
        if (committee != null) {
            stmt.bindString(56, committee);
        }
 
        String committeeCN = entity.getCommitteeCN();
        if (committeeCN != null) {
            stmt.bindString(57, committeeCN);
        }
 
        String residential = entity.getResidential();
        if (residential != null) {
            stmt.bindString(58, residential);
        }
 
        String residentialCN = entity.getResidentialCN();
        if (residentialCN != null) {
            stmt.bindString(59, residentialCN);
        }
 
        String building = entity.getBuilding();
        if (building != null) {
            stmt.bindString(60, building);
        }
 
        String buildingCN = entity.getBuildingCN();
        if (buildingCN != null) {
            stmt.bindString(61, buildingCN);
        }
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(62, familyInfoId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(63, respDoctorId);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(64, photoUrl);
        }
 
        String statusCode = entity.getStatusCode();
        if (statusCode != null) {
            stmt.bindString(65, statusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(66, cancelReasonCode);
        }
 
        String cancelReason = entity.getCancelReason();
        if (cancelReason != null) {
            stmt.bindString(67, cancelReason);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(68, cancelTime.getTime());
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(69, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(70, orgName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(71, orgCode);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(72, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(73, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(74, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(75, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(76, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(77, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(78, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(79, modifiedTime.getTime());
        }
 
        String personInfoCode = entity.getPersonInfoCode();
        if (personInfoCode != null) {
            stmt.bindString(80, personInfoCode);
        }
 
        Integer isHyperHr = entity.getIsHyperHr();
        if (isHyperHr != null) {
            stmt.bindLong(81, isHyperHr);
        }
 
        java.util.Date isHyperHrDate = entity.getIsHyperHrDate();
        if (isHyperHrDate != null) {
            stmt.bindLong(82, isHyperHrDate.getTime());
        }
 
        Integer isDiabetesHr = entity.getIsDiabetesHr();
        if (isDiabetesHr != null) {
            stmt.bindLong(83, isDiabetesHr);
        }
 
        java.util.Date isDiabetesHrDate = entity.getIsDiabetesHrDate();
        if (isDiabetesHrDate != null) {
            stmt.bindLong(84, isDiabetesHrDate.getTime());
        }
 
        Integer isChd = entity.getIsChd();
        if (isChd != null) {
            stmt.bindLong(85, isChd);
        }
 
        java.util.Date isChdDate = entity.getIsChdDate();
        if (isChdDate != null) {
            stmt.bindLong(86, isChdDate.getTime());
        }
 
        Integer isCa = entity.getIsCa();
        if (isCa != null) {
            stmt.bindLong(87, isCa);
        }
 
        java.util.Date isCaDate = entity.getIsCaDate();
        if (isCaDate != null) {
            stmt.bindLong(88, isCaDate.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(89, jsonDetail);
        }
 
        Integer isDisabilityEyesight = entity.getIsDisabilityEyesight();
        if (isDisabilityEyesight != null) {
            stmt.bindLong(90, isDisabilityEyesight);
        }
 
        Integer isDisabilityHearing = entity.getIsDisabilityHearing();
        if (isDisabilityHearing != null) {
            stmt.bindLong(91, isDisabilityHearing);
        }
 
        Integer isDisabilityLanguage = entity.getIsDisabilityLanguage();
        if (isDisabilityLanguage != null) {
            stmt.bindLong(92, isDisabilityLanguage);
        }
 
        Integer isDisabilityLimbs = entity.getIsDisabilityLimbs();
        if (isDisabilityLimbs != null) {
            stmt.bindLong(93, isDisabilityLimbs);
        }
 
        Integer isDisabilityBrain = entity.getIsDisabilityBrain();
        if (isDisabilityBrain != null) {
            stmt.bindLong(94, isDisabilityBrain);
        }
 
        Integer isDisabilityMind = entity.getIsDisabilityMind();
        if (isDisabilityMind != null) {
            stmt.bindLong(95, isDisabilityMind);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonInfo readEntity(Cursor cursor, int offset) {
        PersonInfo entity = new PersonInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // manageOrgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // personInfoSno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthcareOrg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // formerName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sexCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sexValue
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // idNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // workUnit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // telNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fixedPhones
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // contactName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // contactTelNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // residenceTypeCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // householdTypeCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nationalityCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // nationalityValue
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // aboCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rhCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // relationCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // relationValue
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // educationCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // occupationCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // marriageCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // geneticDiseaseHistoryCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // geneticDiseaseHistoryName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // kitchenExhaustCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // toiletCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // livestockFenceCode
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // examCount
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // lastHealthExamDate
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // isChild
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // isChildDate
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // isMaternal
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)), // isMaternalDate
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // isElder
            cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)), // isElderDate
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // isHypertension
            cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)), // isHypertensionDate
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // isDiabetes
            cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)), // isDiabetesDate
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // isSmi
            cursor.isNull(offset + 46) ? null : new java.util.Date(cursor.getLong(offset + 46)), // isSmiDate
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // isTuberculosis
            cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)), // isTuberculosisDate
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // isDeath
            cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)), // deathDate
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // address
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // householdAddress
            cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)), // paperArchiveDate
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // paperCardNum
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // committee
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // committeeCN
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // residential
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // residentialCN
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // building
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // buildingCN
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // familyInfoId
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // respDoctorId
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // photoUrl
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // statusCode
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // cancelReasonCode
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // cancelReason
            cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)), // cancelTime
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // createOrgId
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // orgName
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // orgCode
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // creatorId
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // creator
            cursor.isNull(offset + 73) ? null : new java.util.Date(cursor.getLong(offset + 73)), // createTime
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // modifiedOrgId
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // modifiedOrgName
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // modifierId
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // modifier
            cursor.isNull(offset + 78) ? null : new java.util.Date(cursor.getLong(offset + 78)), // modifiedTime
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // personInfoCode
            cursor.isNull(offset + 80) ? null : cursor.getInt(offset + 80), // isHyperHr
            cursor.isNull(offset + 81) ? null : new java.util.Date(cursor.getLong(offset + 81)), // isHyperHrDate
            cursor.isNull(offset + 82) ? null : cursor.getInt(offset + 82), // isDiabetesHr
            cursor.isNull(offset + 83) ? null : new java.util.Date(cursor.getLong(offset + 83)), // isDiabetesHrDate
            cursor.isNull(offset + 84) ? null : cursor.getInt(offset + 84), // isChd
            cursor.isNull(offset + 85) ? null : new java.util.Date(cursor.getLong(offset + 85)), // isChdDate
            cursor.isNull(offset + 86) ? null : cursor.getInt(offset + 86), // isCa
            cursor.isNull(offset + 87) ? null : new java.util.Date(cursor.getLong(offset + 87)), // isCaDate
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // jsonDetail
            cursor.isNull(offset + 89) ? null : cursor.getInt(offset + 89), // isDisabilityEyesight
            cursor.isNull(offset + 90) ? null : cursor.getInt(offset + 90), // isDisabilityHearing
            cursor.isNull(offset + 91) ? null : cursor.getInt(offset + 91), // isDisabilityLanguage
            cursor.isNull(offset + 92) ? null : cursor.getInt(offset + 92), // isDisabilityLimbs
            cursor.isNull(offset + 93) ? null : cursor.getInt(offset + 93), // isDisabilityBrain
            cursor.isNull(offset + 94) ? null : cursor.getInt(offset + 94) // isDisabilityMind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonInfo entity, int offset) {
        entity.setPersonInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setManageOrgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonInfoSno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHealthcareOrg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFormerName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSexCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSexValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setIdNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWorkUnit(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTelNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFixedPhones(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setContactName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setContactTelNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setResidenceTypeCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHouseholdTypeCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNationalityCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNationalityValue(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAboCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRhCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRelationCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRelationValue(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setEducationCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOccupationCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMarriageCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setGeneticDiseaseHistoryCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setGeneticDiseaseHistoryName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setKitchenExhaustCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setToiletCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLivestockFenceCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setExamCount(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setLastHealthExamDate(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setIsChild(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setIsChildDate(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setIsMaternal(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setIsMaternalDate(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
        entity.setIsElder(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setIsElderDate(cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)));
        entity.setIsHypertension(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setIsHypertensionDate(cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)));
        entity.setIsDiabetes(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setIsDiabetesDate(cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)));
        entity.setIsSmi(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setIsSmiDate(cursor.isNull(offset + 46) ? null : new java.util.Date(cursor.getLong(offset + 46)));
        entity.setIsTuberculosis(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
        entity.setIsTuberculosisDate(cursor.isNull(offset + 48) ? null : new java.util.Date(cursor.getLong(offset + 48)));
        entity.setIsDeath(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setDeathDate(cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)));
        entity.setAddress(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setHouseholdAddress(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setPaperArchiveDate(cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)));
        entity.setPaperCardNum(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setCommittee(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setCommitteeCN(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setResidential(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setResidentialCN(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setBuilding(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setBuildingCN(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setFamilyInfoId(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setRespDoctorId(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setPhotoUrl(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setStatusCode(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setCancelReasonCode(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setCancelReason(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setCancelTime(cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)));
        entity.setCreateOrgId(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setOrgName(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setOrgCode(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setCreatorId(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setCreator(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setCreateTime(cursor.isNull(offset + 73) ? null : new java.util.Date(cursor.getLong(offset + 73)));
        entity.setModifiedOrgId(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setModifiedOrgName(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setModifierId(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setModifier(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setModifiedTime(cursor.isNull(offset + 78) ? null : new java.util.Date(cursor.getLong(offset + 78)));
        entity.setPersonInfoCode(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setIsHyperHr(cursor.isNull(offset + 80) ? null : cursor.getInt(offset + 80));
        entity.setIsHyperHrDate(cursor.isNull(offset + 81) ? null : new java.util.Date(cursor.getLong(offset + 81)));
        entity.setIsDiabetesHr(cursor.isNull(offset + 82) ? null : cursor.getInt(offset + 82));
        entity.setIsDiabetesHrDate(cursor.isNull(offset + 83) ? null : new java.util.Date(cursor.getLong(offset + 83)));
        entity.setIsChd(cursor.isNull(offset + 84) ? null : cursor.getInt(offset + 84));
        entity.setIsChdDate(cursor.isNull(offset + 85) ? null : new java.util.Date(cursor.getLong(offset + 85)));
        entity.setIsCa(cursor.isNull(offset + 86) ? null : cursor.getInt(offset + 86));
        entity.setIsCaDate(cursor.isNull(offset + 87) ? null : new java.util.Date(cursor.getLong(offset + 87)));
        entity.setJsonDetail(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setIsDisabilityEyesight(cursor.isNull(offset + 89) ? null : cursor.getInt(offset + 89));
        entity.setIsDisabilityHearing(cursor.isNull(offset + 90) ? null : cursor.getInt(offset + 90));
        entity.setIsDisabilityLanguage(cursor.isNull(offset + 91) ? null : cursor.getInt(offset + 91));
        entity.setIsDisabilityLimbs(cursor.isNull(offset + 92) ? null : cursor.getInt(offset + 92));
        entity.setIsDisabilityBrain(cursor.isNull(offset + 93) ? null : cursor.getInt(offset + 93));
        entity.setIsDisabilityMind(cursor.isNull(offset + 94) ? null : cursor.getInt(offset + 94));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
