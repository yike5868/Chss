package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.districts.Subdistricts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBDISTRICTS".
*/
public class SubdistrictsDao extends AbstractDao<Subdistricts, Void> {

    public static final String TABLENAME = "SUBDISTRICTS";

    /**
     * Properties of entity Subdistricts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DistrictId = new Property(0, String.class, "districtId", false, "DISTRICT_ID");
        public final static Property SubDistrictId = new Property(1, String.class, "subDistrictId", false, "SUB_DISTRICT_ID");
        public final static Property SubDistrictName = new Property(2, String.class, "subDistrictName", false, "SUB_DISTRICT_NAME");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
    };


    public SubdistrictsDao(DaoConfig config) {
        super(config);
    }
    
    public SubdistrictsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBDISTRICTS\" (" + //
                "\"DISTRICT_ID\" TEXT," + // 0: districtId
                "\"SUB_DISTRICT_ID\" TEXT," + // 1: subDistrictId
                "\"SUB_DISTRICT_NAME\" TEXT," + // 2: subDistrictName
                "\"USERID\" TEXT);"); // 3: userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBDISTRICTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Subdistricts entity) {
        stmt.clearBindings();
 
        String districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindString(1, districtId);
        }
 
        String subDistrictId = entity.getSubDistrictId();
        if (subDistrictId != null) {
            stmt.bindString(2, subDistrictId);
        }
 
        String subDistrictName = entity.getSubDistrictName();
        if (subDistrictName != null) {
            stmt.bindString(3, subDistrictName);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Subdistricts entity) {
        stmt.clearBindings();
 
        String districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindString(1, districtId);
        }
 
        String subDistrictId = entity.getSubDistrictId();
        if (subDistrictId != null) {
            stmt.bindString(2, subDistrictId);
        }
 
        String subDistrictName = entity.getSubDistrictName();
        if (subDistrictName != null) {
            stmt.bindString(3, subDistrictName);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Subdistricts readEntity(Cursor cursor, int offset) {
        Subdistricts entity = new Subdistricts( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // districtId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subDistrictId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subDistrictName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // userid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Subdistricts entity, int offset) {
        entity.setDistrictId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubDistrictId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubDistrictName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Subdistricts entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Subdistricts entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
