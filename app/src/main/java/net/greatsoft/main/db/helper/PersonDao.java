package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Void> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, String.class, "personId", false, "PERSON_ID");
        public final static Property FamilyId = new Property(1, String.class, "familyId", false, "FAMILY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property SexCode = new Property(3, String.class, "sexCode", false, "SEX_CODE");
        public final static Property Birthday = new Property(4, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property IdNo = new Property(5, String.class, "idNo", false, "ID_NO");
        public final static Property PersonStatusCode = new Property(6, String.class, "personStatusCode", false, "PERSON_STATUS_CODE");
        public final static Property CancelReasonCode = new Property(7, String.class, "cancelReasonCode", false, "CANCEL_REASON_CODE");
        public final static Property CancelTime = new Property(8, java.util.Date.class, "cancelTime", false, "CANCEL_TIME");
        public final static Property CreateTime = new Property(9, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedTime = new Property(10, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property FatherPersonId = new Property(11, String.class, "fatherPersonId", false, "FATHER_PERSON_ID");
        public final static Property SpousePersonId = new Property(12, String.class, "spousePersonId", false, "SPOUSE_PERSON_ID");
    };


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"PERSON_ID\" TEXT," + // 0: personId
                "\"FAMILY_ID\" TEXT," + // 1: familyId
                "\"NAME\" TEXT," + // 2: name
                "\"SEX_CODE\" TEXT," + // 3: sexCode
                "\"BIRTHDAY\" INTEGER," + // 4: birthday
                "\"ID_NO\" TEXT," + // 5: idNo
                "\"PERSON_STATUS_CODE\" TEXT," + // 6: personStatusCode
                "\"CANCEL_REASON_CODE\" TEXT," + // 7: cancelReasonCode
                "\"CANCEL_TIME\" INTEGER," + // 8: cancelTime
                "\"CREATE_TIME\" INTEGER," + // 9: createTime
                "\"MODIFIED_TIME\" INTEGER," + // 10: modifiedTime
                "\"FATHER_PERSON_ID\" TEXT," + // 11: fatherPersonId
                "\"SPOUSE_PERSON_ID\" TEXT);"); // 12: spousePersonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(1, personId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(2, familyId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(4, sexCode);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday.getTime());
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(6, idNo);
        }
 
        String personStatusCode = entity.getPersonStatusCode();
        if (personStatusCode != null) {
            stmt.bindString(7, personStatusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(8, cancelReasonCode);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(9, cancelTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime.getTime());
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(11, modifiedTime.getTime());
        }
 
        String fatherPersonId = entity.getFatherPersonId();
        if (fatherPersonId != null) {
            stmt.bindString(12, fatherPersonId);
        }
 
        String spousePersonId = entity.getSpousePersonId();
        if (spousePersonId != null) {
            stmt.bindString(13, spousePersonId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(1, personId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(2, familyId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(4, sexCode);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday.getTime());
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(6, idNo);
        }
 
        String personStatusCode = entity.getPersonStatusCode();
        if (personStatusCode != null) {
            stmt.bindString(7, personStatusCode);
        }
 
        String cancelReasonCode = entity.getCancelReasonCode();
        if (cancelReasonCode != null) {
            stmt.bindString(8, cancelReasonCode);
        }
 
        java.util.Date cancelTime = entity.getCancelTime();
        if (cancelTime != null) {
            stmt.bindLong(9, cancelTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime.getTime());
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(11, modifiedTime.getTime());
        }
 
        String fatherPersonId = entity.getFatherPersonId();
        if (fatherPersonId != null) {
            stmt.bindString(12, fatherPersonId);
        }
 
        String spousePersonId = entity.getSpousePersonId();
        if (spousePersonId != null) {
            stmt.bindString(13, spousePersonId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // familyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sexCode
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // personStatusCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cancelReasonCode
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // cancelTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createTime
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // modifiedTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fatherPersonId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // spousePersonId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFamilyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSexCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setIdNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPersonStatusCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCancelReasonCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCancelTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setModifiedTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setFatherPersonId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpousePersonId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Person entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Person entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
