package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.exam.HealthExamInhos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH_EXAM_INHOS".
*/
public class HealthExamInhosDao extends AbstractDao<HealthExamInhos, Void> {

    public static final String TABLENAME = "HEALTH_EXAM_INHOS";

    /**
     * Properties of entity HealthExamInhos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HealthExamId = new Property(0, String.class, "healthExamId", false, "HEALTH_EXAM_ID");
        public final static Property InhosHistoryTypeCode = new Property(1, String.class, "inhosHistoryTypeCode", false, "INHOS_HISTORY_TYPE_CODE");
        public final static Property AdmissionDate = new Property(2, java.util.Date.class, "admissionDate", false, "ADMISSION_DATE");
        public final static Property DischargeDate = new Property(3, java.util.Date.class, "dischargeDate", false, "DISCHARGE_DATE");
        public final static Property AdmissionReason = new Property(4, String.class, "admissionReason", false, "ADMISSION_REASON");
        public final static Property HospitalName = new Property(5, String.class, "hospitalName", false, "HOSPITAL_NAME");
        public final static Property MedicalRecordNo = new Property(6, String.class, "medicalRecordNo", false, "MEDICAL_RECORD_NO");
    };


    public HealthExamInhosDao(DaoConfig config) {
        super(config);
    }
    
    public HealthExamInhosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH_EXAM_INHOS\" (" + //
                "\"HEALTH_EXAM_ID\" TEXT," + // 0: healthExamId
                "\"INHOS_HISTORY_TYPE_CODE\" TEXT," + // 1: inhosHistoryTypeCode
                "\"ADMISSION_DATE\" INTEGER," + // 2: admissionDate
                "\"DISCHARGE_DATE\" INTEGER," + // 3: dischargeDate
                "\"ADMISSION_REASON\" TEXT," + // 4: admissionReason
                "\"HOSPITAL_NAME\" TEXT," + // 5: hospitalName
                "\"MEDICAL_RECORD_NO\" TEXT);"); // 6: medicalRecordNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH_EXAM_INHOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HealthExamInhos entity) {
        stmt.clearBindings();
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(1, healthExamId);
        }
 
        String inhosHistoryTypeCode = entity.getInhosHistoryTypeCode();
        if (inhosHistoryTypeCode != null) {
            stmt.bindString(2, inhosHistoryTypeCode);
        }
 
        java.util.Date admissionDate = entity.getAdmissionDate();
        if (admissionDate != null) {
            stmt.bindLong(3, admissionDate.getTime());
        }
 
        java.util.Date dischargeDate = entity.getDischargeDate();
        if (dischargeDate != null) {
            stmt.bindLong(4, dischargeDate.getTime());
        }
 
        String admissionReason = entity.getAdmissionReason();
        if (admissionReason != null) {
            stmt.bindString(5, admissionReason);
        }
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(6, hospitalName);
        }
 
        String medicalRecordNo = entity.getMedicalRecordNo();
        if (medicalRecordNo != null) {
            stmt.bindString(7, medicalRecordNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HealthExamInhos entity) {
        stmt.clearBindings();
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(1, healthExamId);
        }
 
        String inhosHistoryTypeCode = entity.getInhosHistoryTypeCode();
        if (inhosHistoryTypeCode != null) {
            stmt.bindString(2, inhosHistoryTypeCode);
        }
 
        java.util.Date admissionDate = entity.getAdmissionDate();
        if (admissionDate != null) {
            stmt.bindLong(3, admissionDate.getTime());
        }
 
        java.util.Date dischargeDate = entity.getDischargeDate();
        if (dischargeDate != null) {
            stmt.bindLong(4, dischargeDate.getTime());
        }
 
        String admissionReason = entity.getAdmissionReason();
        if (admissionReason != null) {
            stmt.bindString(5, admissionReason);
        }
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(6, hospitalName);
        }
 
        String medicalRecordNo = entity.getMedicalRecordNo();
        if (medicalRecordNo != null) {
            stmt.bindString(7, medicalRecordNo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HealthExamInhos readEntity(Cursor cursor, int offset) {
        HealthExamInhos entity = new HealthExamInhos( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // healthExamId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inhosHistoryTypeCode
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // admissionDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dischargeDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // admissionReason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hospitalName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // medicalRecordNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HealthExamInhos entity, int offset) {
        entity.setHealthExamId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInhosHistoryTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdmissionDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDischargeDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setAdmissionReason(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHospitalName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMedicalRecordNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HealthExamInhos entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HealthExamInhos entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
