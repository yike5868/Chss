package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.SickChoiceMedicine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SICK_CHOICE_MEDICINE".
*/
public class SickChoiceMedicineDao extends AbstractDao<SickChoiceMedicine, Void> {

    public static final String TABLENAME = "SICK_CHOICE_MEDICINE";

    /**
     * Properties of entity SickChoiceMedicine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SickChoiceMedicineId = new Property(0, String.class, "sickChoiceMedicineId", false, "SICK_CHOICE_MEDICINE_ID");
        public final static Property SickMedicineId = new Property(1, String.class, "sickMedicineId", false, "SICK_MEDICINE_ID");
        public final static Property SickCode = new Property(2, String.class, "sickCode", false, "SICK_CODE");
    };


    public SickChoiceMedicineDao(DaoConfig config) {
        super(config);
    }
    
    public SickChoiceMedicineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SICK_CHOICE_MEDICINE\" (" + //
                "\"SICK_CHOICE_MEDICINE_ID\" TEXT," + // 0: sickChoiceMedicineId
                "\"SICK_MEDICINE_ID\" TEXT," + // 1: sickMedicineId
                "\"SICK_CODE\" TEXT);"); // 2: sickCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SICK_CHOICE_MEDICINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SickChoiceMedicine entity) {
        stmt.clearBindings();
 
        String sickChoiceMedicineId = entity.getSickChoiceMedicineId();
        if (sickChoiceMedicineId != null) {
            stmt.bindString(1, sickChoiceMedicineId);
        }
 
        String sickMedicineId = entity.getSickMedicineId();
        if (sickMedicineId != null) {
            stmt.bindString(2, sickMedicineId);
        }
 
        String sickCode = entity.getSickCode();
        if (sickCode != null) {
            stmt.bindString(3, sickCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SickChoiceMedicine entity) {
        stmt.clearBindings();
 
        String sickChoiceMedicineId = entity.getSickChoiceMedicineId();
        if (sickChoiceMedicineId != null) {
            stmt.bindString(1, sickChoiceMedicineId);
        }
 
        String sickMedicineId = entity.getSickMedicineId();
        if (sickMedicineId != null) {
            stmt.bindString(2, sickMedicineId);
        }
 
        String sickCode = entity.getSickCode();
        if (sickCode != null) {
            stmt.bindString(3, sickCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SickChoiceMedicine readEntity(Cursor cursor, int offset) {
        SickChoiceMedicine entity = new SickChoiceMedicine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sickChoiceMedicineId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sickMedicineId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // sickCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SickChoiceMedicine entity, int offset) {
        entity.setSickChoiceMedicineId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSickMedicineId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSickCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SickChoiceMedicine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SickChoiceMedicine entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
