package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.maternal.MaternalFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_FOLLOWUP".
*/
public class MaternalFollowupDao extends AbstractDao<MaternalFollowup, Void> {

    public static final String TABLENAME = "MATERNAL_FOLLOWUP";

    /**
     * Properties of entity MaternalFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaternalFollowupId = new Property(0, String.class, "maternalFollowupId", false, "MATERNAL_FOLLOWUP_ID");
        public final static Property MaternalInfoId = new Property(1, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MaternalFollowupNo = new Property(3, String.class, "maternalFollowupNo", false, "MATERNAL_FOLLOWUP_NO");
        public final static Property MaternalRegisterId = new Property(4, String.class, "maternalRegisterId", false, "MATERNAL_REGISTER_ID");
        public final static Property PregnantCount = new Property(5, Integer.class, "pregnantCount", false, "PREGNANT_COUNT");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property ServiceTimes = new Property(7, Integer.class, "serviceTimes", false, "SERVICE_TIMES");
        public final static Property FollowupDate = new Property(8, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(9, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property GestWeeks = new Property(10, Integer.class, "gestWeeks", false, "GEST_WEEKS");
        public final static Property GestDays = new Property(11, Integer.class, "gestDays", false, "GEST_DAYS");
        public final static Property Weight = new Property(12, Double.class, "weight", false, "WEIGHT");
        public final static Property ChiefComplaint = new Property(13, String.class, "chiefComplaint", false, "CHIEF_COMPLAINT");
        public final static Property FundusHeight = new Property(14, Double.class, "fundusHeight", false, "FUNDUS_HEIGHT");
        public final static Property AbdomenCircum = new Property(15, Double.class, "abdomenCircum", false, "ABDOMEN_CIRCUM");
        public final static Property FetusPositionCode = new Property(16, String.class, "fetusPositionCode", false, "FETUS_POSITION_CODE");
        public final static Property FetusPositionValue = new Property(17, String.class, "fetusPositionValue", false, "FETUS_POSITION_VALUE");
        public final static Property FetalHeartRate = new Property(18, String.class, "fetalHeartRate", false, "FETAL_HEART_RATE");
        public final static Property Sbp = new Property(19, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(20, Integer.class, "dbp", false, "DBP");
        public final static Property Hgb = new Property(21, Double.class, "hgb", false, "HGB");
        public final static Property ProQuanTestValue = new Property(22, Double.class, "proQuanTestValue", false, "PRO_QUAN_TEST_VALUE");
        public final static Property ProQualResultCode = new Property(23, String.class, "proQualResultCode", false, "PRO_QUAL_RESULT_CODE");
        public final static Property OtherAssistExam = new Property(24, String.class, "otherAssistExam", false, "OTHER_ASSIST_EXAM");
        public final static Property PregHealthAbnormCode = new Property(25, String.class, "pregHealthAbnormCode", false, "PREG_HEALTH_ABNORM_CODE");
        public final static Property PregHealthAbnormDesc = new Property(26, String.class, "pregHealthAbnormDesc", false, "PREG_HEALTH_ABNORM_DESC");
        public final static Property ReferralCode = new Property(27, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property RefertoOrgName = new Property(28, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(29, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property ReferralReason = new Property(30, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property NextFollowupDate = new Property(31, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property PreviousVisitDate = new Property(32, java.util.Date.class, "previousVisitDate", false, "PREVIOUS_VISIT_DATE");
        public final static Property PreviousVisitPerson = new Property(33, String.class, "previousVisitPerson", false, "PREVIOUS_VISIT_PERSON");
        public final static Property PreviousVisitTypeCode = new Property(34, String.class, "previousVisitTypeCode", false, "PREVIOUS_VISIT_TYPE_CODE");
        public final static Property FollowupDoctorId = new Property(35, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(36, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property IsCancel = new Property(37, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(38, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(39, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(40, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(41, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(42, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(43, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(44, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(45, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(46, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(47, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public MaternalFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_FOLLOWUP\" (" + //
                "\"MATERNAL_FOLLOWUP_ID\" TEXT," + // 0: maternalFollowupId
                "\"MATERNAL_INFO_ID\" TEXT," + // 1: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"MATERNAL_FOLLOWUP_NO\" TEXT," + // 3: maternalFollowupNo
                "\"MATERNAL_REGISTER_ID\" TEXT," + // 4: maternalRegisterId
                "\"PREGNANT_COUNT\" INTEGER," + // 5: pregnantCount
                "\"NAME\" TEXT," + // 6: name
                "\"SERVICE_TIMES\" INTEGER," + // 7: serviceTimes
                "\"FOLLOWUP_DATE\" INTEGER," + // 8: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 9: followupWayCode
                "\"GEST_WEEKS\" INTEGER," + // 10: gestWeeks
                "\"GEST_DAYS\" INTEGER," + // 11: gestDays
                "\"WEIGHT\" REAL," + // 12: weight
                "\"CHIEF_COMPLAINT\" TEXT," + // 13: chiefComplaint
                "\"FUNDUS_HEIGHT\" REAL," + // 14: fundusHeight
                "\"ABDOMEN_CIRCUM\" REAL," + // 15: abdomenCircum
                "\"FETUS_POSITION_CODE\" TEXT," + // 16: fetusPositionCode
                "\"FETUS_POSITION_VALUE\" TEXT," + // 17: fetusPositionValue
                "\"FETAL_HEART_RATE\" TEXT," + // 18: fetalHeartRate
                "\"SBP\" INTEGER," + // 19: sbp
                "\"DBP\" INTEGER," + // 20: dbp
                "\"HGB\" REAL," + // 21: hgb
                "\"PRO_QUAN_TEST_VALUE\" REAL," + // 22: proQuanTestValue
                "\"PRO_QUAL_RESULT_CODE\" TEXT," + // 23: proQualResultCode
                "\"OTHER_ASSIST_EXAM\" TEXT," + // 24: otherAssistExam
                "\"PREG_HEALTH_ABNORM_CODE\" TEXT," + // 25: pregHealthAbnormCode
                "\"PREG_HEALTH_ABNORM_DESC\" TEXT," + // 26: pregHealthAbnormDesc
                "\"REFERRAL_CODE\" TEXT," + // 27: referralCode
                "\"REFERTO_ORG_NAME\" TEXT," + // 28: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 29: refertoDeptName
                "\"REFERRAL_REASON\" TEXT," + // 30: referralReason
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 31: nextFollowupDate
                "\"PREVIOUS_VISIT_DATE\" INTEGER," + // 32: previousVisitDate
                "\"PREVIOUS_VISIT_PERSON\" TEXT," + // 33: previousVisitPerson
                "\"PREVIOUS_VISIT_TYPE_CODE\" TEXT," + // 34: previousVisitTypeCode
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 35: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 36: followupDoctorName
                "\"IS_CANCEL\" INTEGER," + // 37: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 38: createOrgId
                "\"ORG_NAME\" TEXT," + // 39: orgName
                "\"CREATOR_ID\" TEXT," + // 40: creatorId
                "\"CREATOR\" TEXT," + // 41: creator
                "\"CREATE_TIME\" INTEGER," + // 42: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 43: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 44: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 45: modifierId
                "\"MODIFIER\" TEXT," + // 46: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 47: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalFollowup entity) {
        stmt.clearBindings();
 
        String maternalFollowupId = entity.getMaternalFollowupId();
        if (maternalFollowupId != null) {
            stmt.bindString(1, maternalFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalFollowupNo = entity.getMaternalFollowupNo();
        if (maternalFollowupNo != null) {
            stmt.bindString(4, maternalFollowupNo);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(5, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        Integer serviceTimes = entity.getServiceTimes();
        if (serviceTimes != null) {
            stmt.bindLong(8, serviceTimes);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(9, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(10, followupWayCode);
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(11, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(12, gestDays);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        String chiefComplaint = entity.getChiefComplaint();
        if (chiefComplaint != null) {
            stmt.bindString(14, chiefComplaint);
        }
 
        Double fundusHeight = entity.getFundusHeight();
        if (fundusHeight != null) {
            stmt.bindDouble(15, fundusHeight);
        }
 
        Double abdomenCircum = entity.getAbdomenCircum();
        if (abdomenCircum != null) {
            stmt.bindDouble(16, abdomenCircum);
        }
 
        String fetusPositionCode = entity.getFetusPositionCode();
        if (fetusPositionCode != null) {
            stmt.bindString(17, fetusPositionCode);
        }
 
        String fetusPositionValue = entity.getFetusPositionValue();
        if (fetusPositionValue != null) {
            stmt.bindString(18, fetusPositionValue);
        }
 
        String fetalHeartRate = entity.getFetalHeartRate();
        if (fetalHeartRate != null) {
            stmt.bindString(19, fetalHeartRate);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(20, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(21, dbp);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(22, hgb);
        }
 
        Double proQuanTestValue = entity.getProQuanTestValue();
        if (proQuanTestValue != null) {
            stmt.bindDouble(23, proQuanTestValue);
        }
 
        String proQualResultCode = entity.getProQualResultCode();
        if (proQualResultCode != null) {
            stmt.bindString(24, proQualResultCode);
        }
 
        String otherAssistExam = entity.getOtherAssistExam();
        if (otherAssistExam != null) {
            stmt.bindString(25, otherAssistExam);
        }
 
        String pregHealthAbnormCode = entity.getPregHealthAbnormCode();
        if (pregHealthAbnormCode != null) {
            stmt.bindString(26, pregHealthAbnormCode);
        }
 
        String pregHealthAbnormDesc = entity.getPregHealthAbnormDesc();
        if (pregHealthAbnormDesc != null) {
            stmt.bindString(27, pregHealthAbnormDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(28, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(29, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(30, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(31, referralReason);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(32, nextFollowupDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(33, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(34, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(35, previousVisitTypeCode);
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(36, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(37, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(38, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(39, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(40, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(41, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(42, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(43, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(44, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(45, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(46, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(47, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(48, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalFollowup entity) {
        stmt.clearBindings();
 
        String maternalFollowupId = entity.getMaternalFollowupId();
        if (maternalFollowupId != null) {
            stmt.bindString(1, maternalFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalFollowupNo = entity.getMaternalFollowupNo();
        if (maternalFollowupNo != null) {
            stmt.bindString(4, maternalFollowupNo);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(5, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        Integer serviceTimes = entity.getServiceTimes();
        if (serviceTimes != null) {
            stmt.bindLong(8, serviceTimes);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(9, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(10, followupWayCode);
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(11, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(12, gestDays);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        String chiefComplaint = entity.getChiefComplaint();
        if (chiefComplaint != null) {
            stmt.bindString(14, chiefComplaint);
        }
 
        Double fundusHeight = entity.getFundusHeight();
        if (fundusHeight != null) {
            stmt.bindDouble(15, fundusHeight);
        }
 
        Double abdomenCircum = entity.getAbdomenCircum();
        if (abdomenCircum != null) {
            stmt.bindDouble(16, abdomenCircum);
        }
 
        String fetusPositionCode = entity.getFetusPositionCode();
        if (fetusPositionCode != null) {
            stmt.bindString(17, fetusPositionCode);
        }
 
        String fetusPositionValue = entity.getFetusPositionValue();
        if (fetusPositionValue != null) {
            stmt.bindString(18, fetusPositionValue);
        }
 
        String fetalHeartRate = entity.getFetalHeartRate();
        if (fetalHeartRate != null) {
            stmt.bindString(19, fetalHeartRate);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(20, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(21, dbp);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(22, hgb);
        }
 
        Double proQuanTestValue = entity.getProQuanTestValue();
        if (proQuanTestValue != null) {
            stmt.bindDouble(23, proQuanTestValue);
        }
 
        String proQualResultCode = entity.getProQualResultCode();
        if (proQualResultCode != null) {
            stmt.bindString(24, proQualResultCode);
        }
 
        String otherAssistExam = entity.getOtherAssistExam();
        if (otherAssistExam != null) {
            stmt.bindString(25, otherAssistExam);
        }
 
        String pregHealthAbnormCode = entity.getPregHealthAbnormCode();
        if (pregHealthAbnormCode != null) {
            stmt.bindString(26, pregHealthAbnormCode);
        }
 
        String pregHealthAbnormDesc = entity.getPregHealthAbnormDesc();
        if (pregHealthAbnormDesc != null) {
            stmt.bindString(27, pregHealthAbnormDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(28, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(29, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(30, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(31, referralReason);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(32, nextFollowupDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(33, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(34, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(35, previousVisitTypeCode);
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(36, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(37, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(38, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(39, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(40, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(41, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(42, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(43, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(44, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(45, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(46, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(47, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(48, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalFollowup readEntity(Cursor cursor, int offset) {
        MaternalFollowup entity = new MaternalFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maternalFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // maternalInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maternalFollowupNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maternalRegisterId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pregnantCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // serviceTimes
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // followupDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // followupWayCode
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // gestWeeks
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // gestDays
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // weight
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // chiefComplaint
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // fundusHeight
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // abdomenCircum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fetusPositionCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fetusPositionValue
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fetalHeartRate
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // sbp
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // dbp
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // hgb
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // proQuanTestValue
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // proQualResultCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // otherAssistExam
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // pregHealthAbnormCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // pregHealthAbnormDesc
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // referralCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // refertoOrgName
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // refertoDeptName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // referralReason
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // nextFollowupDate
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // previousVisitDate
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // previousVisitPerson
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // previousVisitTypeCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // followupDoctorId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // followupDoctorName
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // isCancel
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // createOrgId
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // orgName
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // creatorId
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // creator
            cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)), // createTime
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // modifiedOrgId
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // modifiedOrgName
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // modifierId
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // modifier
            cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalFollowup entity, int offset) {
        entity.setMaternalFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaternalInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaternalFollowupNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaternalRegisterId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServiceTimes(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFollowupDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFollowupWayCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGestWeeks(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGestDays(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setWeight(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setChiefComplaint(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFundusHeight(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setAbdomenCircum(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setFetusPositionCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFetusPositionValue(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFetalHeartRate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSbp(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setDbp(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setHgb(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setProQuanTestValue(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setProQualResultCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOtherAssistExam(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPregHealthAbnormCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPregHealthAbnormDesc(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReferralCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setRefertoOrgName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRefertoDeptName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setReferralReason(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setNextFollowupDate(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setPreviousVisitDate(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setPreviousVisitPerson(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPreviousVisitTypeCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setFollowupDoctorId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFollowupDoctorName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setIsCancel(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setCreateOrgId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setOrgName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setCreatorId(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCreator(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCreateTime(cursor.isNull(offset + 42) ? null : new java.util.Date(cursor.getLong(offset + 42)));
        entity.setModifiedOrgId(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setModifiedOrgName(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setModifierId(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setModifier(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setModifiedTime(cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
