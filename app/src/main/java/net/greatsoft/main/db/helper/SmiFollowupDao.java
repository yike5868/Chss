package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.smi.SmiFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMI_FOLLOWUP".
*/
public class SmiFollowupDao extends AbstractDao<SmiFollowup, Void> {

    public static final String TABLENAME = "SMI_FOLLOWUP";

    /**
     * Properties of entity SmiFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SmiFollowupId = new Property(0, String.class, "smiFollowupId", false, "SMI_FOLLOWUP_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property SmiFollowupNo = new Property(2, String.class, "smiFollowupNo", false, "SMI_FOLLOWUP_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property FollowupDate = new Property(4, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(5, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property VisitType = new Property(6, String.class, "visitType", false, "VISIT_TYPE");
        public final static Property IsMiss = new Property(7, String.class, "isMiss", false, "IS_MISS");
        public final static Property MissReason = new Property(8, String.class, "missReason", false, "MISS_REASON");
        public final static Property RiskLevelCode = new Property(9, String.class, "riskLevelCode", false, "RISK_LEVEL_CODE");
        public final static Property SelfRecogEvalCode = new Property(10, String.class, "selfRecogEvalCode", false, "SELF_RECOG_EVAL_CODE");
        public final static Property SleepQualityCode = new Property(11, String.class, "sleepQualityCode", false, "SLEEP_QUALITY_CODE");
        public final static Property DietQualityCode = new Property(12, String.class, "dietQualityCode", false, "DIET_QUALITY_CODE");
        public final static Property LiveQualityCode = new Property(13, String.class, "liveQualityCode", false, "LIVE_QUALITY_CODE");
        public final static Property HouseworkQualityCode = new Property(14, String.class, "houseworkQualityCode", false, "HOUSEWORK_QUALITY_CODE");
        public final static Property WorkQualityCode = new Property(15, String.class, "workQualityCode", false, "WORK_QUALITY_CODE");
        public final static Property StudyQualityCode = new Property(16, String.class, "studyQualityCode", false, "STUDY_QUALITY_CODE");
        public final static Property ContactQualityCode = new Property(17, String.class, "contactQualityCode", false, "CONTACT_QUALITY_CODE");
        public final static Property SocietyEffect = new Property(18, String.class, "societyEffect", false, "SOCIETY_EFFECT");
        public final static Property LowRandalieren = new Property(19, String.class, "lowRandalieren", false, "LOW_RANDALIEREN");
        public final static Property LowRandalierenTimes = new Property(20, Integer.class, "lowRandalierenTimes", false, "LOW_RANDALIEREN_TIMES");
        public final static Property CauseTrouble = new Property(21, String.class, "causeTrouble", false, "CAUSE_TROUBLE");
        public final static Property CauseTroubleTimes = new Property(22, Integer.class, "causeTroubleTimes", false, "CAUSE_TROUBLE_TIMES");
        public final static Property Accident = new Property(23, String.class, "accident", false, "ACCIDENT");
        public final static Property AccidentTimes = new Property(24, Integer.class, "accidentTimes", false, "ACCIDENT_TIMES");
        public final static Property OtherHarm = new Property(25, String.class, "otherHarm", false, "OTHER_HARM");
        public final static Property OtherHarmTimes = new Property(26, Integer.class, "otherHarmTimes", false, "OTHER_HARM_TIMES");
        public final static Property Autolesion = new Property(27, String.class, "autolesion", false, "AUTOLESION");
        public final static Property AutolesionTimes = new Property(28, Integer.class, "autolesionTimes", false, "AUTOLESION_TIMES");
        public final static Property IncompleteSuicide = new Property(29, String.class, "incompleteSuicide", false, "INCOMPLETE_SUICIDE");
        public final static Property IncompleteSuicideTimes = new Property(30, Integer.class, "incompleteSuicideTimes", false, "INCOMPLETE_SUICIDE_TIMES");
        public final static Property LockCode = new Property(31, String.class, "lockCode", false, "LOCK_CODE");
        public final static Property FollowupInhosCode = new Property(32, String.class, "followupInhosCode", false, "FOLLOWUP_INHOS_CODE");
        public final static Property OutpatientDate = new Property(33, java.util.Date.class, "outpatientDate", false, "OUTPATIENT_DATE");
        public final static Property LabExamCode = new Property(34, String.class, "labExamCode", false, "LAB_EXAM_CODE");
        public final static Property LabExamResultDesc = new Property(35, String.class, "labExamResultDesc", false, "LAB_EXAM_RESULT_DESC");
        public final static Property DrugComplianceCode = new Property(36, String.class, "drugComplianceCode", false, "DRUG_COMPLIANCE_CODE");
        public final static Property DrugAdverseCode = new Property(37, String.class, "drugAdverseCode", false, "DRUG_ADVERSE_CODE");
        public final static Property DrugAdverseDesc = new Property(38, String.class, "drugAdverseDesc", false, "DRUG_ADVERSE_DESC");
        public final static Property TreatmentEffectCode = new Property(39, String.class, "treatmentEffectCode", false, "TREATMENT_EFFECT_CODE");
        public final static Property IsReferralCode = new Property(40, String.class, "isReferralCode", false, "IS_REFERRAL_CODE");
        public final static Property ReferralReason = new Property(41, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property RefertoOrgName = new Property(42, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(43, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property NextFollowupDate = new Property(44, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property FollowupDoctorId = new Property(45, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(46, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property FollowupClassifyCode = new Property(47, String.class, "followupClassifyCode", false, "FOLLOWUP_CLASSIFY_CODE");
        public final static Property IsCancel = new Property(48, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(49, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(50, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(51, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(52, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(53, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(54, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(55, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(56, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(57, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(58, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(59, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property VisitFormal = new Property(60, String.class, "visitFormal", false, "VISIT_FORMAL");
        public final static Property VisitReasonCode = new Property(61, String.class, "visitReasonCode", false, "VISIT_REASON_CODE");
        public final static Property IsDeath = new Property(62, String.class, "isDeath", false, "IS_DEATH");
        public final static Property DeathDate = new Property(63, java.util.Date.class, "deathDate", false, "DEATH_DATE");
        public final static Property DeathReasonBig = new Property(64, String.class, "deathReasonBig", false, "DEATH_REASON_BIG");
        public final static Property DeathReasonSmall = new Property(65, String.class, "deathReasonSmall", false, "DEATH_REASON_SMALL");
    };


    public SmiFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public SmiFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMI_FOLLOWUP\" (" + //
                "\"SMI_FOLLOWUP_ID\" TEXT," + // 0: smiFollowupId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"SMI_FOLLOWUP_NO\" TEXT," + // 2: smiFollowupNo
                "\"NAME\" TEXT," + // 3: name
                "\"FOLLOWUP_DATE\" INTEGER," + // 4: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 5: followupWayCode
                "\"VISIT_TYPE\" TEXT," + // 6: visitType
                "\"IS_MISS\" TEXT," + // 7: isMiss
                "\"MISS_REASON\" TEXT," + // 8: missReason
                "\"RISK_LEVEL_CODE\" TEXT," + // 9: riskLevelCode
                "\"SELF_RECOG_EVAL_CODE\" TEXT," + // 10: selfRecogEvalCode
                "\"SLEEP_QUALITY_CODE\" TEXT," + // 11: sleepQualityCode
                "\"DIET_QUALITY_CODE\" TEXT," + // 12: dietQualityCode
                "\"LIVE_QUALITY_CODE\" TEXT," + // 13: liveQualityCode
                "\"HOUSEWORK_QUALITY_CODE\" TEXT," + // 14: houseworkQualityCode
                "\"WORK_QUALITY_CODE\" TEXT," + // 15: workQualityCode
                "\"STUDY_QUALITY_CODE\" TEXT," + // 16: studyQualityCode
                "\"CONTACT_QUALITY_CODE\" TEXT," + // 17: contactQualityCode
                "\"SOCIETY_EFFECT\" TEXT," + // 18: societyEffect
                "\"LOW_RANDALIEREN\" TEXT," + // 19: lowRandalieren
                "\"LOW_RANDALIEREN_TIMES\" INTEGER," + // 20: lowRandalierenTimes
                "\"CAUSE_TROUBLE\" TEXT," + // 21: causeTrouble
                "\"CAUSE_TROUBLE_TIMES\" INTEGER," + // 22: causeTroubleTimes
                "\"ACCIDENT\" TEXT," + // 23: accident
                "\"ACCIDENT_TIMES\" INTEGER," + // 24: accidentTimes
                "\"OTHER_HARM\" TEXT," + // 25: otherHarm
                "\"OTHER_HARM_TIMES\" INTEGER," + // 26: otherHarmTimes
                "\"AUTOLESION\" TEXT," + // 27: autolesion
                "\"AUTOLESION_TIMES\" INTEGER," + // 28: autolesionTimes
                "\"INCOMPLETE_SUICIDE\" TEXT," + // 29: incompleteSuicide
                "\"INCOMPLETE_SUICIDE_TIMES\" INTEGER," + // 30: incompleteSuicideTimes
                "\"LOCK_CODE\" TEXT," + // 31: lockCode
                "\"FOLLOWUP_INHOS_CODE\" TEXT," + // 32: followupInhosCode
                "\"OUTPATIENT_DATE\" INTEGER," + // 33: outpatientDate
                "\"LAB_EXAM_CODE\" TEXT," + // 34: labExamCode
                "\"LAB_EXAM_RESULT_DESC\" TEXT," + // 35: labExamResultDesc
                "\"DRUG_COMPLIANCE_CODE\" TEXT," + // 36: drugComplianceCode
                "\"DRUG_ADVERSE_CODE\" TEXT," + // 37: drugAdverseCode
                "\"DRUG_ADVERSE_DESC\" TEXT," + // 38: drugAdverseDesc
                "\"TREATMENT_EFFECT_CODE\" TEXT," + // 39: treatmentEffectCode
                "\"IS_REFERRAL_CODE\" TEXT," + // 40: isReferralCode
                "\"REFERRAL_REASON\" TEXT," + // 41: referralReason
                "\"REFERTO_ORG_NAME\" TEXT," + // 42: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 43: refertoDeptName
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 44: nextFollowupDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 45: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 46: followupDoctorName
                "\"FOLLOWUP_CLASSIFY_CODE\" TEXT," + // 47: followupClassifyCode
                "\"IS_CANCEL\" INTEGER," + // 48: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 49: createOrgId
                "\"ORG_NAME\" TEXT," + // 50: orgName
                "\"CREATOR_ID\" TEXT," + // 51: creatorId
                "\"CREATOR\" TEXT," + // 52: creator
                "\"CREATE_TIME\" INTEGER," + // 53: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 54: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 55: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 56: modifierId
                "\"MODIFIER\" TEXT," + // 57: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 58: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 59: jsonDetail
                "\"VISIT_FORMAL\" TEXT," + // 60: visitFormal
                "\"VISIT_REASON_CODE\" TEXT," + // 61: visitReasonCode
                "\"IS_DEATH\" TEXT," + // 62: isDeath
                "\"DEATH_DATE\" INTEGER," + // 63: deathDate
                "\"DEATH_REASON_BIG\" TEXT," + // 64: deathReasonBig
                "\"DEATH_REASON_SMALL\" TEXT);"); // 65: deathReasonSmall
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMI_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmiFollowup entity) {
        stmt.clearBindings();
 
        String smiFollowupId = entity.getSmiFollowupId();
        if (smiFollowupId != null) {
            stmt.bindString(1, smiFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String smiFollowupNo = entity.getSmiFollowupNo();
        if (smiFollowupNo != null) {
            stmt.bindString(3, smiFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(5, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(6, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(7, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(8, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(9, missReason);
        }
 
        String riskLevelCode = entity.getRiskLevelCode();
        if (riskLevelCode != null) {
            stmt.bindString(10, riskLevelCode);
        }
 
        String selfRecogEvalCode = entity.getSelfRecogEvalCode();
        if (selfRecogEvalCode != null) {
            stmt.bindString(11, selfRecogEvalCode);
        }
 
        String sleepQualityCode = entity.getSleepQualityCode();
        if (sleepQualityCode != null) {
            stmt.bindString(12, sleepQualityCode);
        }
 
        String dietQualityCode = entity.getDietQualityCode();
        if (dietQualityCode != null) {
            stmt.bindString(13, dietQualityCode);
        }
 
        String liveQualityCode = entity.getLiveQualityCode();
        if (liveQualityCode != null) {
            stmt.bindString(14, liveQualityCode);
        }
 
        String houseworkQualityCode = entity.getHouseworkQualityCode();
        if (houseworkQualityCode != null) {
            stmt.bindString(15, houseworkQualityCode);
        }
 
        String workQualityCode = entity.getWorkQualityCode();
        if (workQualityCode != null) {
            stmt.bindString(16, workQualityCode);
        }
 
        String studyQualityCode = entity.getStudyQualityCode();
        if (studyQualityCode != null) {
            stmt.bindString(17, studyQualityCode);
        }
 
        String contactQualityCode = entity.getContactQualityCode();
        if (contactQualityCode != null) {
            stmt.bindString(18, contactQualityCode);
        }
 
        String societyEffect = entity.getSocietyEffect();
        if (societyEffect != null) {
            stmt.bindString(19, societyEffect);
        }
 
        String lowRandalieren = entity.getLowRandalieren();
        if (lowRandalieren != null) {
            stmt.bindString(20, lowRandalieren);
        }
 
        Integer lowRandalierenTimes = entity.getLowRandalierenTimes();
        if (lowRandalierenTimes != null) {
            stmt.bindLong(21, lowRandalierenTimes);
        }
 
        String causeTrouble = entity.getCauseTrouble();
        if (causeTrouble != null) {
            stmt.bindString(22, causeTrouble);
        }
 
        Integer causeTroubleTimes = entity.getCauseTroubleTimes();
        if (causeTroubleTimes != null) {
            stmt.bindLong(23, causeTroubleTimes);
        }
 
        String accident = entity.getAccident();
        if (accident != null) {
            stmt.bindString(24, accident);
        }
 
        Integer accidentTimes = entity.getAccidentTimes();
        if (accidentTimes != null) {
            stmt.bindLong(25, accidentTimes);
        }
 
        String otherHarm = entity.getOtherHarm();
        if (otherHarm != null) {
            stmt.bindString(26, otherHarm);
        }
 
        Integer otherHarmTimes = entity.getOtherHarmTimes();
        if (otherHarmTimes != null) {
            stmt.bindLong(27, otherHarmTimes);
        }
 
        String autolesion = entity.getAutolesion();
        if (autolesion != null) {
            stmt.bindString(28, autolesion);
        }
 
        Integer autolesionTimes = entity.getAutolesionTimes();
        if (autolesionTimes != null) {
            stmt.bindLong(29, autolesionTimes);
        }
 
        String incompleteSuicide = entity.getIncompleteSuicide();
        if (incompleteSuicide != null) {
            stmt.bindString(30, incompleteSuicide);
        }
 
        Integer incompleteSuicideTimes = entity.getIncompleteSuicideTimes();
        if (incompleteSuicideTimes != null) {
            stmt.bindLong(31, incompleteSuicideTimes);
        }
 
        String lockCode = entity.getLockCode();
        if (lockCode != null) {
            stmt.bindString(32, lockCode);
        }
 
        String followupInhosCode = entity.getFollowupInhosCode();
        if (followupInhosCode != null) {
            stmt.bindString(33, followupInhosCode);
        }
 
        java.util.Date outpatientDate = entity.getOutpatientDate();
        if (outpatientDate != null) {
            stmt.bindLong(34, outpatientDate.getTime());
        }
 
        String labExamCode = entity.getLabExamCode();
        if (labExamCode != null) {
            stmt.bindString(35, labExamCode);
        }
 
        String labExamResultDesc = entity.getLabExamResultDesc();
        if (labExamResultDesc != null) {
            stmt.bindString(36, labExamResultDesc);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(37, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(38, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(39, drugAdverseDesc);
        }
 
        String treatmentEffectCode = entity.getTreatmentEffectCode();
        if (treatmentEffectCode != null) {
            stmt.bindString(40, treatmentEffectCode);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(41, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(42, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(43, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(44, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(45, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(46, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(47, followupDoctorName);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(48, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(49, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(50, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(51, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(52, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(53, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(54, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(55, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(56, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(57, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(58, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(59, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(60, jsonDetail);
        }
 
        String visitFormal = entity.getVisitFormal();
        if (visitFormal != null) {
            stmt.bindString(61, visitFormal);
        }
 
        String visitReasonCode = entity.getVisitReasonCode();
        if (visitReasonCode != null) {
            stmt.bindString(62, visitReasonCode);
        }
 
        String isDeath = entity.getIsDeath();
        if (isDeath != null) {
            stmt.bindString(63, isDeath);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(64, deathDate.getTime());
        }
 
        String deathReasonBig = entity.getDeathReasonBig();
        if (deathReasonBig != null) {
            stmt.bindString(65, deathReasonBig);
        }
 
        String deathReasonSmall = entity.getDeathReasonSmall();
        if (deathReasonSmall != null) {
            stmt.bindString(66, deathReasonSmall);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmiFollowup entity) {
        stmt.clearBindings();
 
        String smiFollowupId = entity.getSmiFollowupId();
        if (smiFollowupId != null) {
            stmt.bindString(1, smiFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String smiFollowupNo = entity.getSmiFollowupNo();
        if (smiFollowupNo != null) {
            stmt.bindString(3, smiFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(5, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(6, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(7, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(8, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(9, missReason);
        }
 
        String riskLevelCode = entity.getRiskLevelCode();
        if (riskLevelCode != null) {
            stmt.bindString(10, riskLevelCode);
        }
 
        String selfRecogEvalCode = entity.getSelfRecogEvalCode();
        if (selfRecogEvalCode != null) {
            stmt.bindString(11, selfRecogEvalCode);
        }
 
        String sleepQualityCode = entity.getSleepQualityCode();
        if (sleepQualityCode != null) {
            stmt.bindString(12, sleepQualityCode);
        }
 
        String dietQualityCode = entity.getDietQualityCode();
        if (dietQualityCode != null) {
            stmt.bindString(13, dietQualityCode);
        }
 
        String liveQualityCode = entity.getLiveQualityCode();
        if (liveQualityCode != null) {
            stmt.bindString(14, liveQualityCode);
        }
 
        String houseworkQualityCode = entity.getHouseworkQualityCode();
        if (houseworkQualityCode != null) {
            stmt.bindString(15, houseworkQualityCode);
        }
 
        String workQualityCode = entity.getWorkQualityCode();
        if (workQualityCode != null) {
            stmt.bindString(16, workQualityCode);
        }
 
        String studyQualityCode = entity.getStudyQualityCode();
        if (studyQualityCode != null) {
            stmt.bindString(17, studyQualityCode);
        }
 
        String contactQualityCode = entity.getContactQualityCode();
        if (contactQualityCode != null) {
            stmt.bindString(18, contactQualityCode);
        }
 
        String societyEffect = entity.getSocietyEffect();
        if (societyEffect != null) {
            stmt.bindString(19, societyEffect);
        }
 
        String lowRandalieren = entity.getLowRandalieren();
        if (lowRandalieren != null) {
            stmt.bindString(20, lowRandalieren);
        }
 
        Integer lowRandalierenTimes = entity.getLowRandalierenTimes();
        if (lowRandalierenTimes != null) {
            stmt.bindLong(21, lowRandalierenTimes);
        }
 
        String causeTrouble = entity.getCauseTrouble();
        if (causeTrouble != null) {
            stmt.bindString(22, causeTrouble);
        }
 
        Integer causeTroubleTimes = entity.getCauseTroubleTimes();
        if (causeTroubleTimes != null) {
            stmt.bindLong(23, causeTroubleTimes);
        }
 
        String accident = entity.getAccident();
        if (accident != null) {
            stmt.bindString(24, accident);
        }
 
        Integer accidentTimes = entity.getAccidentTimes();
        if (accidentTimes != null) {
            stmt.bindLong(25, accidentTimes);
        }
 
        String otherHarm = entity.getOtherHarm();
        if (otherHarm != null) {
            stmt.bindString(26, otherHarm);
        }
 
        Integer otherHarmTimes = entity.getOtherHarmTimes();
        if (otherHarmTimes != null) {
            stmt.bindLong(27, otherHarmTimes);
        }
 
        String autolesion = entity.getAutolesion();
        if (autolesion != null) {
            stmt.bindString(28, autolesion);
        }
 
        Integer autolesionTimes = entity.getAutolesionTimes();
        if (autolesionTimes != null) {
            stmt.bindLong(29, autolesionTimes);
        }
 
        String incompleteSuicide = entity.getIncompleteSuicide();
        if (incompleteSuicide != null) {
            stmt.bindString(30, incompleteSuicide);
        }
 
        Integer incompleteSuicideTimes = entity.getIncompleteSuicideTimes();
        if (incompleteSuicideTimes != null) {
            stmt.bindLong(31, incompleteSuicideTimes);
        }
 
        String lockCode = entity.getLockCode();
        if (lockCode != null) {
            stmt.bindString(32, lockCode);
        }
 
        String followupInhosCode = entity.getFollowupInhosCode();
        if (followupInhosCode != null) {
            stmt.bindString(33, followupInhosCode);
        }
 
        java.util.Date outpatientDate = entity.getOutpatientDate();
        if (outpatientDate != null) {
            stmt.bindLong(34, outpatientDate.getTime());
        }
 
        String labExamCode = entity.getLabExamCode();
        if (labExamCode != null) {
            stmt.bindString(35, labExamCode);
        }
 
        String labExamResultDesc = entity.getLabExamResultDesc();
        if (labExamResultDesc != null) {
            stmt.bindString(36, labExamResultDesc);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(37, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(38, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(39, drugAdverseDesc);
        }
 
        String treatmentEffectCode = entity.getTreatmentEffectCode();
        if (treatmentEffectCode != null) {
            stmt.bindString(40, treatmentEffectCode);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(41, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(42, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(43, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(44, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(45, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(46, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(47, followupDoctorName);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(48, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(49, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(50, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(51, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(52, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(53, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(54, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(55, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(56, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(57, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(58, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(59, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(60, jsonDetail);
        }
 
        String visitFormal = entity.getVisitFormal();
        if (visitFormal != null) {
            stmt.bindString(61, visitFormal);
        }
 
        String visitReasonCode = entity.getVisitReasonCode();
        if (visitReasonCode != null) {
            stmt.bindString(62, visitReasonCode);
        }
 
        String isDeath = entity.getIsDeath();
        if (isDeath != null) {
            stmt.bindString(63, isDeath);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(64, deathDate.getTime());
        }
 
        String deathReasonBig = entity.getDeathReasonBig();
        if (deathReasonBig != null) {
            stmt.bindString(65, deathReasonBig);
        }
 
        String deathReasonSmall = entity.getDeathReasonSmall();
        if (deathReasonSmall != null) {
            stmt.bindString(66, deathReasonSmall);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SmiFollowup readEntity(Cursor cursor, int offset) {
        SmiFollowup entity = new SmiFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // smiFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // smiFollowupNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // followupDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // followupWayCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // visitType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isMiss
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // missReason
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // riskLevelCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // selfRecogEvalCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sleepQualityCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dietQualityCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // liveQualityCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // houseworkQualityCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // workQualityCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // studyQualityCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // contactQualityCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // societyEffect
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lowRandalieren
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // lowRandalierenTimes
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // causeTrouble
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // causeTroubleTimes
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // accident
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // accidentTimes
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // otherHarm
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // otherHarmTimes
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // autolesion
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // autolesionTimes
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // incompleteSuicide
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // incompleteSuicideTimes
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // lockCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // followupInhosCode
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // outpatientDate
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // labExamCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // labExamResultDesc
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // drugComplianceCode
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // drugAdverseCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // drugAdverseDesc
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // treatmentEffectCode
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // isReferralCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // referralReason
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // refertoOrgName
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // refertoDeptName
            cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)), // nextFollowupDate
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // followupDoctorId
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // followupDoctorName
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // followupClassifyCode
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // isCancel
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // createOrgId
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // orgName
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // creatorId
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // creator
            cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)), // createTime
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // modifiedOrgId
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // modifiedOrgName
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // modifierId
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // modifier
            cursor.isNull(offset + 58) ? null : new java.util.Date(cursor.getLong(offset + 58)), // modifiedTime
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // jsonDetail
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // visitFormal
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // visitReasonCode
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // isDeath
            cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)), // deathDate
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // deathReasonBig
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65) // deathReasonSmall
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmiFollowup entity, int offset) {
        entity.setSmiFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSmiFollowupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFollowupDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFollowupWayCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVisitType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsMiss(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMissReason(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRiskLevelCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSelfRecogEvalCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSleepQualityCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDietQualityCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLiveQualityCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHouseworkQualityCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWorkQualityCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStudyQualityCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setContactQualityCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSocietyEffect(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLowRandalieren(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLowRandalierenTimes(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setCauseTrouble(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCauseTroubleTimes(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setAccident(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAccidentTimes(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setOtherHarm(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOtherHarmTimes(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setAutolesion(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAutolesionTimes(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setIncompleteSuicide(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIncompleteSuicideTimes(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setLockCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFollowupInhosCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOutpatientDate(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setLabExamCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setLabExamResultDesc(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setDrugComplianceCode(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDrugAdverseCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDrugAdverseDesc(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setTreatmentEffectCode(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIsReferralCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setReferralReason(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setRefertoOrgName(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setRefertoDeptName(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setNextFollowupDate(cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setFollowupDoctorName(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setFollowupClassifyCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setIsCancel(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setCreateOrgId(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setOrgName(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setCreatorId(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setCreator(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setCreateTime(cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)));
        entity.setModifiedOrgId(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setModifiedOrgName(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setModifierId(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setModifier(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setModifiedTime(cursor.isNull(offset + 58) ? null : new java.util.Date(cursor.getLong(offset + 58)));
        entity.setJsonDetail(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setVisitFormal(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setVisitReasonCode(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setIsDeath(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setDeathDate(cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)));
        entity.setDeathReasonBig(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setDeathReasonSmall(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SmiFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SmiFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
