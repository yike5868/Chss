package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_INFO".
*/
public class ChildInfoDao extends AbstractDao<ChildInfo, Void> {

    public static final String TABLENAME = "CHILD_INFO";

    /**
     * Properties of entity ChildInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildInfoId = new Property(0, String.class, "childInfoId", false, "CHILD_INFO_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ManageOrgId = new Property(2, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property ChildInfoNo = new Property(3, String.class, "childInfoNo", false, "CHILD_INFO_NO");
        public final static Property ChildInfoSno = new Property(4, String.class, "childInfoSno", false, "CHILD_INFO_SNO");
        public final static Property NewbornName = new Property(5, String.class, "newbornName", false, "NEWBORN_NAME");
        public final static Property NewbornSexCode = new Property(6, String.class, "newbornSexCode", false, "NEWBORN_SEX_CODE");
        public final static Property NewbornBirthDate = new Property(7, java.util.Date.class, "newbornBirthDate", false, "NEWBORN_BIRTH_DATE");
        public final static Property NewbornIdNo = new Property(8, String.class, "newbornIdNo", false, "NEWBORN_ID_NO");
        public final static Property PresentAddrProvince = new Property(9, String.class, "presentAddrProvince", false, "PRESENT_ADDR_PROVINCE");
        public final static Property FatherId = new Property(10, String.class, "fatherId", false, "FATHER_ID");
        public final static Property FatherName = new Property(11, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property FatherIdno = new Property(12, String.class, "fatherIdno", false, "FATHER_IDNO");
        public final static Property FatherOccupCode = new Property(13, String.class, "fatherOccupCode", false, "FATHER_OCCUP_CODE");
        public final static Property FatherTelNo = new Property(14, String.class, "fatherTelNo", false, "FATHER_TEL_NO");
        public final static Property FatherBirthDate = new Property(15, java.util.Date.class, "fatherBirthDate", false, "FATHER_BIRTH_DATE");
        public final static Property FatherWorkUnit = new Property(16, String.class, "fatherWorkUnit", false, "FATHER_WORK_UNIT");
        public final static Property MotherId = new Property(17, String.class, "motherId", false, "MOTHER_ID");
        public final static Property MotherName = new Property(18, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property MotherIdno = new Property(19, String.class, "motherIdno", false, "MOTHER_IDNO");
        public final static Property MotherOccupCode = new Property(20, String.class, "motherOccupCode", false, "MOTHER_OCCUP_CODE");
        public final static Property MotherTelNo = new Property(21, String.class, "motherTelNo", false, "MOTHER_TEL_NO");
        public final static Property MotherBirthDate = new Property(22, java.util.Date.class, "motherBirthDate", false, "MOTHER_BIRTH_DATE");
        public final static Property MotherWorkUnit = new Property(23, String.class, "motherWorkUnit", false, "MOTHER_WORK_UNIT");
        public final static Property Guardian = new Property(24, String.class, "guardian", false, "GUARDIAN");
        public final static Property GuardianRelation = new Property(25, String.class, "guardianRelation", false, "GUARDIAN_RELATION");
        public final static Property GuardianTelNo = new Property(26, String.class, "guardianTelNo", false, "GUARDIAN_TEL_NO");
        public final static Property GuardianWorkUnit = new Property(27, String.class, "guardianWorkUnit", false, "GUARDIAN_WORK_UNIT");
        public final static Property GuardianAddress = new Property(28, String.class, "guardianAddress", false, "GUARDIAN_ADDRESS");
        public final static Property BirthGestWeeks = new Property(29, Integer.class, "birthGestWeeks", false, "BIRTH_GEST_WEEKS");
        public final static Property BirthGestDays = new Property(30, Integer.class, "birthGestDays", false, "BIRTH_GEST_DAYS");
        public final static Property MotherHdcpCode = new Property(31, String.class, "motherHdcpCode", false, "MOTHER_HDCP_CODE");
        public final static Property MotherHdcpOthersDesc = new Property(32, String.class, "motherHdcpOthersDesc", false, "MOTHER_HDCP_OTHERS_DESC");
        public final static Property DeliveryOrgName = new Property(33, String.class, "deliveryOrgName", false, "DELIVERY_ORG_NAME");
        public final static Property LastDeliverWayCode = new Property(34, String.class, "lastDeliverWayCode", false, "LAST_DELIVER_WAY_CODE");
        public final static Property TwinsCode = new Property(35, String.class, "twinsCode", false, "TWINS_CODE");
        public final static Property AsphyxiaCode = new Property(36, String.class, "asphyxiaCode", false, "ASPHYXIA_CODE");
        public final static Property SuffocationType = new Property(37, String.class, "suffocationType", false, "SUFFOCATION_TYPE");
        public final static Property ApgarScoreCode = new Property(38, String.class, "apgarScoreCode", false, "APGAR_SCORE_CODE");
        public final static Property ApgarScore = new Property(39, Integer.class, "apgarScore", false, "APGAR_SCORE");
        public final static Property MalformCode = new Property(40, String.class, "malformCode", false, "MALFORM_CODE");
        public final static Property MalformDesc = new Property(41, String.class, "malformDesc", false, "MALFORM_DESC");
        public final static Property HearingScreenCode = new Property(42, String.class, "hearingScreenCode", false, "HEARING_SCREEN_CODE");
        public final static Property HearingScreenResultCode = new Property(43, String.class, "hearingScreenResultCode", false, "HEARING_SCREEN_RESULT_CODE");
        public final static Property DiseaseScreenCode = new Property(44, String.class, "diseaseScreenCode", false, "DISEASE_SCREEN_CODE");
        public final static Property DiseaseScreenOthersDesc = new Property(45, String.class, "diseaseScreenOthersDesc", false, "DISEASE_SCREEN_OTHERS_DESC");
        public final static Property BirthWeight = new Property(46, Double.class, "birthWeight", false, "BIRTH_WEIGHT");
        public final static Property BirthLength = new Property(47, Double.class, "birthLength", false, "BIRTH_LENGTH");
        public final static Property ChildrenBookIsBuild = new Property(48, Integer.class, "childrenBookIsBuild", false, "CHILDREN_BOOK_IS_BUILD");
        public final static Property ChildrenBookBuildDate = new Property(49, java.util.Date.class, "childrenBookBuildDate", false, "CHILDREN_BOOK_BUILD_DATE");
        public final static Property Respondent = new Property(50, String.class, "respondent", false, "RESPONDENT");
        public final static Property InvestigateDate = new Property(51, java.util.Date.class, "investigateDate", false, "INVESTIGATE_DATE");
        public final static Property CaseStatus = new Property(52, String.class, "caseStatus", false, "CASE_STATUS");
        public final static Property LastVisitDate = new Property(53, java.util.Date.class, "lastVisitDate", false, "LAST_VISIT_DATE");
        public final static Property LastVisitTypeCode = new Property(54, String.class, "lastVisitTypeCode", false, "LAST_VISIT_TYPE_CODE");
        public final static Property LastVisitPerson = new Property(55, String.class, "lastVisitPerson", false, "LAST_VISIT_PERSON");
        public final static Property NextVisitDate = new Property(56, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property NextVisitTypeCode = new Property(57, String.class, "nextVisitTypeCode", false, "NEXT_VISIT_TYPE_CODE");
        public final static Property NextVisitPerson = new Property(58, String.class, "nextVisitPerson", false, "NEXT_VISIT_PERSON");
        public final static Property IsWeakChildren = new Property(59, Integer.class, "isWeakChildren", false, "IS_WEAK_CHILDREN");
        public final static Property IsCancel = new Property(60, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(61, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(62, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(63, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(64, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(65, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(66, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(67, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(68, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(69, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(70, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(71, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property AssessmentCount = new Property(72, Integer.class, "assessmentCount", false, "ASSESSMENT_COUNT");
        public final static Property MissingCount = new Property(73, Integer.class, "missingCount", false, "MISSING_COUNT");
        public final static Property IntactRate = new Property(74, Double.class, "intactRate", false, "INTACT_RATE");
        public final static Property CloseCaseCode = new Property(75, String.class, "closeCaseCode", false, "CLOSE_CASE_CODE");
        public final static Property CloseCaseReason = new Property(76, String.class, "closeCaseReason", false, "CLOSE_CASE_REASON");
    };


    public ChildInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChildInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_INFO\" (" + //
                "\"CHILD_INFO_ID\" TEXT," + // 0: childInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"MANAGE_ORG_ID\" TEXT," + // 2: manageOrgId
                "\"CHILD_INFO_NO\" TEXT," + // 3: childInfoNo
                "\"CHILD_INFO_SNO\" TEXT," + // 4: childInfoSno
                "\"NEWBORN_NAME\" TEXT," + // 5: newbornName
                "\"NEWBORN_SEX_CODE\" TEXT," + // 6: newbornSexCode
                "\"NEWBORN_BIRTH_DATE\" INTEGER," + // 7: newbornBirthDate
                "\"NEWBORN_ID_NO\" TEXT," + // 8: newbornIdNo
                "\"PRESENT_ADDR_PROVINCE\" TEXT," + // 9: presentAddrProvince
                "\"FATHER_ID\" TEXT," + // 10: fatherId
                "\"FATHER_NAME\" TEXT," + // 11: fatherName
                "\"FATHER_IDNO\" TEXT," + // 12: fatherIdno
                "\"FATHER_OCCUP_CODE\" TEXT," + // 13: fatherOccupCode
                "\"FATHER_TEL_NO\" TEXT," + // 14: fatherTelNo
                "\"FATHER_BIRTH_DATE\" INTEGER," + // 15: fatherBirthDate
                "\"FATHER_WORK_UNIT\" TEXT," + // 16: fatherWorkUnit
                "\"MOTHER_ID\" TEXT," + // 17: motherId
                "\"MOTHER_NAME\" TEXT," + // 18: motherName
                "\"MOTHER_IDNO\" TEXT," + // 19: motherIdno
                "\"MOTHER_OCCUP_CODE\" TEXT," + // 20: motherOccupCode
                "\"MOTHER_TEL_NO\" TEXT," + // 21: motherTelNo
                "\"MOTHER_BIRTH_DATE\" INTEGER," + // 22: motherBirthDate
                "\"MOTHER_WORK_UNIT\" TEXT," + // 23: motherWorkUnit
                "\"GUARDIAN\" TEXT," + // 24: guardian
                "\"GUARDIAN_RELATION\" TEXT," + // 25: guardianRelation
                "\"GUARDIAN_TEL_NO\" TEXT," + // 26: guardianTelNo
                "\"GUARDIAN_WORK_UNIT\" TEXT," + // 27: guardianWorkUnit
                "\"GUARDIAN_ADDRESS\" TEXT," + // 28: guardianAddress
                "\"BIRTH_GEST_WEEKS\" INTEGER," + // 29: birthGestWeeks
                "\"BIRTH_GEST_DAYS\" INTEGER," + // 30: birthGestDays
                "\"MOTHER_HDCP_CODE\" TEXT," + // 31: motherHdcpCode
                "\"MOTHER_HDCP_OTHERS_DESC\" TEXT," + // 32: motherHdcpOthersDesc
                "\"DELIVERY_ORG_NAME\" TEXT," + // 33: deliveryOrgName
                "\"LAST_DELIVER_WAY_CODE\" TEXT," + // 34: lastDeliverWayCode
                "\"TWINS_CODE\" TEXT," + // 35: twinsCode
                "\"ASPHYXIA_CODE\" TEXT," + // 36: asphyxiaCode
                "\"SUFFOCATION_TYPE\" TEXT," + // 37: suffocationType
                "\"APGAR_SCORE_CODE\" TEXT," + // 38: apgarScoreCode
                "\"APGAR_SCORE\" INTEGER," + // 39: apgarScore
                "\"MALFORM_CODE\" TEXT," + // 40: malformCode
                "\"MALFORM_DESC\" TEXT," + // 41: malformDesc
                "\"HEARING_SCREEN_CODE\" TEXT," + // 42: hearingScreenCode
                "\"HEARING_SCREEN_RESULT_CODE\" TEXT," + // 43: hearingScreenResultCode
                "\"DISEASE_SCREEN_CODE\" TEXT," + // 44: diseaseScreenCode
                "\"DISEASE_SCREEN_OTHERS_DESC\" TEXT," + // 45: diseaseScreenOthersDesc
                "\"BIRTH_WEIGHT\" REAL," + // 46: birthWeight
                "\"BIRTH_LENGTH\" REAL," + // 47: birthLength
                "\"CHILDREN_BOOK_IS_BUILD\" INTEGER," + // 48: childrenBookIsBuild
                "\"CHILDREN_BOOK_BUILD_DATE\" INTEGER," + // 49: childrenBookBuildDate
                "\"RESPONDENT\" TEXT," + // 50: respondent
                "\"INVESTIGATE_DATE\" INTEGER," + // 51: investigateDate
                "\"CASE_STATUS\" TEXT," + // 52: caseStatus
                "\"LAST_VISIT_DATE\" INTEGER," + // 53: lastVisitDate
                "\"LAST_VISIT_TYPE_CODE\" TEXT," + // 54: lastVisitTypeCode
                "\"LAST_VISIT_PERSON\" TEXT," + // 55: lastVisitPerson
                "\"NEXT_VISIT_DATE\" INTEGER," + // 56: nextVisitDate
                "\"NEXT_VISIT_TYPE_CODE\" TEXT," + // 57: nextVisitTypeCode
                "\"NEXT_VISIT_PERSON\" TEXT," + // 58: nextVisitPerson
                "\"IS_WEAK_CHILDREN\" INTEGER," + // 59: isWeakChildren
                "\"IS_CANCEL\" INTEGER," + // 60: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 61: createOrgId
                "\"ORG_NAME\" TEXT," + // 62: orgName
                "\"CREATOR_ID\" TEXT," + // 63: creatorId
                "\"CREATOR\" TEXT," + // 64: creator
                "\"CREATE_TIME\" INTEGER," + // 65: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 66: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 67: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 68: modifierId
                "\"MODIFIER\" TEXT," + // 69: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 70: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 71: jsonDetail
                "\"ASSESSMENT_COUNT\" INTEGER," + // 72: assessmentCount
                "\"MISSING_COUNT\" INTEGER," + // 73: missingCount
                "\"INTACT_RATE\" REAL," + // 74: intactRate
                "\"CLOSE_CASE_CODE\" TEXT," + // 75: closeCaseCode
                "\"CLOSE_CASE_REASON\" TEXT);"); // 76: closeCaseReason
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildInfo entity) {
        stmt.clearBindings();
 
        String childInfoId = entity.getChildInfoId();
        if (childInfoId != null) {
            stmt.bindString(1, childInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String childInfoNo = entity.getChildInfoNo();
        if (childInfoNo != null) {
            stmt.bindString(4, childInfoNo);
        }
 
        String childInfoSno = entity.getChildInfoSno();
        if (childInfoSno != null) {
            stmt.bindString(5, childInfoSno);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(6, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(7, newbornSexCode);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(8, newbornBirthDate.getTime());
        }
 
        String newbornIdNo = entity.getNewbornIdNo();
        if (newbornIdNo != null) {
            stmt.bindString(9, newbornIdNo);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(10, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(11, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(12, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(13, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(14, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(15, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(16, fatherBirthDate.getTime());
        }
 
        String fatherWorkUnit = entity.getFatherWorkUnit();
        if (fatherWorkUnit != null) {
            stmt.bindString(17, fatherWorkUnit);
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(18, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(19, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(20, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(21, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(22, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(23, motherBirthDate.getTime());
        }
 
        String motherWorkUnit = entity.getMotherWorkUnit();
        if (motherWorkUnit != null) {
            stmt.bindString(24, motherWorkUnit);
        }
 
        String guardian = entity.getGuardian();
        if (guardian != null) {
            stmt.bindString(25, guardian);
        }
 
        String guardianRelation = entity.getGuardianRelation();
        if (guardianRelation != null) {
            stmt.bindString(26, guardianRelation);
        }
 
        String guardianTelNo = entity.getGuardianTelNo();
        if (guardianTelNo != null) {
            stmt.bindString(27, guardianTelNo);
        }
 
        String guardianWorkUnit = entity.getGuardianWorkUnit();
        if (guardianWorkUnit != null) {
            stmt.bindString(28, guardianWorkUnit);
        }
 
        String guardianAddress = entity.getGuardianAddress();
        if (guardianAddress != null) {
            stmt.bindString(29, guardianAddress);
        }
 
        Integer birthGestWeeks = entity.getBirthGestWeeks();
        if (birthGestWeeks != null) {
            stmt.bindLong(30, birthGestWeeks);
        }
 
        Integer birthGestDays = entity.getBirthGestDays();
        if (birthGestDays != null) {
            stmt.bindLong(31, birthGestDays);
        }
 
        String motherHdcpCode = entity.getMotherHdcpCode();
        if (motherHdcpCode != null) {
            stmt.bindString(32, motherHdcpCode);
        }
 
        String motherHdcpOthersDesc = entity.getMotherHdcpOthersDesc();
        if (motherHdcpOthersDesc != null) {
            stmt.bindString(33, motherHdcpOthersDesc);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(34, deliveryOrgName);
        }
 
        String lastDeliverWayCode = entity.getLastDeliverWayCode();
        if (lastDeliverWayCode != null) {
            stmt.bindString(35, lastDeliverWayCode);
        }
 
        String twinsCode = entity.getTwinsCode();
        if (twinsCode != null) {
            stmt.bindString(36, twinsCode);
        }
 
        String asphyxiaCode = entity.getAsphyxiaCode();
        if (asphyxiaCode != null) {
            stmt.bindString(37, asphyxiaCode);
        }
 
        String suffocationType = entity.getSuffocationType();
        if (suffocationType != null) {
            stmt.bindString(38, suffocationType);
        }
 
        String apgarScoreCode = entity.getApgarScoreCode();
        if (apgarScoreCode != null) {
            stmt.bindString(39, apgarScoreCode);
        }
 
        Integer apgarScore = entity.getApgarScore();
        if (apgarScore != null) {
            stmt.bindLong(40, apgarScore);
        }
 
        String malformCode = entity.getMalformCode();
        if (malformCode != null) {
            stmt.bindString(41, malformCode);
        }
 
        String malformDesc = entity.getMalformDesc();
        if (malformDesc != null) {
            stmt.bindString(42, malformDesc);
        }
 
        String hearingScreenCode = entity.getHearingScreenCode();
        if (hearingScreenCode != null) {
            stmt.bindString(43, hearingScreenCode);
        }
 
        String hearingScreenResultCode = entity.getHearingScreenResultCode();
        if (hearingScreenResultCode != null) {
            stmt.bindString(44, hearingScreenResultCode);
        }
 
        String diseaseScreenCode = entity.getDiseaseScreenCode();
        if (diseaseScreenCode != null) {
            stmt.bindString(45, diseaseScreenCode);
        }
 
        String diseaseScreenOthersDesc = entity.getDiseaseScreenOthersDesc();
        if (diseaseScreenOthersDesc != null) {
            stmt.bindString(46, diseaseScreenOthersDesc);
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(47, birthWeight);
        }
 
        Double birthLength = entity.getBirthLength();
        if (birthLength != null) {
            stmt.bindDouble(48, birthLength);
        }
 
        Integer childrenBookIsBuild = entity.getChildrenBookIsBuild();
        if (childrenBookIsBuild != null) {
            stmt.bindLong(49, childrenBookIsBuild);
        }
 
        java.util.Date childrenBookBuildDate = entity.getChildrenBookBuildDate();
        if (childrenBookBuildDate != null) {
            stmt.bindLong(50, childrenBookBuildDate.getTime());
        }
 
        String respondent = entity.getRespondent();
        if (respondent != null) {
            stmt.bindString(51, respondent);
        }
 
        java.util.Date investigateDate = entity.getInvestigateDate();
        if (investigateDate != null) {
            stmt.bindLong(52, investigateDate.getTime());
        }
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(53, caseStatus);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(54, lastVisitDate.getTime());
        }
 
        String lastVisitTypeCode = entity.getLastVisitTypeCode();
        if (lastVisitTypeCode != null) {
            stmt.bindString(55, lastVisitTypeCode);
        }
 
        String lastVisitPerson = entity.getLastVisitPerson();
        if (lastVisitPerson != null) {
            stmt.bindString(56, lastVisitPerson);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(57, nextVisitDate.getTime());
        }
 
        String nextVisitTypeCode = entity.getNextVisitTypeCode();
        if (nextVisitTypeCode != null) {
            stmt.bindString(58, nextVisitTypeCode);
        }
 
        String nextVisitPerson = entity.getNextVisitPerson();
        if (nextVisitPerson != null) {
            stmt.bindString(59, nextVisitPerson);
        }
 
        Integer isWeakChildren = entity.getIsWeakChildren();
        if (isWeakChildren != null) {
            stmt.bindLong(60, isWeakChildren);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(61, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(62, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(63, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(64, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(65, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(66, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(67, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(68, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(69, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(70, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(71, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(72, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(73, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(74, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(75, intactRate);
        }
 
        String closeCaseCode = entity.getCloseCaseCode();
        if (closeCaseCode != null) {
            stmt.bindString(76, closeCaseCode);
        }
 
        String closeCaseReason = entity.getCloseCaseReason();
        if (closeCaseReason != null) {
            stmt.bindString(77, closeCaseReason);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildInfo entity) {
        stmt.clearBindings();
 
        String childInfoId = entity.getChildInfoId();
        if (childInfoId != null) {
            stmt.bindString(1, childInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String childInfoNo = entity.getChildInfoNo();
        if (childInfoNo != null) {
            stmt.bindString(4, childInfoNo);
        }
 
        String childInfoSno = entity.getChildInfoSno();
        if (childInfoSno != null) {
            stmt.bindString(5, childInfoSno);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(6, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(7, newbornSexCode);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(8, newbornBirthDate.getTime());
        }
 
        String newbornIdNo = entity.getNewbornIdNo();
        if (newbornIdNo != null) {
            stmt.bindString(9, newbornIdNo);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(10, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(11, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(12, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(13, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(14, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(15, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(16, fatherBirthDate.getTime());
        }
 
        String fatherWorkUnit = entity.getFatherWorkUnit();
        if (fatherWorkUnit != null) {
            stmt.bindString(17, fatherWorkUnit);
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(18, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(19, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(20, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(21, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(22, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(23, motherBirthDate.getTime());
        }
 
        String motherWorkUnit = entity.getMotherWorkUnit();
        if (motherWorkUnit != null) {
            stmt.bindString(24, motherWorkUnit);
        }
 
        String guardian = entity.getGuardian();
        if (guardian != null) {
            stmt.bindString(25, guardian);
        }
 
        String guardianRelation = entity.getGuardianRelation();
        if (guardianRelation != null) {
            stmt.bindString(26, guardianRelation);
        }
 
        String guardianTelNo = entity.getGuardianTelNo();
        if (guardianTelNo != null) {
            stmt.bindString(27, guardianTelNo);
        }
 
        String guardianWorkUnit = entity.getGuardianWorkUnit();
        if (guardianWorkUnit != null) {
            stmt.bindString(28, guardianWorkUnit);
        }
 
        String guardianAddress = entity.getGuardianAddress();
        if (guardianAddress != null) {
            stmt.bindString(29, guardianAddress);
        }
 
        Integer birthGestWeeks = entity.getBirthGestWeeks();
        if (birthGestWeeks != null) {
            stmt.bindLong(30, birthGestWeeks);
        }
 
        Integer birthGestDays = entity.getBirthGestDays();
        if (birthGestDays != null) {
            stmt.bindLong(31, birthGestDays);
        }
 
        String motherHdcpCode = entity.getMotherHdcpCode();
        if (motherHdcpCode != null) {
            stmt.bindString(32, motherHdcpCode);
        }
 
        String motherHdcpOthersDesc = entity.getMotherHdcpOthersDesc();
        if (motherHdcpOthersDesc != null) {
            stmt.bindString(33, motherHdcpOthersDesc);
        }
 
        String deliveryOrgName = entity.getDeliveryOrgName();
        if (deliveryOrgName != null) {
            stmt.bindString(34, deliveryOrgName);
        }
 
        String lastDeliverWayCode = entity.getLastDeliverWayCode();
        if (lastDeliverWayCode != null) {
            stmt.bindString(35, lastDeliverWayCode);
        }
 
        String twinsCode = entity.getTwinsCode();
        if (twinsCode != null) {
            stmt.bindString(36, twinsCode);
        }
 
        String asphyxiaCode = entity.getAsphyxiaCode();
        if (asphyxiaCode != null) {
            stmt.bindString(37, asphyxiaCode);
        }
 
        String suffocationType = entity.getSuffocationType();
        if (suffocationType != null) {
            stmt.bindString(38, suffocationType);
        }
 
        String apgarScoreCode = entity.getApgarScoreCode();
        if (apgarScoreCode != null) {
            stmt.bindString(39, apgarScoreCode);
        }
 
        Integer apgarScore = entity.getApgarScore();
        if (apgarScore != null) {
            stmt.bindLong(40, apgarScore);
        }
 
        String malformCode = entity.getMalformCode();
        if (malformCode != null) {
            stmt.bindString(41, malformCode);
        }
 
        String malformDesc = entity.getMalformDesc();
        if (malformDesc != null) {
            stmt.bindString(42, malformDesc);
        }
 
        String hearingScreenCode = entity.getHearingScreenCode();
        if (hearingScreenCode != null) {
            stmt.bindString(43, hearingScreenCode);
        }
 
        String hearingScreenResultCode = entity.getHearingScreenResultCode();
        if (hearingScreenResultCode != null) {
            stmt.bindString(44, hearingScreenResultCode);
        }
 
        String diseaseScreenCode = entity.getDiseaseScreenCode();
        if (diseaseScreenCode != null) {
            stmt.bindString(45, diseaseScreenCode);
        }
 
        String diseaseScreenOthersDesc = entity.getDiseaseScreenOthersDesc();
        if (diseaseScreenOthersDesc != null) {
            stmt.bindString(46, diseaseScreenOthersDesc);
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(47, birthWeight);
        }
 
        Double birthLength = entity.getBirthLength();
        if (birthLength != null) {
            stmt.bindDouble(48, birthLength);
        }
 
        Integer childrenBookIsBuild = entity.getChildrenBookIsBuild();
        if (childrenBookIsBuild != null) {
            stmt.bindLong(49, childrenBookIsBuild);
        }
 
        java.util.Date childrenBookBuildDate = entity.getChildrenBookBuildDate();
        if (childrenBookBuildDate != null) {
            stmt.bindLong(50, childrenBookBuildDate.getTime());
        }
 
        String respondent = entity.getRespondent();
        if (respondent != null) {
            stmt.bindString(51, respondent);
        }
 
        java.util.Date investigateDate = entity.getInvestigateDate();
        if (investigateDate != null) {
            stmt.bindLong(52, investigateDate.getTime());
        }
 
        String caseStatus = entity.getCaseStatus();
        if (caseStatus != null) {
            stmt.bindString(53, caseStatus);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(54, lastVisitDate.getTime());
        }
 
        String lastVisitTypeCode = entity.getLastVisitTypeCode();
        if (lastVisitTypeCode != null) {
            stmt.bindString(55, lastVisitTypeCode);
        }
 
        String lastVisitPerson = entity.getLastVisitPerson();
        if (lastVisitPerson != null) {
            stmt.bindString(56, lastVisitPerson);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(57, nextVisitDate.getTime());
        }
 
        String nextVisitTypeCode = entity.getNextVisitTypeCode();
        if (nextVisitTypeCode != null) {
            stmt.bindString(58, nextVisitTypeCode);
        }
 
        String nextVisitPerson = entity.getNextVisitPerson();
        if (nextVisitPerson != null) {
            stmt.bindString(59, nextVisitPerson);
        }
 
        Integer isWeakChildren = entity.getIsWeakChildren();
        if (isWeakChildren != null) {
            stmt.bindLong(60, isWeakChildren);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(61, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(62, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(63, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(64, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(65, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(66, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(67, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(68, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(69, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(70, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(71, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(72, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(73, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(74, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(75, intactRate);
        }
 
        String closeCaseCode = entity.getCloseCaseCode();
        if (closeCaseCode != null) {
            stmt.bindString(76, closeCaseCode);
        }
 
        String closeCaseReason = entity.getCloseCaseReason();
        if (closeCaseReason != null) {
            stmt.bindString(77, closeCaseReason);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildInfo readEntity(Cursor cursor, int offset) {
        ChildInfo entity = new ChildInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // manageOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // childInfoNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // childInfoSno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // newbornName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newbornSexCode
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // newbornBirthDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // newbornIdNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // presentAddrProvince
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fatherId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fatherName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fatherIdno
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fatherOccupCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fatherTelNo
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // fatherBirthDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fatherWorkUnit
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // motherId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // motherName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // motherIdno
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // motherOccupCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // motherTelNo
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // motherBirthDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // motherWorkUnit
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // guardian
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // guardianRelation
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // guardianTelNo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // guardianWorkUnit
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // guardianAddress
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // birthGestWeeks
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // birthGestDays
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // motherHdcpCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // motherHdcpOthersDesc
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // deliveryOrgName
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // lastDeliverWayCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // twinsCode
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // asphyxiaCode
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // suffocationType
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // apgarScoreCode
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // apgarScore
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // malformCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // malformDesc
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // hearingScreenCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // hearingScreenResultCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // diseaseScreenCode
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // diseaseScreenOthersDesc
            cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46), // birthWeight
            cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47), // birthLength
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // childrenBookIsBuild
            cursor.isNull(offset + 49) ? null : new java.util.Date(cursor.getLong(offset + 49)), // childrenBookBuildDate
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // respondent
            cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)), // investigateDate
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // caseStatus
            cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)), // lastVisitDate
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // lastVisitTypeCode
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // lastVisitPerson
            cursor.isNull(offset + 56) ? null : new java.util.Date(cursor.getLong(offset + 56)), // nextVisitDate
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // nextVisitTypeCode
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // nextVisitPerson
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // isWeakChildren
            cursor.isNull(offset + 60) ? null : cursor.getInt(offset + 60), // isCancel
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // createOrgId
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // orgName
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // creatorId
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // creator
            cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)), // createTime
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // modifiedOrgId
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // modifiedOrgName
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // modifierId
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // modifier
            cursor.isNull(offset + 70) ? null : new java.util.Date(cursor.getLong(offset + 70)), // modifiedTime
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // jsonDetail
            cursor.isNull(offset + 72) ? null : cursor.getInt(offset + 72), // assessmentCount
            cursor.isNull(offset + 73) ? null : cursor.getInt(offset + 73), // missingCount
            cursor.isNull(offset + 74) ? null : cursor.getDouble(offset + 74), // intactRate
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // closeCaseCode
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76) // closeCaseReason
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildInfo entity, int offset) {
        entity.setChildInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManageOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChildInfoNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChildInfoSno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNewbornName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNewbornSexCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNewbornBirthDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setNewbornIdNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPresentAddrProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFatherId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFatherName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFatherIdno(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFatherOccupCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFatherTelNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFatherBirthDate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setFatherWorkUnit(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMotherId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMotherName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMotherIdno(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMotherOccupCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMotherTelNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMotherBirthDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setMotherWorkUnit(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGuardian(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGuardianRelation(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setGuardianTelNo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setGuardianWorkUnit(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setGuardianAddress(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setBirthGestWeeks(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setBirthGestDays(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setMotherHdcpCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMotherHdcpOthersDesc(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDeliveryOrgName(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setLastDeliverWayCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTwinsCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setAsphyxiaCode(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSuffocationType(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setApgarScoreCode(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setApgarScore(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setMalformCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setMalformDesc(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setHearingScreenCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setHearingScreenResultCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setDiseaseScreenCode(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setDiseaseScreenOthersDesc(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setBirthWeight(cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46));
        entity.setBirthLength(cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47));
        entity.setChildrenBookIsBuild(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setChildrenBookBuildDate(cursor.isNull(offset + 49) ? null : new java.util.Date(cursor.getLong(offset + 49)));
        entity.setRespondent(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setInvestigateDate(cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)));
        entity.setCaseStatus(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setLastVisitDate(cursor.isNull(offset + 53) ? null : new java.util.Date(cursor.getLong(offset + 53)));
        entity.setLastVisitTypeCode(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setLastVisitPerson(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setNextVisitDate(cursor.isNull(offset + 56) ? null : new java.util.Date(cursor.getLong(offset + 56)));
        entity.setNextVisitTypeCode(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setNextVisitPerson(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setIsWeakChildren(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setIsCancel(cursor.isNull(offset + 60) ? null : cursor.getInt(offset + 60));
        entity.setCreateOrgId(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setOrgName(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setCreatorId(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setCreator(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setCreateTime(cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)));
        entity.setModifiedOrgId(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setModifiedOrgName(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setModifierId(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setModifier(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setModifiedTime(cursor.isNull(offset + 70) ? null : new java.util.Date(cursor.getLong(offset + 70)));
        entity.setJsonDetail(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setAssessmentCount(cursor.isNull(offset + 72) ? null : cursor.getInt(offset + 72));
        entity.setMissingCount(cursor.isNull(offset + 73) ? null : cursor.getInt(offset + 73));
        entity.setIntactRate(cursor.isNull(offset + 74) ? null : cursor.getDouble(offset + 74));
        entity.setCloseCaseCode(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setCloseCaseReason(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
