package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.MaternalInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_INFO".
*/
public class MaternalInfoDao extends AbstractDao<MaternalInfo, Void> {

    public static final String TABLENAME = "MATERNAL_INFO";

    /**
     * Properties of entity MaternalInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaternalInfoId = new Property(0, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Birthday = new Property(3, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property HusbandPersonInfoId = new Property(4, String.class, "husbandPersonInfoId", false, "HUSBAND_PERSON_INFO_ID");
        public final static Property HusbandName = new Property(5, String.class, "husbandName", false, "HUSBAND_NAME");
        public final static Property IsCancel = new Property(6, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property HusbandTelNo = new Property(7, String.class, "husbandTelNo", false, "HUSBAND_TEL_NO");
        public final static Property HusbandBirthday = new Property(8, java.util.Date.class, "husbandBirthday", false, "HUSBAND_BIRTHDAY");
        public final static Property PregantCount = new Property(9, Integer.class, "pregantCount", false, "PREGANT_COUNT");
        public final static Property Gravidity = new Property(10, Integer.class, "gravidity", false, "GRAVIDITY");
        public final static Property Parity = new Property(11, Integer.class, "parity", false, "PARITY");
        public final static Property SpontaneousAbortionCount = new Property(12, Integer.class, "spontaneousAbortionCount", false, "SPONTANEOUS_ABORTION_COUNT");
        public final static Property ArtificialAbortionCount = new Property(13, Integer.class, "artificialAbortionCount", false, "ARTIFICIAL_ABORTION_COUNT");
        public final static Property Height = new Property(14, Double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(15, Double.class, "weight", false, "WEIGHT");
        public final static Property Bmi = new Property(16, Double.class, "bmi", false, "BMI");
        public final static Property CreateOrgId = new Property(17, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(18, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(19, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(20, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(21, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(22, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(23, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(24, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(25, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(26, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property LastVisitDate = new Property(27, java.util.Date.class, "lastVisitDate", false, "LAST_VISIT_DATE");
        public final static Property LastVisitDoctor = new Property(28, String.class, "lastVisitDoctor", false, "LAST_VISIT_DOCTOR");
        public final static Property LastVisitType = new Property(29, Integer.class, "lastVisitType", false, "LAST_VISIT_TYPE");
        public final static Property NextVisitDate = new Property(30, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property NextVisitDoctor = new Property(31, String.class, "nextVisitDoctor", false, "NEXT_VISIT_DOCTOR");
        public final static Property NextVisitType = new Property(32, Integer.class, "nextVisitType", false, "NEXT_VISIT_TYPE");
        public final static Property IsUpload = new Property(33, Integer.class, "isUpload", false, "IS_UPLOAD");
    };


    public MaternalInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_INFO\" (" + //
                "\"MATERNAL_INFO_ID\" TEXT," + // 0: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"NAME\" TEXT," + // 2: name
                "\"BIRTHDAY\" INTEGER," + // 3: birthday
                "\"HUSBAND_PERSON_INFO_ID\" TEXT," + // 4: husbandPersonInfoId
                "\"HUSBAND_NAME\" TEXT," + // 5: husbandName
                "\"IS_CANCEL\" INTEGER," + // 6: isCancel
                "\"HUSBAND_TEL_NO\" TEXT," + // 7: husbandTelNo
                "\"HUSBAND_BIRTHDAY\" INTEGER," + // 8: husbandBirthday
                "\"PREGANT_COUNT\" INTEGER," + // 9: pregantCount
                "\"GRAVIDITY\" INTEGER," + // 10: gravidity
                "\"PARITY\" INTEGER," + // 11: parity
                "\"SPONTANEOUS_ABORTION_COUNT\" INTEGER," + // 12: spontaneousAbortionCount
                "\"ARTIFICIAL_ABORTION_COUNT\" INTEGER," + // 13: artificialAbortionCount
                "\"HEIGHT\" REAL," + // 14: height
                "\"WEIGHT\" REAL," + // 15: weight
                "\"BMI\" REAL," + // 16: bmi
                "\"CREATE_ORG_ID\" TEXT," + // 17: createOrgId
                "\"ORG_NAME\" TEXT," + // 18: orgName
                "\"CREATOR_ID\" TEXT," + // 19: creatorId
                "\"CREATOR\" TEXT," + // 20: creator
                "\"CREATE_TIME\" INTEGER," + // 21: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 22: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 23: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 24: modifierId
                "\"MODIFIER\" TEXT," + // 25: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 26: modifiedTime
                "\"LAST_VISIT_DATE\" INTEGER," + // 27: lastVisitDate
                "\"LAST_VISIT_DOCTOR\" TEXT," + // 28: lastVisitDoctor
                "\"LAST_VISIT_TYPE\" INTEGER," + // 29: lastVisitType
                "\"NEXT_VISIT_DATE\" INTEGER," + // 30: nextVisitDate
                "\"NEXT_VISIT_DOCTOR\" TEXT," + // 31: nextVisitDoctor
                "\"NEXT_VISIT_TYPE\" INTEGER," + // 32: nextVisitType
                "\"IS_UPLOAD\" INTEGER);"); // 33: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalInfo entity) {
        stmt.clearBindings();
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(1, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(4, birthday.getTime());
        }
 
        String husbandPersonInfoId = entity.getHusbandPersonInfoId();
        if (husbandPersonInfoId != null) {
            stmt.bindString(5, husbandPersonInfoId);
        }
 
        String husbandName = entity.getHusbandName();
        if (husbandName != null) {
            stmt.bindString(6, husbandName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String husbandTelNo = entity.getHusbandTelNo();
        if (husbandTelNo != null) {
            stmt.bindString(8, husbandTelNo);
        }
 
        java.util.Date husbandBirthday = entity.getHusbandBirthday();
        if (husbandBirthday != null) {
            stmt.bindLong(9, husbandBirthday.getTime());
        }
 
        Integer pregantCount = entity.getPregantCount();
        if (pregantCount != null) {
            stmt.bindLong(10, pregantCount);
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(11, gravidity);
        }
 
        Integer parity = entity.getParity();
        if (parity != null) {
            stmt.bindLong(12, parity);
        }
 
        Integer spontaneousAbortionCount = entity.getSpontaneousAbortionCount();
        if (spontaneousAbortionCount != null) {
            stmt.bindLong(13, spontaneousAbortionCount);
        }
 
        Integer artificialAbortionCount = entity.getArtificialAbortionCount();
        if (artificialAbortionCount != null) {
            stmt.bindLong(14, artificialAbortionCount);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(16, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(17, bmi);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(18, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(19, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(20, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(21, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(22, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(23, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(24, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(25, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(26, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(27, modifiedTime.getTime());
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(28, lastVisitDate.getTime());
        }
 
        String lastVisitDoctor = entity.getLastVisitDoctor();
        if (lastVisitDoctor != null) {
            stmt.bindString(29, lastVisitDoctor);
        }
 
        Integer lastVisitType = entity.getLastVisitType();
        if (lastVisitType != null) {
            stmt.bindLong(30, lastVisitType);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(31, nextVisitDate.getTime());
        }
 
        String nextVisitDoctor = entity.getNextVisitDoctor();
        if (nextVisitDoctor != null) {
            stmt.bindString(32, nextVisitDoctor);
        }
 
        Integer nextVisitType = entity.getNextVisitType();
        if (nextVisitType != null) {
            stmt.bindLong(33, nextVisitType);
        }
 
        Integer isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(34, isUpload);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalInfo entity) {
        stmt.clearBindings();
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(1, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(4, birthday.getTime());
        }
 
        String husbandPersonInfoId = entity.getHusbandPersonInfoId();
        if (husbandPersonInfoId != null) {
            stmt.bindString(5, husbandPersonInfoId);
        }
 
        String husbandName = entity.getHusbandName();
        if (husbandName != null) {
            stmt.bindString(6, husbandName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String husbandTelNo = entity.getHusbandTelNo();
        if (husbandTelNo != null) {
            stmt.bindString(8, husbandTelNo);
        }
 
        java.util.Date husbandBirthday = entity.getHusbandBirthday();
        if (husbandBirthday != null) {
            stmt.bindLong(9, husbandBirthday.getTime());
        }
 
        Integer pregantCount = entity.getPregantCount();
        if (pregantCount != null) {
            stmt.bindLong(10, pregantCount);
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(11, gravidity);
        }
 
        Integer parity = entity.getParity();
        if (parity != null) {
            stmt.bindLong(12, parity);
        }
 
        Integer spontaneousAbortionCount = entity.getSpontaneousAbortionCount();
        if (spontaneousAbortionCount != null) {
            stmt.bindLong(13, spontaneousAbortionCount);
        }
 
        Integer artificialAbortionCount = entity.getArtificialAbortionCount();
        if (artificialAbortionCount != null) {
            stmt.bindLong(14, artificialAbortionCount);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(16, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(17, bmi);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(18, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(19, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(20, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(21, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(22, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(23, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(24, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(25, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(26, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(27, modifiedTime.getTime());
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(28, lastVisitDate.getTime());
        }
 
        String lastVisitDoctor = entity.getLastVisitDoctor();
        if (lastVisitDoctor != null) {
            stmt.bindString(29, lastVisitDoctor);
        }
 
        Integer lastVisitType = entity.getLastVisitType();
        if (lastVisitType != null) {
            stmt.bindLong(30, lastVisitType);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(31, nextVisitDate.getTime());
        }
 
        String nextVisitDoctor = entity.getNextVisitDoctor();
        if (nextVisitDoctor != null) {
            stmt.bindString(32, nextVisitDoctor);
        }
 
        Integer nextVisitType = entity.getNextVisitType();
        if (nextVisitType != null) {
            stmt.bindLong(33, nextVisitType);
        }
 
        Integer isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(34, isUpload);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalInfo readEntity(Cursor cursor, int offset) {
        MaternalInfo entity = new MaternalInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maternalInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // husbandPersonInfoId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // husbandName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isCancel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // husbandTelNo
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // husbandBirthday
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // pregantCount
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // gravidity
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // parity
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // spontaneousAbortionCount
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // artificialAbortionCount
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // height
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // weight
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // bmi
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // createOrgId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // orgName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // creatorId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // creator
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // createTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // modifiedOrgId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // modifiedOrgName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // modifierId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // modifier
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // modifiedTime
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // lastVisitDate
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // lastVisitDoctor
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // lastVisitType
            cursor.isNull(offset + 30) ? null : new java.util.Date(cursor.getLong(offset + 30)), // nextVisitDate
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // nextVisitDoctor
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // nextVisitType
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33) // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalInfo entity, int offset) {
        entity.setMaternalInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setHusbandPersonInfoId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHusbandName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCancel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHusbandTelNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHusbandBirthday(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPregantCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setGravidity(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setParity(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSpontaneousAbortionCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setArtificialAbortionCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setHeight(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setWeight(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setBmi(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setCreateOrgId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrgName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreatorId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreator(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreateTime(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setModifiedOrgId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setModifiedOrgName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setModifierId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setModifier(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setModifiedTime(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setLastVisitDate(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setLastVisitDoctor(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setLastVisitType(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setNextVisitDate(cursor.isNull(offset + 30) ? null : new java.util.Date(cursor.getLong(offset + 30)));
        entity.setNextVisitDoctor(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setNextVisitType(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setIsUpload(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
