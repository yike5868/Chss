package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.SickMedicine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SICK_MEDICINE".
*/
public class SickMedicineDao extends AbstractDao<SickMedicine, Void> {

    public static final String TABLENAME = "SICK_MEDICINE";

    /**
     * Properties of entity SickMedicine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SickMedicineId = new Property(0, String.class, "sickMedicineId", false, "SICK_MEDICINE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Pym = new Property(3, String.class, "pym", false, "PYM");
        public final static Property Wbm = new Property(4, String.class, "wbm", false, "WBM");
        public final static Property IsValid = new Property(5, String.class, "isValid", false, "IS_VALID");
        public final static Property IsCancel = new Property(6, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property MedicineDose = new Property(7, String.class, "medicineDose", false, "MEDICINE_DOSE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Unit = new Property(9, String.class, "unit", false, "UNIT");
    };


    public SickMedicineDao(DaoConfig config) {
        super(config);
    }
    
    public SickMedicineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SICK_MEDICINE\" (" + //
                "\"SICK_MEDICINE_ID\" TEXT," + // 0: sickMedicineId
                "\"NAME\" TEXT," + // 1: name
                "\"CODE\" TEXT," + // 2: code
                "\"PYM\" TEXT," + // 3: pym
                "\"WBM\" TEXT," + // 4: wbm
                "\"IS_VALID\" TEXT," + // 5: isValid
                "\"IS_CANCEL\" INTEGER," + // 6: isCancel
                "\"MEDICINE_DOSE\" TEXT," + // 7: medicineDose
                "\"TYPE\" TEXT," + // 8: type
                "\"UNIT\" TEXT);"); // 9: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SICK_MEDICINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SickMedicine entity) {
        stmt.clearBindings();
 
        String sickMedicineId = entity.getSickMedicineId();
        if (sickMedicineId != null) {
            stmt.bindString(1, sickMedicineId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(4, pym);
        }
 
        String wbm = entity.getWbm();
        if (wbm != null) {
            stmt.bindString(5, wbm);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(6, isValid);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String medicineDose = entity.getMedicineDose();
        if (medicineDose != null) {
            stmt.bindString(8, medicineDose);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(10, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SickMedicine entity) {
        stmt.clearBindings();
 
        String sickMedicineId = entity.getSickMedicineId();
        if (sickMedicineId != null) {
            stmt.bindString(1, sickMedicineId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(4, pym);
        }
 
        String wbm = entity.getWbm();
        if (wbm != null) {
            stmt.bindString(5, wbm);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(6, isValid);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(7, isCancel);
        }
 
        String medicineDose = entity.getMedicineDose();
        if (medicineDose != null) {
            stmt.bindString(8, medicineDose);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(10, unit);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SickMedicine readEntity(Cursor cursor, int offset) {
        SickMedicine entity = new SickMedicine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sickMedicineId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pym
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wbm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isValid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isCancel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // medicineDose
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SickMedicine entity, int offset) {
        entity.setSickMedicineId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPym(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWbm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsValid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCancel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMedicineDose(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SickMedicine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SickMedicine entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
