package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.hyperinfo.HyperFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HYPER_FOLLOWUP".
*/
public class HyperFollowupDao extends AbstractDao<HyperFollowup, Void> {

    public static final String TABLENAME = "HYPER_FOLLOWUP";

    /**
     * Properties of entity HyperFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HyperFollowupId = new Property(0, String.class, "hyperFollowupId", false, "HYPER_FOLLOWUP_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property HyperFollowupNo = new Property(2, String.class, "hyperFollowupNo", false, "HYPER_FOLLOWUP_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property RespDoctorName = new Property(4, String.class, "respDoctorName", false, "RESP_DOCTOR_NAME");
        public final static Property FollowupDate = new Property(5, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(6, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property VisitType = new Property(7, String.class, "visitType", false, "VISIT_TYPE");
        public final static Property IsMiss = new Property(8, String.class, "isMiss", false, "IS_MISS");
        public final static Property MissReason = new Property(9, String.class, "missReason", false, "MISS_REASON");
        public final static Property Sbp = new Property(10, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(11, Integer.class, "dbp", false, "DBP");
        public final static Property Weight = new Property(12, Double.class, "weight", false, "WEIGHT");
        public final static Property AimWeight = new Property(13, Double.class, "aimWeight", false, "AIM_WEIGHT");
        public final static Property Height = new Property(14, Double.class, "height", false, "HEIGHT");
        public final static Property Waist = new Property(15, Double.class, "waist", false, "WAIST");
        public final static Property Bmi = new Property(16, Double.class, "bmi", false, "BMI");
        public final static Property AimBmi = new Property(17, Double.class, "aimBmi", false, "AIM_BMI");
        public final static Property HeartRate = new Property(18, Integer.class, "heartRate", false, "HEART_RATE");
        public final static Property OtherPositiveSigns = new Property(19, String.class, "otherPositiveSigns", false, "OTHER_POSITIVE_SIGNS");
        public final static Property DailySmoking = new Property(20, Integer.class, "dailySmoking", false, "DAILY_SMOKING");
        public final static Property AimDailySmoking = new Property(21, Integer.class, "aimDailySmoking", false, "AIM_DAILY_SMOKING");
        public final static Property DailyDrinking = new Property(22, Integer.class, "dailyDrinking", false, "DAILY_DRINKING");
        public final static Property AimDailyDrinking = new Property(23, Integer.class, "aimDailyDrinking", false, "AIM_DAILY_DRINKING");
        public final static Property ExerciseFreqCode = new Property(24, String.class, "exerciseFreqCode", false, "EXERCISE_FREQ_CODE");
        public final static Property AimExerciseFreqCode = new Property(25, String.class, "aimExerciseFreqCode", false, "AIM_EXERCISE_FREQ_CODE");
        public final static Property ExerciseDurationWeeks = new Property(26, Integer.class, "exerciseDurationWeeks", false, "EXERCISE_DURATION_WEEKS");
        public final static Property AimDurationWeeks = new Property(27, Integer.class, "aimDurationWeeks", false, "AIM_DURATION_WEEKS");
        public final static Property ExerciseDurationMins = new Property(28, Integer.class, "exerciseDurationMins", false, "EXERCISE_DURATION_MINS");
        public final static Property AimExerciseMins = new Property(29, Integer.class, "aimExerciseMins", false, "AIM_EXERCISE_MINS");
        public final static Property SaltTakenLevelCode = new Property(30, String.class, "saltTakenLevelCode", false, "SALT_TAKEN_LEVEL_CODE");
        public final static Property AimSalttakenLevelCode = new Property(31, String.class, "aimSalttakenLevelCode", false, "AIM_SALTTAKEN_LEVEL_CODE");
        public final static Property PsyAdjustResultCode = new Property(32, String.class, "psyAdjustResultCode", false, "PSY_ADJUST_RESULT_CODE");
        public final static Property ComplianceResultCode = new Property(33, String.class, "complianceResultCode", false, "COMPLIANCE_RESULT_CODE");
        public final static Property IsReferralCode = new Property(34, String.class, "isReferralCode", false, "IS_REFERRAL_CODE");
        public final static Property ReferralReason = new Property(35, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property RefertoOrgName = new Property(36, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(37, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property NextFollowupDate = new Property(38, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property FollowupDoctorId = new Property(39, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(40, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property AccessoryExam = new Property(41, String.class, "accessoryExam", false, "ACCESSORY_EXAM");
        public final static Property DrugComplianceCode = new Property(42, String.class, "drugComplianceCode", false, "DRUG_COMPLIANCE_CODE");
        public final static Property DrugAdverseCode = new Property(43, String.class, "drugAdverseCode", false, "DRUG_ADVERSE_CODE");
        public final static Property DrugAdverseDesc = new Property(44, String.class, "drugAdverseDesc", false, "DRUG_ADVERSE_DESC");
        public final static Property FollowupClassifyCode = new Property(45, String.class, "followupClassifyCode", false, "FOLLOWUP_CLASSIFY_CODE");
        public final static Property IsCancel = new Property(46, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(47, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(48, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(49, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(50, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(51, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(52, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(53, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(54, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(55, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(56, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(57, String.class, "jsonDetail", false, "JSON_DETAIL");
    };


    public HyperFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public HyperFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HYPER_FOLLOWUP\" (" + //
                "\"HYPER_FOLLOWUP_ID\" TEXT," + // 0: hyperFollowupId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"HYPER_FOLLOWUP_NO\" TEXT," + // 2: hyperFollowupNo
                "\"NAME\" TEXT," + // 3: name
                "\"RESP_DOCTOR_NAME\" TEXT," + // 4: respDoctorName
                "\"FOLLOWUP_DATE\" INTEGER," + // 5: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 6: followupWayCode
                "\"VISIT_TYPE\" TEXT," + // 7: visitType
                "\"IS_MISS\" TEXT," + // 8: isMiss
                "\"MISS_REASON\" TEXT," + // 9: missReason
                "\"SBP\" INTEGER," + // 10: sbp
                "\"DBP\" INTEGER," + // 11: dbp
                "\"WEIGHT\" REAL," + // 12: weight
                "\"AIM_WEIGHT\" REAL," + // 13: aimWeight
                "\"HEIGHT\" REAL," + // 14: height
                "\"WAIST\" REAL," + // 15: waist
                "\"BMI\" REAL," + // 16: bmi
                "\"AIM_BMI\" REAL," + // 17: aimBmi
                "\"HEART_RATE\" INTEGER," + // 18: heartRate
                "\"OTHER_POSITIVE_SIGNS\" TEXT," + // 19: otherPositiveSigns
                "\"DAILY_SMOKING\" INTEGER," + // 20: dailySmoking
                "\"AIM_DAILY_SMOKING\" INTEGER," + // 21: aimDailySmoking
                "\"DAILY_DRINKING\" INTEGER," + // 22: dailyDrinking
                "\"AIM_DAILY_DRINKING\" INTEGER," + // 23: aimDailyDrinking
                "\"EXERCISE_FREQ_CODE\" TEXT," + // 24: exerciseFreqCode
                "\"AIM_EXERCISE_FREQ_CODE\" TEXT," + // 25: aimExerciseFreqCode
                "\"EXERCISE_DURATION_WEEKS\" INTEGER," + // 26: exerciseDurationWeeks
                "\"AIM_DURATION_WEEKS\" INTEGER," + // 27: aimDurationWeeks
                "\"EXERCISE_DURATION_MINS\" INTEGER," + // 28: exerciseDurationMins
                "\"AIM_EXERCISE_MINS\" INTEGER," + // 29: aimExerciseMins
                "\"SALT_TAKEN_LEVEL_CODE\" TEXT," + // 30: saltTakenLevelCode
                "\"AIM_SALTTAKEN_LEVEL_CODE\" TEXT," + // 31: aimSalttakenLevelCode
                "\"PSY_ADJUST_RESULT_CODE\" TEXT," + // 32: psyAdjustResultCode
                "\"COMPLIANCE_RESULT_CODE\" TEXT," + // 33: complianceResultCode
                "\"IS_REFERRAL_CODE\" TEXT," + // 34: isReferralCode
                "\"REFERRAL_REASON\" TEXT," + // 35: referralReason
                "\"REFERTO_ORG_NAME\" TEXT," + // 36: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 37: refertoDeptName
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 38: nextFollowupDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 39: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 40: followupDoctorName
                "\"ACCESSORY_EXAM\" TEXT," + // 41: accessoryExam
                "\"DRUG_COMPLIANCE_CODE\" TEXT," + // 42: drugComplianceCode
                "\"DRUG_ADVERSE_CODE\" TEXT," + // 43: drugAdverseCode
                "\"DRUG_ADVERSE_DESC\" TEXT," + // 44: drugAdverseDesc
                "\"FOLLOWUP_CLASSIFY_CODE\" TEXT," + // 45: followupClassifyCode
                "\"IS_CANCEL\" INTEGER," + // 46: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 47: createOrgId
                "\"ORG_NAME\" TEXT," + // 48: orgName
                "\"CREATOR_ID\" TEXT," + // 49: creatorId
                "\"CREATOR\" TEXT," + // 50: creator
                "\"CREATE_TIME\" INTEGER," + // 51: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 52: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 53: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 54: modifierId
                "\"MODIFIER\" TEXT," + // 55: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 56: modifiedTime
                "\"JSON_DETAIL\" TEXT);"); // 57: jsonDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HYPER_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HyperFollowup entity) {
        stmt.clearBindings();
 
        String hyperFollowupId = entity.getHyperFollowupId();
        if (hyperFollowupId != null) {
            stmt.bindString(1, hyperFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String hyperFollowupNo = entity.getHyperFollowupNo();
        if (hyperFollowupNo != null) {
            stmt.bindString(3, hyperFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(6, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(7, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(8, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(9, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(10, missReason);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(11, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(12, dbp);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(14, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double waist = entity.getWaist();
        if (waist != null) {
            stmt.bindDouble(16, waist);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(17, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(18, aimBmi);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(19, heartRate);
        }
 
        String otherPositiveSigns = entity.getOtherPositiveSigns();
        if (otherPositiveSigns != null) {
            stmt.bindString(20, otherPositiveSigns);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(21, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(22, aimDailySmoking);
        }
 
        Integer dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindLong(23, dailyDrinking);
        }
 
        Integer aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindLong(24, aimDailyDrinking);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(25, exerciseFreqCode);
        }
 
        String aimExerciseFreqCode = entity.getAimExerciseFreqCode();
        if (aimExerciseFreqCode != null) {
            stmt.bindString(26, aimExerciseFreqCode);
        }
 
        Integer exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindLong(27, exerciseDurationWeeks);
        }
 
        Integer aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindLong(28, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(29, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(30, aimExerciseMins);
        }
 
        String saltTakenLevelCode = entity.getSaltTakenLevelCode();
        if (saltTakenLevelCode != null) {
            stmt.bindString(31, saltTakenLevelCode);
        }
 
        String aimSalttakenLevelCode = entity.getAimSalttakenLevelCode();
        if (aimSalttakenLevelCode != null) {
            stmt.bindString(32, aimSalttakenLevelCode);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(33, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(34, complianceResultCode);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(35, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(36, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(37, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(38, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(39, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(40, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(41, followupDoctorName);
        }
 
        String accessoryExam = entity.getAccessoryExam();
        if (accessoryExam != null) {
            stmt.bindString(42, accessoryExam);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(43, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(44, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(45, drugAdverseDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(46, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(47, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(48, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(49, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(50, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(51, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(52, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(53, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(54, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(55, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(56, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(57, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(58, jsonDetail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HyperFollowup entity) {
        stmt.clearBindings();
 
        String hyperFollowupId = entity.getHyperFollowupId();
        if (hyperFollowupId != null) {
            stmt.bindString(1, hyperFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String hyperFollowupNo = entity.getHyperFollowupNo();
        if (hyperFollowupNo != null) {
            stmt.bindString(3, hyperFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(6, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(7, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(8, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(9, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(10, missReason);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(11, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(12, dbp);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(14, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double waist = entity.getWaist();
        if (waist != null) {
            stmt.bindDouble(16, waist);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(17, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(18, aimBmi);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(19, heartRate);
        }
 
        String otherPositiveSigns = entity.getOtherPositiveSigns();
        if (otherPositiveSigns != null) {
            stmt.bindString(20, otherPositiveSigns);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(21, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(22, aimDailySmoking);
        }
 
        Integer dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindLong(23, dailyDrinking);
        }
 
        Integer aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindLong(24, aimDailyDrinking);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(25, exerciseFreqCode);
        }
 
        String aimExerciseFreqCode = entity.getAimExerciseFreqCode();
        if (aimExerciseFreqCode != null) {
            stmt.bindString(26, aimExerciseFreqCode);
        }
 
        Integer exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindLong(27, exerciseDurationWeeks);
        }
 
        Integer aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindLong(28, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(29, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(30, aimExerciseMins);
        }
 
        String saltTakenLevelCode = entity.getSaltTakenLevelCode();
        if (saltTakenLevelCode != null) {
            stmt.bindString(31, saltTakenLevelCode);
        }
 
        String aimSalttakenLevelCode = entity.getAimSalttakenLevelCode();
        if (aimSalttakenLevelCode != null) {
            stmt.bindString(32, aimSalttakenLevelCode);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(33, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(34, complianceResultCode);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(35, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(36, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(37, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(38, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(39, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(40, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(41, followupDoctorName);
        }
 
        String accessoryExam = entity.getAccessoryExam();
        if (accessoryExam != null) {
            stmt.bindString(42, accessoryExam);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(43, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(44, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(45, drugAdverseDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(46, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(47, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(48, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(49, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(50, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(51, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(52, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(53, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(54, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(55, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(56, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(57, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(58, jsonDetail);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HyperFollowup readEntity(Cursor cursor, int offset) {
        HyperFollowup entity = new HyperFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // hyperFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hyperFollowupNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // respDoctorName
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // followupDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // followupWayCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // visitType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isMiss
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // missReason
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sbp
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // dbp
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // weight
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // aimWeight
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // height
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // waist
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // bmi
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // aimBmi
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // heartRate
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // otherPositiveSigns
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // dailySmoking
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // aimDailySmoking
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // dailyDrinking
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // aimDailyDrinking
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // exerciseFreqCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // aimExerciseFreqCode
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // exerciseDurationWeeks
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // aimDurationWeeks
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // exerciseDurationMins
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // aimExerciseMins
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // saltTakenLevelCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // aimSalttakenLevelCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // psyAdjustResultCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // complianceResultCode
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // isReferralCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // referralReason
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // refertoOrgName
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // refertoDeptName
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)), // nextFollowupDate
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // followupDoctorId
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // followupDoctorName
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // accessoryExam
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // drugComplianceCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // drugAdverseCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // drugAdverseDesc
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // followupClassifyCode
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // isCancel
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // createOrgId
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // orgName
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // creatorId
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // creator
            cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)), // createTime
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // modifiedOrgId
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // modifiedOrgName
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // modifierId
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // modifier
            cursor.isNull(offset + 56) ? null : new java.util.Date(cursor.getLong(offset + 56)), // modifiedTime
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57) // jsonDetail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HyperFollowup entity, int offset) {
        entity.setHyperFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHyperFollowupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRespDoctorName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFollowupDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFollowupWayCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVisitType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsMiss(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMissReason(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSbp(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDbp(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setWeight(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setAimWeight(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setHeight(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setWaist(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setBmi(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setAimBmi(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setHeartRate(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setOtherPositiveSigns(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDailySmoking(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAimDailySmoking(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setDailyDrinking(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setAimDailyDrinking(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setExerciseFreqCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setAimExerciseFreqCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setExerciseDurationWeeks(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setAimDurationWeeks(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setExerciseDurationMins(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setAimExerciseMins(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setSaltTakenLevelCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setAimSalttakenLevelCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPsyAdjustResultCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setComplianceResultCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setIsReferralCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setReferralReason(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setRefertoOrgName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setRefertoDeptName(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setNextFollowupDate(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFollowupDoctorName(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setAccessoryExam(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setDrugComplianceCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setDrugAdverseCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setDrugAdverseDesc(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setFollowupClassifyCode(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setIsCancel(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setCreateOrgId(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setOrgName(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setCreatorId(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setCreator(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setCreateTime(cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)));
        entity.setModifiedOrgId(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setModifiedOrgName(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setModifierId(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setModifier(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setModifiedTime(cursor.isNull(offset + 56) ? null : new java.util.Date(cursor.getLong(offset + 56)));
        entity.setJsonDetail(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HyperFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HyperFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
