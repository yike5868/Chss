package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.exam.HealthExamNoplanVacc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH_EXAM_NOPLAN_VACC".
*/
public class HealthExamNoplanVaccDao extends AbstractDao<HealthExamNoplanVacc, Void> {

    public static final String TABLENAME = "HEALTH_EXAM_NOPLAN_VACC";

    /**
     * Properties of entity HealthExamNoplanVacc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HealthExamId = new Property(0, String.class, "healthExamId", false, "HEALTH_EXAM_ID");
        public final static Property Ssn = new Property(1, Integer.class, "ssn", false, "SSN");
        public final static Property VaccineCode = new Property(2, String.class, "vaccineCode", false, "VACCINE_CODE");
        public final static Property VaccinationDate = new Property(3, java.util.Date.class, "vaccinationDate", false, "VACCINATION_DATE");
        public final static Property VaccinationOrgName = new Property(4, String.class, "vaccinationOrgName", false, "VACCINATION_ORG_NAME");
    };


    public HealthExamNoplanVaccDao(DaoConfig config) {
        super(config);
    }
    
    public HealthExamNoplanVaccDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH_EXAM_NOPLAN_VACC\" (" + //
                "\"HEALTH_EXAM_ID\" TEXT," + // 0: healthExamId
                "\"SSN\" INTEGER," + // 1: ssn
                "\"VACCINE_CODE\" TEXT," + // 2: vaccineCode
                "\"VACCINATION_DATE\" INTEGER," + // 3: vaccinationDate
                "\"VACCINATION_ORG_NAME\" TEXT);"); // 4: vaccinationOrgName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH_EXAM_NOPLAN_VACC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HealthExamNoplanVacc entity) {
        stmt.clearBindings();
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(1, healthExamId);
        }
 
        Integer ssn = entity.getSsn();
        if (ssn != null) {
            stmt.bindLong(2, ssn);
        }
 
        String vaccineCode = entity.getVaccineCode();
        if (vaccineCode != null) {
            stmt.bindString(3, vaccineCode);
        }
 
        java.util.Date vaccinationDate = entity.getVaccinationDate();
        if (vaccinationDate != null) {
            stmt.bindLong(4, vaccinationDate.getTime());
        }
 
        String vaccinationOrgName = entity.getVaccinationOrgName();
        if (vaccinationOrgName != null) {
            stmt.bindString(5, vaccinationOrgName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HealthExamNoplanVacc entity) {
        stmt.clearBindings();
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(1, healthExamId);
        }
 
        Integer ssn = entity.getSsn();
        if (ssn != null) {
            stmt.bindLong(2, ssn);
        }
 
        String vaccineCode = entity.getVaccineCode();
        if (vaccineCode != null) {
            stmt.bindString(3, vaccineCode);
        }
 
        java.util.Date vaccinationDate = entity.getVaccinationDate();
        if (vaccinationDate != null) {
            stmt.bindLong(4, vaccinationDate.getTime());
        }
 
        String vaccinationOrgName = entity.getVaccinationOrgName();
        if (vaccinationOrgName != null) {
            stmt.bindString(5, vaccinationOrgName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HealthExamNoplanVacc readEntity(Cursor cursor, int offset) {
        HealthExamNoplanVacc entity = new HealthExamNoplanVacc( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // healthExamId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ssn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vaccineCode
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // vaccinationDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // vaccinationOrgName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HealthExamNoplanVacc entity, int offset) {
        entity.setHealthExamId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSsn(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setVaccineCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVaccinationDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setVaccinationOrgName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HealthExamNoplanVacc entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HealthExamNoplanVacc entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
