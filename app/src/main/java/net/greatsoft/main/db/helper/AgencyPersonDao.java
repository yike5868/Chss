package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.AgencyPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AGENCY_PERSON".
*/
public class AgencyPersonDao extends AbstractDao<AgencyPerson, Void> {

    public static final String TABLENAME = "AGENCY_PERSON";

    /**
     * Properties of entity AgencyPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AgencyFamilyId = new Property(0, String.class, "agencyFamilyId", false, "AGENCY_FAMILY_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MoveBeforeOrgId = new Property(2, String.class, "moveBeforeOrgId", false, "MOVE_BEFORE_ORG_ID");
        public final static Property MoveAfterOrgId = new Property(3, String.class, "moveAfterOrgId", false, "MOVE_AFTER_ORG_ID");
        public final static Property MoveInDate = new Property(4, java.util.Date.class, "moveInDate", false, "MOVE_IN_DATE");
        public final static Property MoveInReason = new Property(5, Integer.class, "moveInReason", false, "MOVE_IN_REASON");
        public final static Property MoveInOrgId = new Property(6, String.class, "moveInOrgId", false, "MOVE_IN_ORG_ID");
        public final static Property MoveInOrgName = new Property(7, String.class, "moveInOrgName", false, "MOVE_IN_ORG_NAME");
        public final static Property MoveInCreatorId = new Property(8, String.class, "moveInCreatorId", false, "MOVE_IN_CREATOR_ID");
        public final static Property MoveInCreator = new Property(9, String.class, "moveInCreator", false, "MOVE_IN_CREATOR");
        public final static Property MoveInTime = new Property(10, java.util.Date.class, "moveInTime", false, "MOVE_IN_TIME");
        public final static Property MoveOutDate = new Property(11, java.util.Date.class, "moveOutDate", false, "MOVE_OUT_DATE");
        public final static Property MoveOutReason = new Property(12, Integer.class, "moveOutReason", false, "MOVE_OUT_REASON");
        public final static Property MoveOutOrgId = new Property(13, String.class, "moveOutOrgId", false, "MOVE_OUT_ORG_ID");
        public final static Property MoveOutOrgName = new Property(14, String.class, "moveOutOrgName", false, "MOVE_OUT_ORG_NAME");
        public final static Property MoveOutCreatorId = new Property(15, String.class, "moveOutCreatorId", false, "MOVE_OUT_CREATOR_ID");
        public final static Property MoveOutCreator = new Property(16, String.class, "moveOutCreator", false, "MOVE_OUT_CREATOR");
        public final static Property MoveOutTime = new Property(17, java.util.Date.class, "moveOutTime", false, "MOVE_OUT_TIME");
    };


    public AgencyPersonDao(DaoConfig config) {
        super(config);
    }
    
    public AgencyPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGENCY_PERSON\" (" + //
                "\"AGENCY_FAMILY_ID\" TEXT," + // 0: agencyFamilyId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"MOVE_BEFORE_ORG_ID\" TEXT," + // 2: moveBeforeOrgId
                "\"MOVE_AFTER_ORG_ID\" TEXT," + // 3: moveAfterOrgId
                "\"MOVE_IN_DATE\" INTEGER," + // 4: moveInDate
                "\"MOVE_IN_REASON\" INTEGER," + // 5: moveInReason
                "\"MOVE_IN_ORG_ID\" TEXT," + // 6: moveInOrgId
                "\"MOVE_IN_ORG_NAME\" TEXT," + // 7: moveInOrgName
                "\"MOVE_IN_CREATOR_ID\" TEXT," + // 8: moveInCreatorId
                "\"MOVE_IN_CREATOR\" TEXT," + // 9: moveInCreator
                "\"MOVE_IN_TIME\" INTEGER," + // 10: moveInTime
                "\"MOVE_OUT_DATE\" INTEGER," + // 11: moveOutDate
                "\"MOVE_OUT_REASON\" INTEGER," + // 12: moveOutReason
                "\"MOVE_OUT_ORG_ID\" TEXT," + // 13: moveOutOrgId
                "\"MOVE_OUT_ORG_NAME\" TEXT," + // 14: moveOutOrgName
                "\"MOVE_OUT_CREATOR_ID\" TEXT," + // 15: moveOutCreatorId
                "\"MOVE_OUT_CREATOR\" TEXT," + // 16: moveOutCreator
                "\"MOVE_OUT_TIME\" INTEGER);"); // 17: moveOutTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGENCY_PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AgencyPerson entity) {
        stmt.clearBindings();
 
        String agencyFamilyId = entity.getAgencyFamilyId();
        if (agencyFamilyId != null) {
            stmt.bindString(1, agencyFamilyId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String moveBeforeOrgId = entity.getMoveBeforeOrgId();
        if (moveBeforeOrgId != null) {
            stmt.bindString(3, moveBeforeOrgId);
        }
 
        String moveAfterOrgId = entity.getMoveAfterOrgId();
        if (moveAfterOrgId != null) {
            stmt.bindString(4, moveAfterOrgId);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(5, moveInDate.getTime());
        }
 
        Integer moveInReason = entity.getMoveInReason();
        if (moveInReason != null) {
            stmt.bindLong(6, moveInReason);
        }
 
        String moveInOrgId = entity.getMoveInOrgId();
        if (moveInOrgId != null) {
            stmt.bindString(7, moveInOrgId);
        }
 
        String moveInOrgName = entity.getMoveInOrgName();
        if (moveInOrgName != null) {
            stmt.bindString(8, moveInOrgName);
        }
 
        String moveInCreatorId = entity.getMoveInCreatorId();
        if (moveInCreatorId != null) {
            stmt.bindString(9, moveInCreatorId);
        }
 
        String moveInCreator = entity.getMoveInCreator();
        if (moveInCreator != null) {
            stmt.bindString(10, moveInCreator);
        }
 
        java.util.Date moveInTime = entity.getMoveInTime();
        if (moveInTime != null) {
            stmt.bindLong(11, moveInTime.getTime());
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(12, moveOutDate.getTime());
        }
 
        Integer moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindLong(13, moveOutReason);
        }
 
        String moveOutOrgId = entity.getMoveOutOrgId();
        if (moveOutOrgId != null) {
            stmt.bindString(14, moveOutOrgId);
        }
 
        String moveOutOrgName = entity.getMoveOutOrgName();
        if (moveOutOrgName != null) {
            stmt.bindString(15, moveOutOrgName);
        }
 
        String moveOutCreatorId = entity.getMoveOutCreatorId();
        if (moveOutCreatorId != null) {
            stmt.bindString(16, moveOutCreatorId);
        }
 
        String moveOutCreator = entity.getMoveOutCreator();
        if (moveOutCreator != null) {
            stmt.bindString(17, moveOutCreator);
        }
 
        java.util.Date moveOutTime = entity.getMoveOutTime();
        if (moveOutTime != null) {
            stmt.bindLong(18, moveOutTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AgencyPerson entity) {
        stmt.clearBindings();
 
        String agencyFamilyId = entity.getAgencyFamilyId();
        if (agencyFamilyId != null) {
            stmt.bindString(1, agencyFamilyId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String moveBeforeOrgId = entity.getMoveBeforeOrgId();
        if (moveBeforeOrgId != null) {
            stmt.bindString(3, moveBeforeOrgId);
        }
 
        String moveAfterOrgId = entity.getMoveAfterOrgId();
        if (moveAfterOrgId != null) {
            stmt.bindString(4, moveAfterOrgId);
        }
 
        java.util.Date moveInDate = entity.getMoveInDate();
        if (moveInDate != null) {
            stmt.bindLong(5, moveInDate.getTime());
        }
 
        Integer moveInReason = entity.getMoveInReason();
        if (moveInReason != null) {
            stmt.bindLong(6, moveInReason);
        }
 
        String moveInOrgId = entity.getMoveInOrgId();
        if (moveInOrgId != null) {
            stmt.bindString(7, moveInOrgId);
        }
 
        String moveInOrgName = entity.getMoveInOrgName();
        if (moveInOrgName != null) {
            stmt.bindString(8, moveInOrgName);
        }
 
        String moveInCreatorId = entity.getMoveInCreatorId();
        if (moveInCreatorId != null) {
            stmt.bindString(9, moveInCreatorId);
        }
 
        String moveInCreator = entity.getMoveInCreator();
        if (moveInCreator != null) {
            stmt.bindString(10, moveInCreator);
        }
 
        java.util.Date moveInTime = entity.getMoveInTime();
        if (moveInTime != null) {
            stmt.bindLong(11, moveInTime.getTime());
        }
 
        java.util.Date moveOutDate = entity.getMoveOutDate();
        if (moveOutDate != null) {
            stmt.bindLong(12, moveOutDate.getTime());
        }
 
        Integer moveOutReason = entity.getMoveOutReason();
        if (moveOutReason != null) {
            stmt.bindLong(13, moveOutReason);
        }
 
        String moveOutOrgId = entity.getMoveOutOrgId();
        if (moveOutOrgId != null) {
            stmt.bindString(14, moveOutOrgId);
        }
 
        String moveOutOrgName = entity.getMoveOutOrgName();
        if (moveOutOrgName != null) {
            stmt.bindString(15, moveOutOrgName);
        }
 
        String moveOutCreatorId = entity.getMoveOutCreatorId();
        if (moveOutCreatorId != null) {
            stmt.bindString(16, moveOutCreatorId);
        }
 
        String moveOutCreator = entity.getMoveOutCreator();
        if (moveOutCreator != null) {
            stmt.bindString(17, moveOutCreator);
        }
 
        java.util.Date moveOutTime = entity.getMoveOutTime();
        if (moveOutTime != null) {
            stmt.bindLong(18, moveOutTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AgencyPerson readEntity(Cursor cursor, int offset) {
        AgencyPerson entity = new AgencyPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // agencyFamilyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // moveBeforeOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // moveAfterOrgId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // moveInDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // moveInReason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // moveInOrgId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // moveInOrgName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // moveInCreatorId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // moveInCreator
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // moveInTime
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // moveOutDate
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // moveOutReason
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // moveOutOrgId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // moveOutOrgName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // moveOutCreatorId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // moveOutCreator
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // moveOutTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AgencyPerson entity, int offset) {
        entity.setAgencyFamilyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMoveBeforeOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoveAfterOrgId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoveInDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setMoveInReason(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMoveInOrgId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMoveInOrgName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMoveInCreatorId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMoveInCreator(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMoveInTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setMoveOutDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setMoveOutReason(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMoveOutOrgId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMoveOutOrgName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMoveOutCreatorId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMoveOutCreator(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMoveOutTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AgencyPerson entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AgencyPerson entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
