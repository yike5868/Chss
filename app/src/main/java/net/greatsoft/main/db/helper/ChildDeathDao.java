package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildDeath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_DEATH".
*/
public class ChildDeathDao extends AbstractDao<ChildDeath, Void> {

    public static final String TABLENAME = "CHILD_DEATH";

    /**
     * Properties of entity ChildDeath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildDeathId = new Property(0, String.class, "childDeathId", false, "CHILD_DEATH_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ChildDeathFormNo = new Property(2, String.class, "childDeathFormNo", false, "CHILD_DEATH_FORM_NO");
        public final static Property NewbornName = new Property(3, String.class, "newbornName", false, "NEWBORN_NAME");
        public final static Property SexCode = new Property(4, String.class, "sexCode", false, "SEX_CODE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property HouseholdTypeCode = new Property(6, String.class, "householdTypeCode", false, "HOUSEHOLD_TYPE_CODE");
        public final static Property FatherName = new Property(7, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property MotherName = new Property(8, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property Birthday = new Property(9, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property BirthWeight = new Property(10, Double.class, "birthWeight", false, "BIRTH_WEIGHT");
        public final static Property WeightMeasureTypeCode = new Property(11, String.class, "weightMeasureTypeCode", false, "WEIGHT_MEASURE_TYPE_CODE");
        public final static Property Weeks = new Property(12, Double.class, "weeks", false, "WEEKS");
        public final static Property BirthAddress = new Property(13, String.class, "birthAddress", false, "BIRTH_ADDRESS");
        public final static Property DeathDate = new Property(14, java.util.Date.class, "deathDate", false, "DEATH_DATE");
        public final static Property DeathAge = new Property(15, Integer.class, "deathAge", false, "DEATH_AGE");
        public final static Property DeathMonths = new Property(16, Integer.class, "deathMonths", false, "DEATH_MONTHS");
        public final static Property DeathDays = new Property(17, Integer.class, "deathDays", false, "DEATH_DAYS");
        public final static Property DeathReasonTypeCode = new Property(18, String.class, "deathReasonTypeCode", false, "DEATH_REASON_TYPE_CODE");
        public final static Property DeathDiagnosis = new Property(19, String.class, "deathDiagnosis", false, "DEATH_DIAGNOSIS");
        public final static Property DeathAddress = new Property(20, String.class, "deathAddress", false, "DEATH_ADDRESS");
        public final static Property PredeathTreatment = new Property(21, String.class, "predeathTreatment", false, "PREDEATH_TREATMENT");
        public final static Property DiagnoseGrade = new Property(22, String.class, "diagnoseGrade", false, "DIAGNOSE_GRADE");
        public final static Property NotreatmentReasonCode = new Property(23, String.class, "notreatmentReasonCode", false, "NOTREATMENT_REASON_CODE");
        public final static Property NotreatmentOthersReasonDesc = new Property(24, String.class, "notreatmentOthersReasonDesc", false, "NOTREATMENT_OTHERS_REASON_DESC");
        public final static Property DeathAccording = new Property(25, String.class, "deathAccording", false, "DEATH_ACCORDING");
        public final static Property DeathProof = new Property(26, String.class, "deathProof", false, "DEATH_PROOF");
        public final static Property IsCancel = new Property(27, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(28, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(29, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(30, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(31, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(32, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(33, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(34, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(35, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(36, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(37, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildDeathDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDeathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_DEATH\" (" + //
                "\"CHILD_DEATH_ID\" TEXT," + // 0: childDeathId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CHILD_DEATH_FORM_NO\" TEXT," + // 2: childDeathFormNo
                "\"NEWBORN_NAME\" TEXT," + // 3: newbornName
                "\"SEX_CODE\" TEXT," + // 4: sexCode
                "\"ADDRESS\" TEXT," + // 5: address
                "\"HOUSEHOLD_TYPE_CODE\" TEXT," + // 6: householdTypeCode
                "\"FATHER_NAME\" TEXT," + // 7: fatherName
                "\"MOTHER_NAME\" TEXT," + // 8: motherName
                "\"BIRTHDAY\" INTEGER," + // 9: birthday
                "\"BIRTH_WEIGHT\" REAL," + // 10: birthWeight
                "\"WEIGHT_MEASURE_TYPE_CODE\" TEXT," + // 11: weightMeasureTypeCode
                "\"WEEKS\" REAL," + // 12: weeks
                "\"BIRTH_ADDRESS\" TEXT," + // 13: birthAddress
                "\"DEATH_DATE\" INTEGER," + // 14: deathDate
                "\"DEATH_AGE\" INTEGER," + // 15: deathAge
                "\"DEATH_MONTHS\" INTEGER," + // 16: deathMonths
                "\"DEATH_DAYS\" INTEGER," + // 17: deathDays
                "\"DEATH_REASON_TYPE_CODE\" TEXT," + // 18: deathReasonTypeCode
                "\"DEATH_DIAGNOSIS\" TEXT," + // 19: deathDiagnosis
                "\"DEATH_ADDRESS\" TEXT," + // 20: deathAddress
                "\"PREDEATH_TREATMENT\" TEXT," + // 21: predeathTreatment
                "\"DIAGNOSE_GRADE\" TEXT," + // 22: diagnoseGrade
                "\"NOTREATMENT_REASON_CODE\" TEXT," + // 23: notreatmentReasonCode
                "\"NOTREATMENT_OTHERS_REASON_DESC\" TEXT," + // 24: notreatmentOthersReasonDesc
                "\"DEATH_ACCORDING\" TEXT," + // 25: deathAccording
                "\"DEATH_PROOF\" TEXT," + // 26: deathProof
                "\"IS_CANCEL\" INTEGER," + // 27: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 28: createOrgId
                "\"ORG_NAME\" TEXT," + // 29: orgName
                "\"CREATOR_ID\" TEXT," + // 30: creatorId
                "\"CREATOR\" TEXT," + // 31: creator
                "\"CREATE_TIME\" INTEGER," + // 32: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 33: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 34: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 35: modifierId
                "\"MODIFIER\" TEXT," + // 36: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 37: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_DEATH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildDeath entity) {
        stmt.clearBindings();
 
        String childDeathId = entity.getChildDeathId();
        if (childDeathId != null) {
            stmt.bindString(1, childDeathId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childDeathFormNo = entity.getChildDeathFormNo();
        if (childDeathFormNo != null) {
            stmt.bindString(3, childDeathFormNo);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(4, newbornName);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(7, householdTypeCode);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(8, fatherName);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(9, motherName);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(10, birthday.getTime());
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(11, birthWeight);
        }
 
        String weightMeasureTypeCode = entity.getWeightMeasureTypeCode();
        if (weightMeasureTypeCode != null) {
            stmt.bindString(12, weightMeasureTypeCode);
        }
 
        Double weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindDouble(13, weeks);
        }
 
        String birthAddress = entity.getBirthAddress();
        if (birthAddress != null) {
            stmt.bindString(14, birthAddress);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(15, deathDate.getTime());
        }
 
        Integer deathAge = entity.getDeathAge();
        if (deathAge != null) {
            stmt.bindLong(16, deathAge);
        }
 
        Integer deathMonths = entity.getDeathMonths();
        if (deathMonths != null) {
            stmt.bindLong(17, deathMonths);
        }
 
        Integer deathDays = entity.getDeathDays();
        if (deathDays != null) {
            stmt.bindLong(18, deathDays);
        }
 
        String deathReasonTypeCode = entity.getDeathReasonTypeCode();
        if (deathReasonTypeCode != null) {
            stmt.bindString(19, deathReasonTypeCode);
        }
 
        String deathDiagnosis = entity.getDeathDiagnosis();
        if (deathDiagnosis != null) {
            stmt.bindString(20, deathDiagnosis);
        }
 
        String deathAddress = entity.getDeathAddress();
        if (deathAddress != null) {
            stmt.bindString(21, deathAddress);
        }
 
        String predeathTreatment = entity.getPredeathTreatment();
        if (predeathTreatment != null) {
            stmt.bindString(22, predeathTreatment);
        }
 
        String diagnoseGrade = entity.getDiagnoseGrade();
        if (diagnoseGrade != null) {
            stmt.bindString(23, diagnoseGrade);
        }
 
        String notreatmentReasonCode = entity.getNotreatmentReasonCode();
        if (notreatmentReasonCode != null) {
            stmt.bindString(24, notreatmentReasonCode);
        }
 
        String notreatmentOthersReasonDesc = entity.getNotreatmentOthersReasonDesc();
        if (notreatmentOthersReasonDesc != null) {
            stmt.bindString(25, notreatmentOthersReasonDesc);
        }
 
        String deathAccording = entity.getDeathAccording();
        if (deathAccording != null) {
            stmt.bindString(26, deathAccording);
        }
 
        String deathProof = entity.getDeathProof();
        if (deathProof != null) {
            stmt.bindString(27, deathProof);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(28, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(29, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(31, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(32, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(33, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(34, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(35, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(36, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(37, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(38, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildDeath entity) {
        stmt.clearBindings();
 
        String childDeathId = entity.getChildDeathId();
        if (childDeathId != null) {
            stmt.bindString(1, childDeathId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childDeathFormNo = entity.getChildDeathFormNo();
        if (childDeathFormNo != null) {
            stmt.bindString(3, childDeathFormNo);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(4, newbornName);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(7, householdTypeCode);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(8, fatherName);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(9, motherName);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(10, birthday.getTime());
        }
 
        Double birthWeight = entity.getBirthWeight();
        if (birthWeight != null) {
            stmt.bindDouble(11, birthWeight);
        }
 
        String weightMeasureTypeCode = entity.getWeightMeasureTypeCode();
        if (weightMeasureTypeCode != null) {
            stmt.bindString(12, weightMeasureTypeCode);
        }
 
        Double weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindDouble(13, weeks);
        }
 
        String birthAddress = entity.getBirthAddress();
        if (birthAddress != null) {
            stmt.bindString(14, birthAddress);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(15, deathDate.getTime());
        }
 
        Integer deathAge = entity.getDeathAge();
        if (deathAge != null) {
            stmt.bindLong(16, deathAge);
        }
 
        Integer deathMonths = entity.getDeathMonths();
        if (deathMonths != null) {
            stmt.bindLong(17, deathMonths);
        }
 
        Integer deathDays = entity.getDeathDays();
        if (deathDays != null) {
            stmt.bindLong(18, deathDays);
        }
 
        String deathReasonTypeCode = entity.getDeathReasonTypeCode();
        if (deathReasonTypeCode != null) {
            stmt.bindString(19, deathReasonTypeCode);
        }
 
        String deathDiagnosis = entity.getDeathDiagnosis();
        if (deathDiagnosis != null) {
            stmt.bindString(20, deathDiagnosis);
        }
 
        String deathAddress = entity.getDeathAddress();
        if (deathAddress != null) {
            stmt.bindString(21, deathAddress);
        }
 
        String predeathTreatment = entity.getPredeathTreatment();
        if (predeathTreatment != null) {
            stmt.bindString(22, predeathTreatment);
        }
 
        String diagnoseGrade = entity.getDiagnoseGrade();
        if (diagnoseGrade != null) {
            stmt.bindString(23, diagnoseGrade);
        }
 
        String notreatmentReasonCode = entity.getNotreatmentReasonCode();
        if (notreatmentReasonCode != null) {
            stmt.bindString(24, notreatmentReasonCode);
        }
 
        String notreatmentOthersReasonDesc = entity.getNotreatmentOthersReasonDesc();
        if (notreatmentOthersReasonDesc != null) {
            stmt.bindString(25, notreatmentOthersReasonDesc);
        }
 
        String deathAccording = entity.getDeathAccording();
        if (deathAccording != null) {
            stmt.bindString(26, deathAccording);
        }
 
        String deathProof = entity.getDeathProof();
        if (deathProof != null) {
            stmt.bindString(27, deathProof);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(28, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(29, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(31, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(32, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(33, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(34, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(35, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(36, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(37, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(38, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildDeath readEntity(Cursor cursor, int offset) {
        ChildDeath entity = new ChildDeath( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childDeathId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childDeathFormNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newbornName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // householdTypeCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fatherName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // motherName
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // birthWeight
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // weightMeasureTypeCode
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // weeks
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // birthAddress
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // deathDate
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // deathAge
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // deathMonths
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // deathDays
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // deathReasonTypeCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // deathDiagnosis
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // deathAddress
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // predeathTreatment
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // diagnoseGrade
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // notreatmentReasonCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // notreatmentOthersReasonDesc
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // deathAccording
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // deathProof
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // isCancel
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // createOrgId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // orgName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // creatorId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // creator
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // createTime
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // modifiedOrgId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // modifiedOrgName
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // modifierId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modifier
            cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildDeath entity, int offset) {
        entity.setChildDeathId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildDeathFormNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewbornName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSexCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHouseholdTypeCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFatherName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMotherName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setBirthWeight(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setWeightMeasureTypeCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWeeks(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setBirthAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeathDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setDeathAge(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDeathMonths(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setDeathDays(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setDeathReasonTypeCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDeathDiagnosis(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDeathAddress(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPredeathTreatment(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDiagnoseGrade(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setNotreatmentReasonCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setNotreatmentOthersReasonDesc(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDeathAccording(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDeathProof(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsCancel(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setCreateOrgId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setOrgName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCreatorId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCreator(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCreateTime(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setModifiedOrgId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setModifiedOrgName(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setModifierId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModifier(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModifiedTime(cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildDeath entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildDeath entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
