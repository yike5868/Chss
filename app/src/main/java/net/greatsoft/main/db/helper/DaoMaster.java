package net.greatsoft.main.db.helper;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 115): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 115;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AndroidFileRecordDao.createTable(db, ifNotExists);
        CaInfoDrugsDao.createTable(db, ifNotExists);
        CerebralApoplexyFollowupDao.createTable(db, ifNotExists);
        CerebralApoplexyInfoDao.createTable(db, ifNotExists);
        ChecksDao.createTable(db, ifNotExists);
        ChildDeathDao.createTable(db, ifNotExists);
        ChildDiseaseScreenDao.createTable(db, ifNotExists);
        ChildDiseaseScreenDiagDao.createTable(db, ifNotExists);
        ChildDiseaseScreenResultDao.createTable(db, ifNotExists);
        ChildHealthExamDao.createTable(db, ifNotExists);
        ChildHearScreenDao.createTable(db, ifNotExists);
        ChildHomeVisitDao.createTable(db, ifNotExists);
        ChildInfoDao.createTable(db, ifNotExists);
        ChildLedgerDao.createTable(db, ifNotExists);
        ChildPerinatalDeathDao.createTable(db, ifNotExists);
        ChildTcmLedgerDao.createTable(db, ifNotExists);
        ChildWeakFollowupDao.createTable(db, ifNotExists);
        ChildWeakInfoDao.createTable(db, ifNotExists);
        ColorsDao.createTable(db, ifNotExists);
        ChdInfoDrugsDao.createTable(db, ifNotExists);
        CoronaryHeartDiseaseFollowupDao.createTable(db, ifNotExists);
        CoronaryHeartDiseaseInfoDao.createTable(db, ifNotExists);
        DiabetesFollowupDao.createTable(db, ifNotExists);
        DiabetesFollowupDrugDao.createTable(db, ifNotExists);
        DiabetesInfoDao.createTable(db, ifNotExists);
        DiabetesInfoCompDao.createTable(db, ifNotExists);
        DiabetesInfoDrugDao.createTable(db, ifNotExists);
        DiabetesLedgerDao.createTable(db, ifNotExists);
        DictsDao.createTable(db, ifNotExists);
        DisabilityHearingDao.createTable(db, ifNotExists);
        DisabilityIntelligenceDao.createTable(db, ifNotExists);
        DisabilityLimbDao.createTable(db, ifNotExists);
        DisabilityVisualDao.createTable(db, ifNotExists);
        BuildingsDao.createTable(db, ifNotExists);
        DistrictsDao.createTable(db, ifNotExists);
        RoomDao.createTable(db, ifNotExists);
        SubdistrictsDao.createTable(db, ifNotExists);
        DoctorDao.createTable(db, ifNotExists);
        EmpDao.createTable(db, ifNotExists);
        HealthExamDao.createTable(db, ifNotExists);
        HealthExamDrugDao.createTable(db, ifNotExists);
        HealthExamInhosDao.createTable(db, ifNotExists);
        HealthExamNoplanVaccDao.createTable(db, ifNotExists);
        AgencyFamilyDao.createTable(db, ifNotExists);
        FamilyDao.createTable(db, ifNotExists);
        FamilyCredentialDao.createTable(db, ifNotExists);
        FamilyDoctorDao.createTable(db, ifNotExists);
        FamilyEconomicDao.createTable(db, ifNotExists);
        FamilyInfoDao.createTable(db, ifNotExists);
        FamilyMemberDao.createTable(db, ifNotExists);
        FamilyMovedLogDao.createTable(db, ifNotExists);
        HyperFollowupDao.createTable(db, ifNotExists);
        HyperFollowupDrugDao.createTable(db, ifNotExists);
        HyperInfoDao.createTable(db, ifNotExists);
        HyperInfoDrugDao.createTable(db, ifNotExists);
        HyperLedgerDao.createTable(db, ifNotExists);
        MaternalChildbirthDao.createTable(db, ifNotExists);
        MaternalFirstFollowupDao.createTable(db, ifNotExists);
        MaternalFollowupDao.createTable(db, ifNotExists);
        MaternalNewbornSituationDao.createTable(db, ifNotExists);
        MaternalPostpartumFollowupDao.createTable(db, ifNotExists);
        MaternalRegisterDao.createTable(db, ifNotExists);
        MaternalInfoDao.createTable(db, ifNotExists);
        ElderCognitionDao.createTable(db, ifNotExists);
        ElderDepressedDao.createTable(db, ifNotExists);
        ElderExamLedgerDao.createTable(db, ifNotExists);
        ElderInfoDao.createTable(db, ifNotExists);
        ElderSelfcareAbilityDao.createTable(db, ifNotExists);
        ElderTcmHealthDao.createTable(db, ifNotExists);
        ElderTcmLedgerDao.createTable(db, ifNotExists);
        AgencyPersonDao.createTable(db, ifNotExists);
        MemberMovedLogDao.createTable(db, ifNotExists);
        PersonDao.createTable(db, ifNotExists);
        PersonAddressDao.createTable(db, ifNotExists);
        PersonCredentialDao.createTable(db, ifNotExists);
        PersonDeathDao.createTable(db, ifNotExists);
        PersonDiseaseDao.createTable(db, ifNotExists);
        PersonInfoDao.createTable(db, ifNotExists);
        PersonPastHistoryDao.createTable(db, ifNotExists);
        PersonSerialNoDao.createTable(db, ifNotExists);
        PersonServiceCatalogDao.createTable(db, ifNotExists);
        RecordChoiceDao.createTable(db, ifNotExists);
        SickChoiceMedicineDao.createTable(db, ifNotExists);
        SickMedicineDao.createTable(db, ifNotExists);
        SmiFollowupDao.createTable(db, ifNotExists);
        SmiFollowupDrugDao.createTable(db, ifNotExists);
        SmiInfoDao.createTable(db, ifNotExists);
        TermDao.createTable(db, ifNotExists);
        TuberculosisFirstFollowupDao.createTable(db, ifNotExists);
        TuberculosisFollowupDao.createTable(db, ifNotExists);
        TuberculosisInfoDao.createTable(db, ifNotExists);
        TuberculosisReferralDao.createTable(db, ifNotExists);
        UpdateStateDao.createTable(db, ifNotExists);
        CdcVaccreportDao.createTable(db, ifNotExists);
        CdcVaccreportAdverseDao.createTable(db, ifNotExists);
        CdcVaccreportVaccinateDao.createTable(db, ifNotExists);
        OrgChoiceVaccineDao.createTable(db, ifNotExists);
        VaccineDao.createTable(db, ifNotExists);
        VaccineBatchnoDao.createTable(db, ifNotExists);
        VaccineInjectTimesDao.createTable(db, ifNotExists);
        VaccineManufacturerDao.createTable(db, ifNotExists);
        VisitDetailDao.createTable(db, ifNotExists);
        VisitMedicineDao.createTable(db, ifNotExists);
        SessionRspDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AndroidFileRecordDao.dropTable(db, ifExists);
        CaInfoDrugsDao.dropTable(db, ifExists);
        CerebralApoplexyFollowupDao.dropTable(db, ifExists);
        CerebralApoplexyInfoDao.dropTable(db, ifExists);
        ChecksDao.dropTable(db, ifExists);
        ChildDeathDao.dropTable(db, ifExists);
        ChildDiseaseScreenDao.dropTable(db, ifExists);
        ChildDiseaseScreenDiagDao.dropTable(db, ifExists);
        ChildDiseaseScreenResultDao.dropTable(db, ifExists);
        ChildHealthExamDao.dropTable(db, ifExists);
        ChildHearScreenDao.dropTable(db, ifExists);
        ChildHomeVisitDao.dropTable(db, ifExists);
        ChildInfoDao.dropTable(db, ifExists);
        ChildLedgerDao.dropTable(db, ifExists);
        ChildPerinatalDeathDao.dropTable(db, ifExists);
        ChildTcmLedgerDao.dropTable(db, ifExists);
        ChildWeakFollowupDao.dropTable(db, ifExists);
        ChildWeakInfoDao.dropTable(db, ifExists);
        ColorsDao.dropTable(db, ifExists);
        ChdInfoDrugsDao.dropTable(db, ifExists);
        CoronaryHeartDiseaseFollowupDao.dropTable(db, ifExists);
        CoronaryHeartDiseaseInfoDao.dropTable(db, ifExists);
        DiabetesFollowupDao.dropTable(db, ifExists);
        DiabetesFollowupDrugDao.dropTable(db, ifExists);
        DiabetesInfoDao.dropTable(db, ifExists);
        DiabetesInfoCompDao.dropTable(db, ifExists);
        DiabetesInfoDrugDao.dropTable(db, ifExists);
        DiabetesLedgerDao.dropTable(db, ifExists);
        DictsDao.dropTable(db, ifExists);
        DisabilityHearingDao.dropTable(db, ifExists);
        DisabilityIntelligenceDao.dropTable(db, ifExists);
        DisabilityLimbDao.dropTable(db, ifExists);
        DisabilityVisualDao.dropTable(db, ifExists);
        BuildingsDao.dropTable(db, ifExists);
        DistrictsDao.dropTable(db, ifExists);
        RoomDao.dropTable(db, ifExists);
        SubdistrictsDao.dropTable(db, ifExists);
        DoctorDao.dropTable(db, ifExists);
        EmpDao.dropTable(db, ifExists);
        HealthExamDao.dropTable(db, ifExists);
        HealthExamDrugDao.dropTable(db, ifExists);
        HealthExamInhosDao.dropTable(db, ifExists);
        HealthExamNoplanVaccDao.dropTable(db, ifExists);
        AgencyFamilyDao.dropTable(db, ifExists);
        FamilyDao.dropTable(db, ifExists);
        FamilyCredentialDao.dropTable(db, ifExists);
        FamilyDoctorDao.dropTable(db, ifExists);
        FamilyEconomicDao.dropTable(db, ifExists);
        FamilyInfoDao.dropTable(db, ifExists);
        FamilyMemberDao.dropTable(db, ifExists);
        FamilyMovedLogDao.dropTable(db, ifExists);
        HyperFollowupDao.dropTable(db, ifExists);
        HyperFollowupDrugDao.dropTable(db, ifExists);
        HyperInfoDao.dropTable(db, ifExists);
        HyperInfoDrugDao.dropTable(db, ifExists);
        HyperLedgerDao.dropTable(db, ifExists);
        MaternalChildbirthDao.dropTable(db, ifExists);
        MaternalFirstFollowupDao.dropTable(db, ifExists);
        MaternalFollowupDao.dropTable(db, ifExists);
        MaternalNewbornSituationDao.dropTable(db, ifExists);
        MaternalPostpartumFollowupDao.dropTable(db, ifExists);
        MaternalRegisterDao.dropTable(db, ifExists);
        MaternalInfoDao.dropTable(db, ifExists);
        ElderCognitionDao.dropTable(db, ifExists);
        ElderDepressedDao.dropTable(db, ifExists);
        ElderExamLedgerDao.dropTable(db, ifExists);
        ElderInfoDao.dropTable(db, ifExists);
        ElderSelfcareAbilityDao.dropTable(db, ifExists);
        ElderTcmHealthDao.dropTable(db, ifExists);
        ElderTcmLedgerDao.dropTable(db, ifExists);
        AgencyPersonDao.dropTable(db, ifExists);
        MemberMovedLogDao.dropTable(db, ifExists);
        PersonDao.dropTable(db, ifExists);
        PersonAddressDao.dropTable(db, ifExists);
        PersonCredentialDao.dropTable(db, ifExists);
        PersonDeathDao.dropTable(db, ifExists);
        PersonDiseaseDao.dropTable(db, ifExists);
        PersonInfoDao.dropTable(db, ifExists);
        PersonPastHistoryDao.dropTable(db, ifExists);
        PersonSerialNoDao.dropTable(db, ifExists);
        PersonServiceCatalogDao.dropTable(db, ifExists);
        RecordChoiceDao.dropTable(db, ifExists);
        SickChoiceMedicineDao.dropTable(db, ifExists);
        SickMedicineDao.dropTable(db, ifExists);
        SmiFollowupDao.dropTable(db, ifExists);
        SmiFollowupDrugDao.dropTable(db, ifExists);
        SmiInfoDao.dropTable(db, ifExists);
        TermDao.dropTable(db, ifExists);
        TuberculosisFirstFollowupDao.dropTable(db, ifExists);
        TuberculosisFollowupDao.dropTable(db, ifExists);
        TuberculosisInfoDao.dropTable(db, ifExists);
        TuberculosisReferralDao.dropTable(db, ifExists);
        UpdateStateDao.dropTable(db, ifExists);
        CdcVaccreportDao.dropTable(db, ifExists);
        CdcVaccreportAdverseDao.dropTable(db, ifExists);
        CdcVaccreportVaccinateDao.dropTable(db, ifExists);
        OrgChoiceVaccineDao.dropTable(db, ifExists);
        VaccineDao.dropTable(db, ifExists);
        VaccineBatchnoDao.dropTable(db, ifExists);
        VaccineInjectTimesDao.dropTable(db, ifExists);
        VaccineManufacturerDao.dropTable(db, ifExists);
        VisitDetailDao.dropTable(db, ifExists);
        VisitMedicineDao.dropTable(db, ifExists);
        SessionRspDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AndroidFileRecordDao.class);
        registerDaoClass(CaInfoDrugsDao.class);
        registerDaoClass(CerebralApoplexyFollowupDao.class);
        registerDaoClass(CerebralApoplexyInfoDao.class);
        registerDaoClass(ChecksDao.class);
        registerDaoClass(ChildDeathDao.class);
        registerDaoClass(ChildDiseaseScreenDao.class);
        registerDaoClass(ChildDiseaseScreenDiagDao.class);
        registerDaoClass(ChildDiseaseScreenResultDao.class);
        registerDaoClass(ChildHealthExamDao.class);
        registerDaoClass(ChildHearScreenDao.class);
        registerDaoClass(ChildHomeVisitDao.class);
        registerDaoClass(ChildInfoDao.class);
        registerDaoClass(ChildLedgerDao.class);
        registerDaoClass(ChildPerinatalDeathDao.class);
        registerDaoClass(ChildTcmLedgerDao.class);
        registerDaoClass(ChildWeakFollowupDao.class);
        registerDaoClass(ChildWeakInfoDao.class);
        registerDaoClass(ColorsDao.class);
        registerDaoClass(ChdInfoDrugsDao.class);
        registerDaoClass(CoronaryHeartDiseaseFollowupDao.class);
        registerDaoClass(CoronaryHeartDiseaseInfoDao.class);
        registerDaoClass(DiabetesFollowupDao.class);
        registerDaoClass(DiabetesFollowupDrugDao.class);
        registerDaoClass(DiabetesInfoDao.class);
        registerDaoClass(DiabetesInfoCompDao.class);
        registerDaoClass(DiabetesInfoDrugDao.class);
        registerDaoClass(DiabetesLedgerDao.class);
        registerDaoClass(DictsDao.class);
        registerDaoClass(DisabilityHearingDao.class);
        registerDaoClass(DisabilityIntelligenceDao.class);
        registerDaoClass(DisabilityLimbDao.class);
        registerDaoClass(DisabilityVisualDao.class);
        registerDaoClass(BuildingsDao.class);
        registerDaoClass(DistrictsDao.class);
        registerDaoClass(RoomDao.class);
        registerDaoClass(SubdistrictsDao.class);
        registerDaoClass(DoctorDao.class);
        registerDaoClass(EmpDao.class);
        registerDaoClass(HealthExamDao.class);
        registerDaoClass(HealthExamDrugDao.class);
        registerDaoClass(HealthExamInhosDao.class);
        registerDaoClass(HealthExamNoplanVaccDao.class);
        registerDaoClass(AgencyFamilyDao.class);
        registerDaoClass(FamilyDao.class);
        registerDaoClass(FamilyCredentialDao.class);
        registerDaoClass(FamilyDoctorDao.class);
        registerDaoClass(FamilyEconomicDao.class);
        registerDaoClass(FamilyInfoDao.class);
        registerDaoClass(FamilyMemberDao.class);
        registerDaoClass(FamilyMovedLogDao.class);
        registerDaoClass(HyperFollowupDao.class);
        registerDaoClass(HyperFollowupDrugDao.class);
        registerDaoClass(HyperInfoDao.class);
        registerDaoClass(HyperInfoDrugDao.class);
        registerDaoClass(HyperLedgerDao.class);
        registerDaoClass(MaternalChildbirthDao.class);
        registerDaoClass(MaternalFirstFollowupDao.class);
        registerDaoClass(MaternalFollowupDao.class);
        registerDaoClass(MaternalNewbornSituationDao.class);
        registerDaoClass(MaternalPostpartumFollowupDao.class);
        registerDaoClass(MaternalRegisterDao.class);
        registerDaoClass(MaternalInfoDao.class);
        registerDaoClass(ElderCognitionDao.class);
        registerDaoClass(ElderDepressedDao.class);
        registerDaoClass(ElderExamLedgerDao.class);
        registerDaoClass(ElderInfoDao.class);
        registerDaoClass(ElderSelfcareAbilityDao.class);
        registerDaoClass(ElderTcmHealthDao.class);
        registerDaoClass(ElderTcmLedgerDao.class);
        registerDaoClass(AgencyPersonDao.class);
        registerDaoClass(MemberMovedLogDao.class);
        registerDaoClass(PersonDao.class);
        registerDaoClass(PersonAddressDao.class);
        registerDaoClass(PersonCredentialDao.class);
        registerDaoClass(PersonDeathDao.class);
        registerDaoClass(PersonDiseaseDao.class);
        registerDaoClass(PersonInfoDao.class);
        registerDaoClass(PersonPastHistoryDao.class);
        registerDaoClass(PersonSerialNoDao.class);
        registerDaoClass(PersonServiceCatalogDao.class);
        registerDaoClass(RecordChoiceDao.class);
        registerDaoClass(SickChoiceMedicineDao.class);
        registerDaoClass(SickMedicineDao.class);
        registerDaoClass(SmiFollowupDao.class);
        registerDaoClass(SmiFollowupDrugDao.class);
        registerDaoClass(SmiInfoDao.class);
        registerDaoClass(TermDao.class);
        registerDaoClass(TuberculosisFirstFollowupDao.class);
        registerDaoClass(TuberculosisFollowupDao.class);
        registerDaoClass(TuberculosisInfoDao.class);
        registerDaoClass(TuberculosisReferralDao.class);
        registerDaoClass(UpdateStateDao.class);
        registerDaoClass(CdcVaccreportDao.class);
        registerDaoClass(CdcVaccreportAdverseDao.class);
        registerDaoClass(CdcVaccreportVaccinateDao.class);
        registerDaoClass(OrgChoiceVaccineDao.class);
        registerDaoClass(VaccineDao.class);
        registerDaoClass(VaccineBatchnoDao.class);
        registerDaoClass(VaccineInjectTimesDao.class);
        registerDaoClass(VaccineManufacturerDao.class);
        registerDaoClass(VisitDetailDao.class);
        registerDaoClass(VisitMedicineDao.class);
        registerDaoClass(SessionRspDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
