package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonCredential;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_CREDENTIAL".
*/
public class PersonCredentialDao extends AbstractDao<PersonCredential, Void> {

    public static final String TABLENAME = "PERSON_CREDENTIAL";

    /**
     * Properties of entity PersonCredential.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonCredentialId = new Property(0, String.class, "personCredentialId", false, "PERSON_CREDENTIAL_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property CredentialTypeCode = new Property(2, String.class, "credentialTypeCode", false, "CREDENTIAL_TYPE_CODE");
        public final static Property CredentialNo = new Property(3, String.class, "credentialNo", false, "CREDENTIAL_NO");
        public final static Property CredentialTypeValue = new Property(4, String.class, "credentialTypeValue", false, "CREDENTIAL_TYPE_VALUE");
    };


    public PersonCredentialDao(DaoConfig config) {
        super(config);
    }
    
    public PersonCredentialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_CREDENTIAL\" (" + //
                "\"PERSON_CREDENTIAL_ID\" TEXT," + // 0: personCredentialId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CREDENTIAL_TYPE_CODE\" TEXT," + // 2: credentialTypeCode
                "\"CREDENTIAL_NO\" TEXT," + // 3: credentialNo
                "\"CREDENTIAL_TYPE_VALUE\" TEXT);"); // 4: credentialTypeValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_CREDENTIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonCredential entity) {
        stmt.clearBindings();
 
        String personCredentialId = entity.getPersonCredentialId();
        if (personCredentialId != null) {
            stmt.bindString(1, personCredentialId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String credentialTypeCode = entity.getCredentialTypeCode();
        if (credentialTypeCode != null) {
            stmt.bindString(3, credentialTypeCode);
        }
 
        String credentialNo = entity.getCredentialNo();
        if (credentialNo != null) {
            stmt.bindString(4, credentialNo);
        }
 
        String credentialTypeValue = entity.getCredentialTypeValue();
        if (credentialTypeValue != null) {
            stmt.bindString(5, credentialTypeValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonCredential entity) {
        stmt.clearBindings();
 
        String personCredentialId = entity.getPersonCredentialId();
        if (personCredentialId != null) {
            stmt.bindString(1, personCredentialId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String credentialTypeCode = entity.getCredentialTypeCode();
        if (credentialTypeCode != null) {
            stmt.bindString(3, credentialTypeCode);
        }
 
        String credentialNo = entity.getCredentialNo();
        if (credentialNo != null) {
            stmt.bindString(4, credentialNo);
        }
 
        String credentialTypeValue = entity.getCredentialTypeValue();
        if (credentialTypeValue != null) {
            stmt.bindString(5, credentialTypeValue);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonCredential readEntity(Cursor cursor, int offset) {
        PersonCredential entity = new PersonCredential( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personCredentialId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // credentialTypeCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // credentialNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // credentialTypeValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonCredential entity, int offset) {
        entity.setPersonCredentialId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCredentialTypeCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCredentialNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredentialTypeValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonCredential entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonCredential entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
