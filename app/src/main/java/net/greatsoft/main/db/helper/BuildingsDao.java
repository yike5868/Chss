package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.districts.Buildings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUILDINGS".
*/
public class BuildingsDao extends AbstractDao<Buildings, Void> {

    public static final String TABLENAME = "BUILDINGS";

    /**
     * Properties of entity Buildings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BuildingId = new Property(0, String.class, "buildingId", false, "BUILDING_ID");
        public final static Property BuildingName = new Property(1, String.class, "buildingName", false, "BUILDING_NAME");
        public final static Property SubDistrictId = new Property(2, String.class, "subDistrictId", false, "SUB_DISTRICT_ID");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
    };


    public BuildingsDao(DaoConfig config) {
        super(config);
    }
    
    public BuildingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUILDINGS\" (" + //
                "\"BUILDING_ID\" TEXT," + // 0: buildingId
                "\"BUILDING_NAME\" TEXT," + // 1: buildingName
                "\"SUB_DISTRICT_ID\" TEXT," + // 2: subDistrictId
                "\"USERID\" TEXT);"); // 3: userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUILDINGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Buildings entity) {
        stmt.clearBindings();
 
        String buildingId = entity.getBuildingId();
        if (buildingId != null) {
            stmt.bindString(1, buildingId);
        }
 
        String buildingName = entity.getBuildingName();
        if (buildingName != null) {
            stmt.bindString(2, buildingName);
        }
 
        String subDistrictId = entity.getSubDistrictId();
        if (subDistrictId != null) {
            stmt.bindString(3, subDistrictId);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Buildings entity) {
        stmt.clearBindings();
 
        String buildingId = entity.getBuildingId();
        if (buildingId != null) {
            stmt.bindString(1, buildingId);
        }
 
        String buildingName = entity.getBuildingName();
        if (buildingName != null) {
            stmt.bindString(2, buildingName);
        }
 
        String subDistrictId = entity.getSubDistrictId();
        if (subDistrictId != null) {
            stmt.bindString(3, subDistrictId);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Buildings readEntity(Cursor cursor, int offset) {
        Buildings entity = new Buildings( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // buildingId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buildingName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subDistrictId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // userid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Buildings entity, int offset) {
        entity.setBuildingId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBuildingName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubDistrictId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Buildings entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Buildings entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
