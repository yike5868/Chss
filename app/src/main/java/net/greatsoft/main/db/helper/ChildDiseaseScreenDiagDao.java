package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildDiseaseScreenDiag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_DISEASE_SCREEN_DIAG".
*/
public class ChildDiseaseScreenDiagDao extends AbstractDao<ChildDiseaseScreenDiag, Void> {

    public static final String TABLENAME = "CHILD_DISEASE_SCREEN_DIAG";

    /**
     * Properties of entity ChildDiseaseScreenDiag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildDiseaseScreenDiagId = new Property(0, String.class, "childDiseaseScreenDiagId", false, "CHILD_DISEASE_SCREEN_DIAG_ID");
        public final static Property ChildDiseaseScreenId = new Property(1, String.class, "childDiseaseScreenId", false, "CHILD_DISEASE_SCREEN_ID");
        public final static Property DiagnosisItem = new Property(2, String.class, "diagnosisItem", false, "DIAGNOSIS_ITEM");
        public final static Property DiagnosisDate = new Property(3, java.util.Date.class, "diagnosisDate", false, "DIAGNOSIS_DATE");
        public final static Property DiagnosisWay = new Property(4, String.class, "diagnosisWay", false, "DIAGNOSIS_WAY");
        public final static Property Diagnosis = new Property(5, String.class, "diagnosis", false, "DIAGNOSIS");
        public final static Property DiagnosisName = new Property(6, String.class, "diagnosisName", false, "DIAGNOSIS_NAME");
        public final static Property DiagResultCode = new Property(7, String.class, "diagResultCode", false, "DIAG_RESULT_CODE");
        public final static Property DiagPhenylketonuria = new Property(8, String.class, "diagPhenylketonuria", false, "DIAG_PHENYLKETONURIA");
        public final static Property DiagHypothyroidism = new Property(9, String.class, "diagHypothyroidism", false, "DIAG_HYPOTHYROIDISM");
        public final static Property DiagnosisOrgName = new Property(10, String.class, "diagnosisOrgName", false, "DIAGNOSIS_ORG_NAME");
        public final static Property DiagnosisDoctorName = new Property(11, String.class, "diagnosisDoctorName", false, "DIAGNOSIS_DOCTOR_NAME");
        public final static Property CureDate = new Property(12, java.util.Date.class, "cureDate", false, "CURE_DATE");
        public final static Property CureInfo = new Property(13, String.class, "cureInfo", false, "CURE_INFO");
        public final static Property TransferStatus = new Property(14, String.class, "transferStatus", false, "TRANSFER_STATUS");
        public final static Property FinalDate = new Property(15, java.util.Date.class, "finalDate", false, "FINAL_DATE");
        public final static Property Notes = new Property(16, String.class, "notes", false, "NOTES");
        public final static Property IsCancel = new Property(17, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(18, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(19, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(20, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(21, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(22, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(23, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(24, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(25, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(26, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(27, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildDiseaseScreenDiagDao(DaoConfig config) {
        super(config);
    }
    
    public ChildDiseaseScreenDiagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_DISEASE_SCREEN_DIAG\" (" + //
                "\"CHILD_DISEASE_SCREEN_DIAG_ID\" TEXT," + // 0: childDiseaseScreenDiagId
                "\"CHILD_DISEASE_SCREEN_ID\" TEXT," + // 1: childDiseaseScreenId
                "\"DIAGNOSIS_ITEM\" TEXT," + // 2: diagnosisItem
                "\"DIAGNOSIS_DATE\" INTEGER," + // 3: diagnosisDate
                "\"DIAGNOSIS_WAY\" TEXT," + // 4: diagnosisWay
                "\"DIAGNOSIS\" TEXT," + // 5: diagnosis
                "\"DIAGNOSIS_NAME\" TEXT," + // 6: diagnosisName
                "\"DIAG_RESULT_CODE\" TEXT," + // 7: diagResultCode
                "\"DIAG_PHENYLKETONURIA\" TEXT," + // 8: diagPhenylketonuria
                "\"DIAG_HYPOTHYROIDISM\" TEXT," + // 9: diagHypothyroidism
                "\"DIAGNOSIS_ORG_NAME\" TEXT," + // 10: diagnosisOrgName
                "\"DIAGNOSIS_DOCTOR_NAME\" TEXT," + // 11: diagnosisDoctorName
                "\"CURE_DATE\" INTEGER," + // 12: cureDate
                "\"CURE_INFO\" TEXT," + // 13: cureInfo
                "\"TRANSFER_STATUS\" TEXT," + // 14: transferStatus
                "\"FINAL_DATE\" INTEGER," + // 15: finalDate
                "\"NOTES\" TEXT," + // 16: notes
                "\"IS_CANCEL\" INTEGER," + // 17: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 18: createOrgId
                "\"ORG_NAME\" TEXT," + // 19: orgName
                "\"CREATOR_ID\" TEXT," + // 20: creatorId
                "\"CREATOR\" TEXT," + // 21: creator
                "\"CREATE_TIME\" INTEGER," + // 22: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 23: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 24: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 25: modifierId
                "\"MODIFIER\" TEXT," + // 26: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 27: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_DISEASE_SCREEN_DIAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildDiseaseScreenDiag entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenDiagId = entity.getChildDiseaseScreenDiagId();
        if (childDiseaseScreenDiagId != null) {
            stmt.bindString(1, childDiseaseScreenDiagId);
        }
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(2, childDiseaseScreenId);
        }
 
        String diagnosisItem = entity.getDiagnosisItem();
        if (diagnosisItem != null) {
            stmt.bindString(3, diagnosisItem);
        }
 
        java.util.Date diagnosisDate = entity.getDiagnosisDate();
        if (diagnosisDate != null) {
            stmt.bindLong(4, diagnosisDate.getTime());
        }
 
        String diagnosisWay = entity.getDiagnosisWay();
        if (diagnosisWay != null) {
            stmt.bindString(5, diagnosisWay);
        }
 
        String diagnosis = entity.getDiagnosis();
        if (diagnosis != null) {
            stmt.bindString(6, diagnosis);
        }
 
        String diagnosisName = entity.getDiagnosisName();
        if (diagnosisName != null) {
            stmt.bindString(7, diagnosisName);
        }
 
        String diagResultCode = entity.getDiagResultCode();
        if (diagResultCode != null) {
            stmt.bindString(8, diagResultCode);
        }
 
        String diagPhenylketonuria = entity.getDiagPhenylketonuria();
        if (diagPhenylketonuria != null) {
            stmt.bindString(9, diagPhenylketonuria);
        }
 
        String diagHypothyroidism = entity.getDiagHypothyroidism();
        if (diagHypothyroidism != null) {
            stmt.bindString(10, diagHypothyroidism);
        }
 
        String diagnosisOrgName = entity.getDiagnosisOrgName();
        if (diagnosisOrgName != null) {
            stmt.bindString(11, diagnosisOrgName);
        }
 
        String diagnosisDoctorName = entity.getDiagnosisDoctorName();
        if (diagnosisDoctorName != null) {
            stmt.bindString(12, diagnosisDoctorName);
        }
 
        java.util.Date cureDate = entity.getCureDate();
        if (cureDate != null) {
            stmt.bindLong(13, cureDate.getTime());
        }
 
        String cureInfo = entity.getCureInfo();
        if (cureInfo != null) {
            stmt.bindString(14, cureInfo);
        }
 
        String transferStatus = entity.getTransferStatus();
        if (transferStatus != null) {
            stmt.bindString(15, transferStatus);
        }
 
        java.util.Date finalDate = entity.getFinalDate();
        if (finalDate != null) {
            stmt.bindLong(16, finalDate.getTime());
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(17, notes);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(18, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(19, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(20, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(21, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(22, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(23, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(24, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(25, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(26, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(27, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(28, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildDiseaseScreenDiag entity) {
        stmt.clearBindings();
 
        String childDiseaseScreenDiagId = entity.getChildDiseaseScreenDiagId();
        if (childDiseaseScreenDiagId != null) {
            stmt.bindString(1, childDiseaseScreenDiagId);
        }
 
        String childDiseaseScreenId = entity.getChildDiseaseScreenId();
        if (childDiseaseScreenId != null) {
            stmt.bindString(2, childDiseaseScreenId);
        }
 
        String diagnosisItem = entity.getDiagnosisItem();
        if (diagnosisItem != null) {
            stmt.bindString(3, diagnosisItem);
        }
 
        java.util.Date diagnosisDate = entity.getDiagnosisDate();
        if (diagnosisDate != null) {
            stmt.bindLong(4, diagnosisDate.getTime());
        }
 
        String diagnosisWay = entity.getDiagnosisWay();
        if (diagnosisWay != null) {
            stmt.bindString(5, diagnosisWay);
        }
 
        String diagnosis = entity.getDiagnosis();
        if (diagnosis != null) {
            stmt.bindString(6, diagnosis);
        }
 
        String diagnosisName = entity.getDiagnosisName();
        if (diagnosisName != null) {
            stmt.bindString(7, diagnosisName);
        }
 
        String diagResultCode = entity.getDiagResultCode();
        if (diagResultCode != null) {
            stmt.bindString(8, diagResultCode);
        }
 
        String diagPhenylketonuria = entity.getDiagPhenylketonuria();
        if (diagPhenylketonuria != null) {
            stmt.bindString(9, diagPhenylketonuria);
        }
 
        String diagHypothyroidism = entity.getDiagHypothyroidism();
        if (diagHypothyroidism != null) {
            stmt.bindString(10, diagHypothyroidism);
        }
 
        String diagnosisOrgName = entity.getDiagnosisOrgName();
        if (diagnosisOrgName != null) {
            stmt.bindString(11, diagnosisOrgName);
        }
 
        String diagnosisDoctorName = entity.getDiagnosisDoctorName();
        if (diagnosisDoctorName != null) {
            stmt.bindString(12, diagnosisDoctorName);
        }
 
        java.util.Date cureDate = entity.getCureDate();
        if (cureDate != null) {
            stmt.bindLong(13, cureDate.getTime());
        }
 
        String cureInfo = entity.getCureInfo();
        if (cureInfo != null) {
            stmt.bindString(14, cureInfo);
        }
 
        String transferStatus = entity.getTransferStatus();
        if (transferStatus != null) {
            stmt.bindString(15, transferStatus);
        }
 
        java.util.Date finalDate = entity.getFinalDate();
        if (finalDate != null) {
            stmt.bindLong(16, finalDate.getTime());
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(17, notes);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(18, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(19, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(20, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(21, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(22, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(23, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(24, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(25, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(26, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(27, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(28, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildDiseaseScreenDiag readEntity(Cursor cursor, int offset) {
        ChildDiseaseScreenDiag entity = new ChildDiseaseScreenDiag( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childDiseaseScreenDiagId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // childDiseaseScreenId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // diagnosisItem
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // diagnosisDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // diagnosisWay
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // diagnosis
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // diagnosisName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // diagResultCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // diagPhenylketonuria
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // diagHypothyroidism
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // diagnosisOrgName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // diagnosisDoctorName
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // cureDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cureInfo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // transferStatus
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // finalDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // notes
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // isCancel
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // createOrgId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // orgName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // creatorId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // creator
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // createTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // modifiedOrgId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // modifiedOrgName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // modifierId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // modifier
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildDiseaseScreenDiag entity, int offset) {
        entity.setChildDiseaseScreenDiagId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChildDiseaseScreenId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiagnosisItem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiagnosisDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDiagnosisWay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiagnosis(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiagnosisName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDiagResultCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDiagPhenylketonuria(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDiagHypothyroidism(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDiagnosisOrgName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDiagnosisDoctorName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCureDate(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCureInfo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTransferStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFinalDate(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setNotes(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsCancel(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCreateOrgId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrgName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreatorId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreator(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreateTime(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setModifiedOrgId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setModifiedOrgName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setModifierId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setModifier(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setModifiedTime(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildDiseaseScreenDiag entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildDiseaseScreenDiag entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
