package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonDisease;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_DISEASE".
*/
public class PersonDiseaseDao extends AbstractDao<PersonDisease, Void> {

    public static final String TABLENAME = "PERSON_DISEASE";

    /**
     * Properties of entity PersonDisease.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonDiseaseId = new Property(0, String.class, "personDiseaseId", false, "PERSON_DISEASE_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property DiseaseCode = new Property(2, String.class, "diseaseCode", false, "DISEASE_CODE");
        public final static Property DiseaseName = new Property(3, String.class, "diseaseName", false, "DISEASE_NAME");
        public final static Property ConfirmDate = new Property(4, Integer.class, "confirmDate", false, "CONFIRM_DATE");
    };


    public PersonDiseaseDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDiseaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_DISEASE\" (" + //
                "\"PERSON_DISEASE_ID\" TEXT," + // 0: personDiseaseId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"DISEASE_CODE\" TEXT," + // 2: diseaseCode
                "\"DISEASE_NAME\" TEXT," + // 3: diseaseName
                "\"CONFIRM_DATE\" INTEGER);"); // 4: confirmDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_DISEASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonDisease entity) {
        stmt.clearBindings();
 
        String personDiseaseId = entity.getPersonDiseaseId();
        if (personDiseaseId != null) {
            stmt.bindString(1, personDiseaseId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String diseaseCode = entity.getDiseaseCode();
        if (diseaseCode != null) {
            stmt.bindString(3, diseaseCode);
        }
 
        String diseaseName = entity.getDiseaseName();
        if (diseaseName != null) {
            stmt.bindString(4, diseaseName);
        }
 
        Integer confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(5, confirmDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonDisease entity) {
        stmt.clearBindings();
 
        String personDiseaseId = entity.getPersonDiseaseId();
        if (personDiseaseId != null) {
            stmt.bindString(1, personDiseaseId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String diseaseCode = entity.getDiseaseCode();
        if (diseaseCode != null) {
            stmt.bindString(3, diseaseCode);
        }
 
        String diseaseName = entity.getDiseaseName();
        if (diseaseName != null) {
            stmt.bindString(4, diseaseName);
        }
 
        Integer confirmDate = entity.getConfirmDate();
        if (confirmDate != null) {
            stmt.bindLong(5, confirmDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonDisease readEntity(Cursor cursor, int offset) {
        PersonDisease entity = new PersonDisease( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personDiseaseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // diseaseCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // diseaseName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // confirmDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonDisease entity, int offset) {
        entity.setPersonDiseaseId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiseaseCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiseaseName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConfirmDate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonDisease entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonDisease entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
