package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.family.FamilyEconomic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_ECONOMIC".
*/
public class FamilyEconomicDao extends AbstractDao<FamilyEconomic, String> {

    public static final String TABLENAME = "FAMILY_ECONOMIC";

    /**
     * Properties of entity FamilyEconomic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FamilyEconomicId = new Property(0, String.class, "familyEconomicId", false, "FAMILY_ECONOMIC_ID");
        public final static Property DwellingArea = new Property(1, Double.class, "dwellingArea", false, "DWELLING_AREA");
        public final static Property DwellingAreaPer = new Property(2, Double.class, "dwellingAreaPer", false, "DWELLING_AREA_PER");
        public final static Property HouseholdTypeCode = new Property(3, String.class, "householdTypeCode", false, "HOUSEHOLD_TYPE_CODE");
        public final static Property HouseholdTypeName = new Property(4, String.class, "householdTypeName", false, "HOUSEHOLD_TYPE_NAME");
        public final static Property HouseholdPropertyCode = new Property(5, String.class, "householdPropertyCode", false, "HOUSEHOLD_PROPERTY_CODE");
        public final static Property HouseholdPropertyName = new Property(6, String.class, "householdPropertyName", false, "HOUSEHOLD_PROPERTY_NAME");
        public final static Property HouseTypeCode = new Property(7, String.class, "houseTypeCode", false, "HOUSE_TYPE_CODE");
        public final static Property HouseTypeName = new Property(8, String.class, "houseTypeName", false, "HOUSE_TYPE_NAME");
        public final static Property KitchenUseModeCode = new Property(9, String.class, "kitchenUseModeCode", false, "KITCHEN_USE_MODE_CODE");
        public final static Property KitchenExhaustCode = new Property(10, String.class, "kitchenExhaustCode", false, "KITCHEN_EXHAUST_CODE");
        public final static Property SanitaryToiletCode = new Property(11, String.class, "sanitaryToiletCode", false, "SANITARY_TOILET_CODE");
        public final static Property NoSanitaryToiletCode = new Property(12, String.class, "noSanitaryToiletCode", false, "NO_SANITARY_TOILET_CODE");
        public final static Property LivestockFenceCode = new Property(13, String.class, "livestockFenceCode", false, "LIVESTOCK_FENCE_CODE");
        public final static Property GarbageDisposalCode = new Property(14, String.class, "garbageDisposalCode", false, "GARBAGE_DISPOSAL_CODE");
        public final static Property GarbageDisposalName = new Property(15, String.class, "garbageDisposalName", false, "GARBAGE_DISPOSAL_NAME");
        public final static Property FamilyInfoId = new Property(16, String.class, "familyInfoId", true, "FAMILY_INFO_ID");
    };


    public FamilyEconomicDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyEconomicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_ECONOMIC\" (" + //
                "\"FAMILY_ECONOMIC_ID\" TEXT," + // 0: familyEconomicId
                "\"DWELLING_AREA\" REAL," + // 1: dwellingArea
                "\"DWELLING_AREA_PER\" REAL," + // 2: dwellingAreaPer
                "\"HOUSEHOLD_TYPE_CODE\" TEXT," + // 3: householdTypeCode
                "\"HOUSEHOLD_TYPE_NAME\" TEXT," + // 4: householdTypeName
                "\"HOUSEHOLD_PROPERTY_CODE\" TEXT," + // 5: householdPropertyCode
                "\"HOUSEHOLD_PROPERTY_NAME\" TEXT," + // 6: householdPropertyName
                "\"HOUSE_TYPE_CODE\" TEXT," + // 7: houseTypeCode
                "\"HOUSE_TYPE_NAME\" TEXT," + // 8: houseTypeName
                "\"KITCHEN_USE_MODE_CODE\" TEXT," + // 9: kitchenUseModeCode
                "\"KITCHEN_EXHAUST_CODE\" TEXT," + // 10: kitchenExhaustCode
                "\"SANITARY_TOILET_CODE\" TEXT," + // 11: sanitaryToiletCode
                "\"NO_SANITARY_TOILET_CODE\" TEXT," + // 12: noSanitaryToiletCode
                "\"LIVESTOCK_FENCE_CODE\" TEXT," + // 13: livestockFenceCode
                "\"GARBAGE_DISPOSAL_CODE\" TEXT," + // 14: garbageDisposalCode
                "\"GARBAGE_DISPOSAL_NAME\" TEXT," + // 15: garbageDisposalName
                "\"FAMILY_INFO_ID\" TEXT PRIMARY KEY NOT NULL );"); // 16: familyInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_ECONOMIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyEconomic entity) {
        stmt.clearBindings();
 
        String familyEconomicId = entity.getFamilyEconomicId();
        if (familyEconomicId != null) {
            stmt.bindString(1, familyEconomicId);
        }
 
        Double dwellingArea = entity.getDwellingArea();
        if (dwellingArea != null) {
            stmt.bindDouble(2, dwellingArea);
        }
 
        Double dwellingAreaPer = entity.getDwellingAreaPer();
        if (dwellingAreaPer != null) {
            stmt.bindDouble(3, dwellingAreaPer);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(4, householdTypeCode);
        }
 
        String householdTypeName = entity.getHouseholdTypeName();
        if (householdTypeName != null) {
            stmt.bindString(5, householdTypeName);
        }
 
        String householdPropertyCode = entity.getHouseholdPropertyCode();
        if (householdPropertyCode != null) {
            stmt.bindString(6, householdPropertyCode);
        }
 
        String householdPropertyName = entity.getHouseholdPropertyName();
        if (householdPropertyName != null) {
            stmt.bindString(7, householdPropertyName);
        }
 
        String houseTypeCode = entity.getHouseTypeCode();
        if (houseTypeCode != null) {
            stmt.bindString(8, houseTypeCode);
        }
 
        String houseTypeName = entity.getHouseTypeName();
        if (houseTypeName != null) {
            stmt.bindString(9, houseTypeName);
        }
 
        String kitchenUseModeCode = entity.getKitchenUseModeCode();
        if (kitchenUseModeCode != null) {
            stmt.bindString(10, kitchenUseModeCode);
        }
 
        String kitchenExhaustCode = entity.getKitchenExhaustCode();
        if (kitchenExhaustCode != null) {
            stmt.bindString(11, kitchenExhaustCode);
        }
 
        String sanitaryToiletCode = entity.getSanitaryToiletCode();
        if (sanitaryToiletCode != null) {
            stmt.bindString(12, sanitaryToiletCode);
        }
 
        String noSanitaryToiletCode = entity.getNoSanitaryToiletCode();
        if (noSanitaryToiletCode != null) {
            stmt.bindString(13, noSanitaryToiletCode);
        }
 
        String livestockFenceCode = entity.getLivestockFenceCode();
        if (livestockFenceCode != null) {
            stmt.bindString(14, livestockFenceCode);
        }
 
        String garbageDisposalCode = entity.getGarbageDisposalCode();
        if (garbageDisposalCode != null) {
            stmt.bindString(15, garbageDisposalCode);
        }
 
        String garbageDisposalName = entity.getGarbageDisposalName();
        if (garbageDisposalName != null) {
            stmt.bindString(16, garbageDisposalName);
        }
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(17, familyInfoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyEconomic entity) {
        stmt.clearBindings();
 
        String familyEconomicId = entity.getFamilyEconomicId();
        if (familyEconomicId != null) {
            stmt.bindString(1, familyEconomicId);
        }
 
        Double dwellingArea = entity.getDwellingArea();
        if (dwellingArea != null) {
            stmt.bindDouble(2, dwellingArea);
        }
 
        Double dwellingAreaPer = entity.getDwellingAreaPer();
        if (dwellingAreaPer != null) {
            stmt.bindDouble(3, dwellingAreaPer);
        }
 
        String householdTypeCode = entity.getHouseholdTypeCode();
        if (householdTypeCode != null) {
            stmt.bindString(4, householdTypeCode);
        }
 
        String householdTypeName = entity.getHouseholdTypeName();
        if (householdTypeName != null) {
            stmt.bindString(5, householdTypeName);
        }
 
        String householdPropertyCode = entity.getHouseholdPropertyCode();
        if (householdPropertyCode != null) {
            stmt.bindString(6, householdPropertyCode);
        }
 
        String householdPropertyName = entity.getHouseholdPropertyName();
        if (householdPropertyName != null) {
            stmt.bindString(7, householdPropertyName);
        }
 
        String houseTypeCode = entity.getHouseTypeCode();
        if (houseTypeCode != null) {
            stmt.bindString(8, houseTypeCode);
        }
 
        String houseTypeName = entity.getHouseTypeName();
        if (houseTypeName != null) {
            stmt.bindString(9, houseTypeName);
        }
 
        String kitchenUseModeCode = entity.getKitchenUseModeCode();
        if (kitchenUseModeCode != null) {
            stmt.bindString(10, kitchenUseModeCode);
        }
 
        String kitchenExhaustCode = entity.getKitchenExhaustCode();
        if (kitchenExhaustCode != null) {
            stmt.bindString(11, kitchenExhaustCode);
        }
 
        String sanitaryToiletCode = entity.getSanitaryToiletCode();
        if (sanitaryToiletCode != null) {
            stmt.bindString(12, sanitaryToiletCode);
        }
 
        String noSanitaryToiletCode = entity.getNoSanitaryToiletCode();
        if (noSanitaryToiletCode != null) {
            stmt.bindString(13, noSanitaryToiletCode);
        }
 
        String livestockFenceCode = entity.getLivestockFenceCode();
        if (livestockFenceCode != null) {
            stmt.bindString(14, livestockFenceCode);
        }
 
        String garbageDisposalCode = entity.getGarbageDisposalCode();
        if (garbageDisposalCode != null) {
            stmt.bindString(15, garbageDisposalCode);
        }
 
        String garbageDisposalName = entity.getGarbageDisposalName();
        if (garbageDisposalName != null) {
            stmt.bindString(16, garbageDisposalName);
        }
 
        String familyInfoId = entity.getFamilyInfoId();
        if (familyInfoId != null) {
            stmt.bindString(17, familyInfoId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16);
    }    

    @Override
    public FamilyEconomic readEntity(Cursor cursor, int offset) {
        FamilyEconomic entity = new FamilyEconomic( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // familyEconomicId
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // dwellingArea
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // dwellingAreaPer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // householdTypeCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // householdTypeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // householdPropertyCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // householdPropertyName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // houseTypeCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // houseTypeName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // kitchenUseModeCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // kitchenExhaustCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sanitaryToiletCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // noSanitaryToiletCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // livestockFenceCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // garbageDisposalCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // garbageDisposalName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // familyInfoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyEconomic entity, int offset) {
        entity.setFamilyEconomicId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDwellingArea(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setDwellingAreaPer(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setHouseholdTypeCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHouseholdTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHouseholdPropertyCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHouseholdPropertyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHouseTypeCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHouseTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKitchenUseModeCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKitchenExhaustCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSanitaryToiletCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNoSanitaryToiletCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLivestockFenceCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGarbageDisposalCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGarbageDisposalName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFamilyInfoId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FamilyEconomic entity, long rowId) {
        return entity.getFamilyInfoId();
    }
    
    @Override
    public String getKey(FamilyEconomic entity) {
        if(entity != null) {
            return entity.getFamilyInfoId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
