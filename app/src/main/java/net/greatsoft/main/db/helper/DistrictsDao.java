package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.districts.Districts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRICTS".
*/
public class DistrictsDao extends AbstractDao<Districts, Void> {

    public static final String TABLENAME = "DISTRICTS";

    /**
     * Properties of entity Districts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DistrictId = new Property(0, String.class, "districtId", false, "DISTRICT_ID");
        public final static Property DistrictCode = new Property(1, String.class, "districtCode", false, "DISTRICT_CODE");
        public final static Property DistrictName = new Property(2, String.class, "districtName", false, "DISTRICT_NAME");
        public final static Property DistrictLevel = new Property(3, Integer.class, "districtLevel", false, "DISTRICT_LEVEL");
        public final static Property ParentId = new Property(4, String.class, "parentId", false, "PARENT_ID");
        public final static Property Pym = new Property(5, String.class, "pym", false, "PYM");
        public final static Property ProvinceId = new Property(6, String.class, "provinceId", false, "PROVINCE_ID");
        public final static Property ProvinceName = new Property(7, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property CityId = new Property(8, String.class, "cityId", false, "CITY_ID");
        public final static Property CityName = new Property(9, String.class, "cityName", false, "CITY_NAME");
        public final static Property CountyId = new Property(10, String.class, "countyId", false, "COUNTY_ID");
        public final static Property CountyName = new Property(11, String.class, "countyName", false, "COUNTY_NAME");
        public final static Property TownId = new Property(12, String.class, "townId", false, "TOWN_ID");
        public final static Property TownName = new Property(13, String.class, "townName", false, "TOWN_NAME");
        public final static Property VillageId = new Property(14, String.class, "villageId", false, "VILLAGE_ID");
        public final static Property VillageName = new Property(15, String.class, "villageName", false, "VILLAGE_NAME");
    };


    public DistrictsDao(DaoConfig config) {
        super(config);
    }
    
    public DistrictsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRICTS\" (" + //
                "\"DISTRICT_ID\" TEXT," + // 0: districtId
                "\"DISTRICT_CODE\" TEXT," + // 1: districtCode
                "\"DISTRICT_NAME\" TEXT," + // 2: districtName
                "\"DISTRICT_LEVEL\" INTEGER," + // 3: districtLevel
                "\"PARENT_ID\" TEXT," + // 4: parentId
                "\"PYM\" TEXT," + // 5: pym
                "\"PROVINCE_ID\" TEXT," + // 6: provinceId
                "\"PROVINCE_NAME\" TEXT," + // 7: provinceName
                "\"CITY_ID\" TEXT," + // 8: cityId
                "\"CITY_NAME\" TEXT," + // 9: cityName
                "\"COUNTY_ID\" TEXT," + // 10: countyId
                "\"COUNTY_NAME\" TEXT," + // 11: countyName
                "\"TOWN_ID\" TEXT," + // 12: townId
                "\"TOWN_NAME\" TEXT," + // 13: townName
                "\"VILLAGE_ID\" TEXT," + // 14: villageId
                "\"VILLAGE_NAME\" TEXT);"); // 15: villageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRICTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Districts entity) {
        stmt.clearBindings();
 
        String districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindString(1, districtId);
        }
 
        String districtCode = entity.getDistrictCode();
        if (districtCode != null) {
            stmt.bindString(2, districtCode);
        }
 
        String districtName = entity.getDistrictName();
        if (districtName != null) {
            stmt.bindString(3, districtName);
        }
 
        Integer districtLevel = entity.getDistrictLevel();
        if (districtLevel != null) {
            stmt.bindLong(4, districtLevel);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(6, pym);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(7, provinceId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(8, provinceName);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(9, cityId);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(10, cityName);
        }
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(11, countyId);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(12, countyName);
        }
 
        String townId = entity.getTownId();
        if (townId != null) {
            stmt.bindString(13, townId);
        }
 
        String townName = entity.getTownName();
        if (townName != null) {
            stmt.bindString(14, townName);
        }
 
        String villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindString(15, villageId);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(16, villageName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Districts entity) {
        stmt.clearBindings();
 
        String districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindString(1, districtId);
        }
 
        String districtCode = entity.getDistrictCode();
        if (districtCode != null) {
            stmt.bindString(2, districtCode);
        }
 
        String districtName = entity.getDistrictName();
        if (districtName != null) {
            stmt.bindString(3, districtName);
        }
 
        Integer districtLevel = entity.getDistrictLevel();
        if (districtLevel != null) {
            stmt.bindLong(4, districtLevel);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(6, pym);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(7, provinceId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(8, provinceName);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(9, cityId);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(10, cityName);
        }
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(11, countyId);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(12, countyName);
        }
 
        String townId = entity.getTownId();
        if (townId != null) {
            stmt.bindString(13, townId);
        }
 
        String townName = entity.getTownName();
        if (townName != null) {
            stmt.bindString(14, townName);
        }
 
        String villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindString(15, villageId);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(16, villageName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Districts readEntity(Cursor cursor, int offset) {
        Districts entity = new Districts( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // districtId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // districtCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // districtName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // districtLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pym
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provinceId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // provinceName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cityId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cityName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // countyId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // countyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // townId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // townName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // villageId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // villageName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Districts entity, int offset) {
        entity.setDistrictId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDistrictCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistrictName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrictLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPym(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvinceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProvinceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCityId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCityName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCountyId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCountyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTownId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTownName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVillageId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVillageName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Districts entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Districts entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
