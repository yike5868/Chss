package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.corconaryHeart.CoronaryHeartDiseaseFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CORONARY_HEART_DISEASE_FOLLOWUP".
*/
public class CoronaryHeartDiseaseFollowupDao extends AbstractDao<CoronaryHeartDiseaseFollowup, Void> {

    public static final String TABLENAME = "CORONARY_HEART_DISEASE_FOLLOWUP";

    /**
     * Properties of entity CoronaryHeartDiseaseFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChdFollowupId = new Property(0, String.class, "chdFollowupId", false, "CHD_FOLLOWUP_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ChdFollowupNo = new Property(2, String.class, "chdFollowupNo", false, "CHD_FOLLOWUP_NO");
        public final static Property FollowupDate = new Property(3, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(4, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property HeartRate = new Property(5, Integer.class, "heartRate", false, "HEART_RATE");
        public final static Property Weight = new Property(6, Double.class, "weight", false, "WEIGHT");
        public final static Property AimWeight = new Property(7, Double.class, "aimWeight", false, "AIM_WEIGHT");
        public final static Property Height = new Property(8, Double.class, "height", false, "HEIGHT");
        public final static Property Bmi = new Property(9, Double.class, "bmi", false, "BMI");
        public final static Property AimBmi = new Property(10, Double.class, "aimBmi", false, "AIM_BMI");
        public final static Property Sbp = new Property(11, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(12, Integer.class, "dbp", false, "DBP");
        public final static Property FbgMmol = new Property(13, Double.class, "fbgMmol", false, "FBG_MMOL");
        public final static Property PbgMmol = new Property(14, Double.class, "pbgMmol", false, "PBG_MMOL");
        public final static Property Tcho = new Property(15, Double.class, "tcho", false, "TCHO");
        public final static Property Tg = new Property(16, Double.class, "tg", false, "TG");
        public final static Property Ldlc = new Property(17, Double.class, "ldlc", false, "LDLC");
        public final static Property Hdlc = new Property(18, Double.class, "hdlc", false, "HDLC");
        public final static Property EcgAbnormResult = new Property(19, String.class, "ecgAbnormResult", false, "ECG_ABNORM_RESULT");
        public final static Property HeartCheckResult = new Property(20, String.class, "heartCheckResult", false, "HEART_CHECK_RESULT");
        public final static Property CoronaryArteryResult = new Property(21, String.class, "coronaryArteryResult", false, "CORONARY_ARTERY_RESULT");
        public final static Property EcgExerciseResult = new Property(22, String.class, "ecgExerciseResult", false, "ECG_EXERCISE_RESULT");
        public final static Property CardiacEnzymesResult = new Property(23, String.class, "cardiacEnzymesResult", false, "CARDIAC_ENZYMES_RESULT");
        public final static Property DailySmoking = new Property(24, Integer.class, "dailySmoking", false, "DAILY_SMOKING");
        public final static Property AimDailySmoking = new Property(25, Integer.class, "aimDailySmoking", false, "AIM_DAILY_SMOKING");
        public final static Property DailyDrinking = new Property(26, Double.class, "dailyDrinking", false, "DAILY_DRINKING");
        public final static Property AimDailyDrinking = new Property(27, Double.class, "aimDailyDrinking", false, "AIM_DAILY_DRINKING");
        public final static Property ExerciseDurationWeeks = new Property(28, Integer.class, "exerciseDurationWeeks", false, "EXERCISE_DURATION_WEEKS");
        public final static Property AimDurationWeeks = new Property(29, Integer.class, "aimDurationWeeks", false, "AIM_DURATION_WEEKS");
        public final static Property ExerciseDurationMins = new Property(30, Integer.class, "exerciseDurationMins", false, "EXERCISE_DURATION_MINS");
        public final static Property AimExerciseMins = new Property(31, Integer.class, "aimExerciseMins", false, "AIM_EXERCISE_MINS");
        public final static Property FollowupClassifyCode = new Property(32, String.class, "followupClassifyCode", false, "FOLLOWUP_CLASSIFY_CODE");
        public final static Property DrugComplianceCode = new Property(33, String.class, "drugComplianceCode", false, "DRUG_COMPLIANCE_CODE");
        public final static Property PsyAdjustResultCode = new Property(34, String.class, "psyAdjustResultCode", false, "PSY_ADJUST_RESULT_CODE");
        public final static Property ComplianceResultCode = new Property(35, String.class, "complianceResultCode", false, "COMPLIANCE_RESULT_CODE");
        public final static Property NextFollowupDate = new Property(36, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property FollowupDoctorId = new Property(37, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(38, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property FollowupDoctorAdvise = new Property(39, String.class, "followupDoctorAdvise", false, "FOLLOWUP_DOCTOR_ADVISE");
        public final static Property IsCancel = new Property(40, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(41, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(42, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(43, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(44, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(45, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(46, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(47, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(48, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(49, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(50, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(51, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property AssessmentCount = new Property(52, Integer.class, "assessmentCount", false, "ASSESSMENT_COUNT");
        public final static Property MissingCount = new Property(53, Integer.class, "missingCount", false, "MISSING_COUNT");
        public final static Property IntactRate = new Property(54, Double.class, "intactRate", false, "INTACT_RATE");
    };


    public CoronaryHeartDiseaseFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public CoronaryHeartDiseaseFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CORONARY_HEART_DISEASE_FOLLOWUP\" (" + //
                "\"CHD_FOLLOWUP_ID\" TEXT," + // 0: chdFollowupId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CHD_FOLLOWUP_NO\" TEXT," + // 2: chdFollowupNo
                "\"FOLLOWUP_DATE\" INTEGER," + // 3: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 4: followupWayCode
                "\"HEART_RATE\" INTEGER," + // 5: heartRate
                "\"WEIGHT\" REAL," + // 6: weight
                "\"AIM_WEIGHT\" REAL," + // 7: aimWeight
                "\"HEIGHT\" REAL," + // 8: height
                "\"BMI\" REAL," + // 9: bmi
                "\"AIM_BMI\" REAL," + // 10: aimBmi
                "\"SBP\" INTEGER," + // 11: sbp
                "\"DBP\" INTEGER," + // 12: dbp
                "\"FBG_MMOL\" REAL," + // 13: fbgMmol
                "\"PBG_MMOL\" REAL," + // 14: pbgMmol
                "\"TCHO\" REAL," + // 15: tcho
                "\"TG\" REAL," + // 16: tg
                "\"LDLC\" REAL," + // 17: ldlc
                "\"HDLC\" REAL," + // 18: hdlc
                "\"ECG_ABNORM_RESULT\" TEXT," + // 19: ecgAbnormResult
                "\"HEART_CHECK_RESULT\" TEXT," + // 20: heartCheckResult
                "\"CORONARY_ARTERY_RESULT\" TEXT," + // 21: coronaryArteryResult
                "\"ECG_EXERCISE_RESULT\" TEXT," + // 22: ecgExerciseResult
                "\"CARDIAC_ENZYMES_RESULT\" TEXT," + // 23: cardiacEnzymesResult
                "\"DAILY_SMOKING\" INTEGER," + // 24: dailySmoking
                "\"AIM_DAILY_SMOKING\" INTEGER," + // 25: aimDailySmoking
                "\"DAILY_DRINKING\" REAL," + // 26: dailyDrinking
                "\"AIM_DAILY_DRINKING\" REAL," + // 27: aimDailyDrinking
                "\"EXERCISE_DURATION_WEEKS\" INTEGER," + // 28: exerciseDurationWeeks
                "\"AIM_DURATION_WEEKS\" INTEGER," + // 29: aimDurationWeeks
                "\"EXERCISE_DURATION_MINS\" INTEGER," + // 30: exerciseDurationMins
                "\"AIM_EXERCISE_MINS\" INTEGER," + // 31: aimExerciseMins
                "\"FOLLOWUP_CLASSIFY_CODE\" TEXT," + // 32: followupClassifyCode
                "\"DRUG_COMPLIANCE_CODE\" TEXT," + // 33: drugComplianceCode
                "\"PSY_ADJUST_RESULT_CODE\" TEXT," + // 34: psyAdjustResultCode
                "\"COMPLIANCE_RESULT_CODE\" TEXT," + // 35: complianceResultCode
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 36: nextFollowupDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 37: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 38: followupDoctorName
                "\"FOLLOWUP_DOCTOR_ADVISE\" TEXT," + // 39: followupDoctorAdvise
                "\"IS_CANCEL\" INTEGER," + // 40: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 41: createOrgId
                "\"ORG_NAME\" TEXT," + // 42: orgName
                "\"CREATOR_ID\" TEXT," + // 43: creatorId
                "\"CREATOR\" TEXT," + // 44: creator
                "\"CREATE_TIME\" INTEGER," + // 45: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 46: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 47: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 48: modifierId
                "\"MODIFIER\" TEXT," + // 49: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 50: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 51: jsonDetail
                "\"ASSESSMENT_COUNT\" INTEGER," + // 52: assessmentCount
                "\"MISSING_COUNT\" INTEGER," + // 53: missingCount
                "\"INTACT_RATE\" REAL);"); // 54: intactRate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CORONARY_HEART_DISEASE_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoronaryHeartDiseaseFollowup entity) {
        stmt.clearBindings();
 
        String chdFollowupId = entity.getChdFollowupId();
        if (chdFollowupId != null) {
            stmt.bindString(1, chdFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String chdFollowupNo = entity.getChdFollowupNo();
        if (chdFollowupNo != null) {
            stmt.bindString(3, chdFollowupNo);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(4, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(5, followupWayCode);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(6, heartRate);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(7, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(8, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(9, height);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(10, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(11, aimBmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(12, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(13, dbp);
        }
 
        Double fbgMmol = entity.getFbgMmol();
        if (fbgMmol != null) {
            stmt.bindDouble(14, fbgMmol);
        }
 
        Double pbgMmol = entity.getPbgMmol();
        if (pbgMmol != null) {
            stmt.bindDouble(15, pbgMmol);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(16, tcho);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(17, tg);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(18, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(19, hdlc);
        }
 
        String ecgAbnormResult = entity.getEcgAbnormResult();
        if (ecgAbnormResult != null) {
            stmt.bindString(20, ecgAbnormResult);
        }
 
        String heartCheckResult = entity.getHeartCheckResult();
        if (heartCheckResult != null) {
            stmt.bindString(21, heartCheckResult);
        }
 
        String coronaryArteryResult = entity.getCoronaryArteryResult();
        if (coronaryArteryResult != null) {
            stmt.bindString(22, coronaryArteryResult);
        }
 
        String ecgExerciseResult = entity.getEcgExerciseResult();
        if (ecgExerciseResult != null) {
            stmt.bindString(23, ecgExerciseResult);
        }
 
        String cardiacEnzymesResult = entity.getCardiacEnzymesResult();
        if (cardiacEnzymesResult != null) {
            stmt.bindString(24, cardiacEnzymesResult);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(25, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(26, aimDailySmoking);
        }
 
        Double dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindDouble(27, dailyDrinking);
        }
 
        Double aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindDouble(28, aimDailyDrinking);
        }
 
        Integer exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindLong(29, exerciseDurationWeeks);
        }
 
        Integer aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindLong(30, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(31, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(32, aimExerciseMins);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(33, followupClassifyCode);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(34, drugComplianceCode);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(35, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(36, complianceResultCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(37, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(38, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(39, followupDoctorName);
        }
 
        String followupDoctorAdvise = entity.getFollowupDoctorAdvise();
        if (followupDoctorAdvise != null) {
            stmt.bindString(40, followupDoctorAdvise);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(41, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(42, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(43, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(44, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(45, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(46, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(47, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(48, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(49, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(50, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(51, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(52, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(53, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(54, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(55, intactRate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoronaryHeartDiseaseFollowup entity) {
        stmt.clearBindings();
 
        String chdFollowupId = entity.getChdFollowupId();
        if (chdFollowupId != null) {
            stmt.bindString(1, chdFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String chdFollowupNo = entity.getChdFollowupNo();
        if (chdFollowupNo != null) {
            stmt.bindString(3, chdFollowupNo);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(4, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(5, followupWayCode);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(6, heartRate);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(7, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(8, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(9, height);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(10, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(11, aimBmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(12, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(13, dbp);
        }
 
        Double fbgMmol = entity.getFbgMmol();
        if (fbgMmol != null) {
            stmt.bindDouble(14, fbgMmol);
        }
 
        Double pbgMmol = entity.getPbgMmol();
        if (pbgMmol != null) {
            stmt.bindDouble(15, pbgMmol);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(16, tcho);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(17, tg);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(18, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(19, hdlc);
        }
 
        String ecgAbnormResult = entity.getEcgAbnormResult();
        if (ecgAbnormResult != null) {
            stmt.bindString(20, ecgAbnormResult);
        }
 
        String heartCheckResult = entity.getHeartCheckResult();
        if (heartCheckResult != null) {
            stmt.bindString(21, heartCheckResult);
        }
 
        String coronaryArteryResult = entity.getCoronaryArteryResult();
        if (coronaryArteryResult != null) {
            stmt.bindString(22, coronaryArteryResult);
        }
 
        String ecgExerciseResult = entity.getEcgExerciseResult();
        if (ecgExerciseResult != null) {
            stmt.bindString(23, ecgExerciseResult);
        }
 
        String cardiacEnzymesResult = entity.getCardiacEnzymesResult();
        if (cardiacEnzymesResult != null) {
            stmt.bindString(24, cardiacEnzymesResult);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(25, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(26, aimDailySmoking);
        }
 
        Double dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindDouble(27, dailyDrinking);
        }
 
        Double aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindDouble(28, aimDailyDrinking);
        }
 
        Integer exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindLong(29, exerciseDurationWeeks);
        }
 
        Integer aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindLong(30, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(31, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(32, aimExerciseMins);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(33, followupClassifyCode);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(34, drugComplianceCode);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(35, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(36, complianceResultCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(37, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(38, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(39, followupDoctorName);
        }
 
        String followupDoctorAdvise = entity.getFollowupDoctorAdvise();
        if (followupDoctorAdvise != null) {
            stmt.bindString(40, followupDoctorAdvise);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(41, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(42, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(43, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(44, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(45, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(46, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(47, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(48, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(49, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(50, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(51, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(52, jsonDetail);
        }
 
        Integer assessmentCount = entity.getAssessmentCount();
        if (assessmentCount != null) {
            stmt.bindLong(53, assessmentCount);
        }
 
        Integer missingCount = entity.getMissingCount();
        if (missingCount != null) {
            stmt.bindLong(54, missingCount);
        }
 
        Double intactRate = entity.getIntactRate();
        if (intactRate != null) {
            stmt.bindDouble(55, intactRate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CoronaryHeartDiseaseFollowup readEntity(Cursor cursor, int offset) {
        CoronaryHeartDiseaseFollowup entity = new CoronaryHeartDiseaseFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chdFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chdFollowupNo
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // followupDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // followupWayCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // heartRate
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // aimWeight
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // bmi
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // aimBmi
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // sbp
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // dbp
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // fbgMmol
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // pbgMmol
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // tcho
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // tg
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // ldlc
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // hdlc
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ecgAbnormResult
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // heartCheckResult
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // coronaryArteryResult
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ecgExerciseResult
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // cardiacEnzymesResult
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // dailySmoking
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // aimDailySmoking
            cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26), // dailyDrinking
            cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27), // aimDailyDrinking
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // exerciseDurationWeeks
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // aimDurationWeeks
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // exerciseDurationMins
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // aimExerciseMins
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // followupClassifyCode
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // drugComplianceCode
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // psyAdjustResultCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // complianceResultCode
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // nextFollowupDate
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // followupDoctorId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // followupDoctorName
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // followupDoctorAdvise
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // isCancel
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // createOrgId
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // orgName
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // creatorId
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // creator
            cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)), // createTime
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // modifiedOrgId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // modifiedOrgName
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // modifierId
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // modifier
            cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)), // modifiedTime
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // jsonDetail
            cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52), // assessmentCount
            cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53), // missingCount
            cursor.isNull(offset + 54) ? null : cursor.getDouble(offset + 54) // intactRate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoronaryHeartDiseaseFollowup entity, int offset) {
        entity.setChdFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChdFollowupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFollowupDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFollowupWayCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeartRate(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setAimWeight(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBmi(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setAimBmi(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setSbp(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDbp(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setFbgMmol(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setPbgMmol(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setTcho(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setTg(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setLdlc(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setHdlc(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setEcgAbnormResult(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHeartCheckResult(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCoronaryArteryResult(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setEcgExerciseResult(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCardiacEnzymesResult(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDailySmoking(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setAimDailySmoking(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDailyDrinking(cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26));
        entity.setAimDailyDrinking(cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27));
        entity.setExerciseDurationWeeks(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setAimDurationWeeks(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setExerciseDurationMins(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setAimExerciseMins(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setFollowupClassifyCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDrugComplianceCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPsyAdjustResultCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setComplianceResultCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setNextFollowupDate(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFollowupDoctorName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setFollowupDoctorAdvise(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIsCancel(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setCreateOrgId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setOrgName(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCreatorId(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setCreator(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCreateTime(cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)));
        entity.setModifiedOrgId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setModifiedOrgName(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setModifierId(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setModifier(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setModifiedTime(cursor.isNull(offset + 50) ? null : new java.util.Date(cursor.getLong(offset + 50)));
        entity.setJsonDetail(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setAssessmentCount(cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52));
        entity.setMissingCount(cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53));
        entity.setIntactRate(cursor.isNull(offset + 54) ? null : cursor.getDouble(offset + 54));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CoronaryHeartDiseaseFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CoronaryHeartDiseaseFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
