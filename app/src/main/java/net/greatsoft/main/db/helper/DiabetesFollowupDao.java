package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.diabetes.DiabetesFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIABETES_FOLLOWUP".
*/
public class DiabetesFollowupDao extends AbstractDao<DiabetesFollowup, Void> {

    public static final String TABLENAME = "DIABETES_FOLLOWUP";

    /**
     * Properties of entity DiabetesFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DiabetesFollowupId = new Property(0, String.class, "diabetesFollowupId", false, "DIABETES_FOLLOWUP_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property DiabetesFollowupNo = new Property(2, String.class, "diabetesFollowupNo", false, "DIABETES_FOLLOWUP_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property RespDoctorName = new Property(4, String.class, "respDoctorName", false, "RESP_DOCTOR_NAME");
        public final static Property FollowupDate = new Property(5, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(6, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property VisitType = new Property(7, String.class, "visitType", false, "VISIT_TYPE");
        public final static Property IsMiss = new Property(8, String.class, "isMiss", false, "IS_MISS");
        public final static Property MissReason = new Property(9, String.class, "missReason", false, "MISS_REASON");
        public final static Property Sbp = new Property(10, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(11, Integer.class, "dbp", false, "DBP");
        public final static Property Weight = new Property(12, Double.class, "weight", false, "WEIGHT");
        public final static Property AimWeight = new Property(13, Double.class, "aimWeight", false, "AIM_WEIGHT");
        public final static Property Height = new Property(14, Double.class, "height", false, "HEIGHT");
        public final static Property Bmi = new Property(15, Double.class, "bmi", false, "BMI");
        public final static Property AimBmi = new Property(16, Double.class, "aimBmi", false, "AIM_BMI");
        public final static Property PofdaCode = new Property(17, String.class, "pofdaCode", false, "POFDA_CODE");
        public final static Property OtherPositiveSigns = new Property(18, String.class, "otherPositiveSigns", false, "OTHER_POSITIVE_SIGNS");
        public final static Property DailySmoking = new Property(19, Integer.class, "dailySmoking", false, "DAILY_SMOKING");
        public final static Property AimDailySmoking = new Property(20, Integer.class, "aimDailySmoking", false, "AIM_DAILY_SMOKING");
        public final static Property DailyDrinking = new Property(21, Integer.class, "dailyDrinking", false, "DAILY_DRINKING");
        public final static Property AimDailyDrinking = new Property(22, Integer.class, "aimDailyDrinking", false, "AIM_DAILY_DRINKING");
        public final static Property ExerciseFreqCode = new Property(23, String.class, "exerciseFreqCode", false, "EXERCISE_FREQ_CODE");
        public final static Property AimExerciseFreqCode = new Property(24, String.class, "aimExerciseFreqCode", false, "AIM_EXERCISE_FREQ_CODE");
        public final static Property ExerciseDurationWeeks = new Property(25, String.class, "exerciseDurationWeeks", false, "EXERCISE_DURATION_WEEKS");
        public final static Property AimDurationWeeks = new Property(26, String.class, "aimDurationWeeks", false, "AIM_DURATION_WEEKS");
        public final static Property ExerciseDurationMins = new Property(27, Integer.class, "exerciseDurationMins", false, "EXERCISE_DURATION_MINS");
        public final static Property AimExerciseMins = new Property(28, Integer.class, "aimExerciseMins", false, "AIM_EXERCISE_MINS");
        public final static Property DailyStaple = new Property(29, Integer.class, "dailyStaple", false, "DAILY_STAPLE");
        public final static Property AimDailyStaple = new Property(30, Integer.class, "aimDailyStaple", false, "AIM_DAILY_STAPLE");
        public final static Property PsyAdjustResultCode = new Property(31, String.class, "psyAdjustResultCode", false, "PSY_ADJUST_RESULT_CODE");
        public final static Property ComplianceResultCode = new Property(32, String.class, "complianceResultCode", false, "COMPLIANCE_RESULT_CODE");
        public final static Property Fbg = new Property(33, Double.class, "fbg", false, "FBG");
        public final static Property Pbg = new Property(34, Double.class, "pbg", false, "PBG");
        public final static Property Ghb = new Property(35, Double.class, "ghb", false, "GHB");
        public final static Property GhbDate = new Property(36, java.util.Date.class, "ghbDate", false, "GHB_DATE");
        public final static Property AccessoryExam = new Property(37, String.class, "accessoryExam", false, "ACCESSORY_EXAM");
        public final static Property HypogReactCode = new Property(38, String.class, "hypogReactCode", false, "HYPOG_REACT_CODE");
        public final static Property VisitEvalResultCode = new Property(39, String.class, "visitEvalResultCode", false, "VISIT_EVAL_RESULT_CODE");
        public final static Property InsulinType = new Property(40, String.class, "insulinType", false, "INSULIN_TYPE");
        public final static Property InsulinUsingFreq = new Property(41, Integer.class, "insulinUsingFreq", false, "INSULIN_USING_FREQ");
        public final static Property InsulinPerDose = new Property(42, Integer.class, "insulinPerDose", false, "INSULIN_PER_DOSE");
        public final static Property IsReferralCode = new Property(43, String.class, "isReferralCode", false, "IS_REFERRAL_CODE");
        public final static Property ReferralReason = new Property(44, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property RefertoOrgName = new Property(45, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(46, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property NextFollowupDate = new Property(47, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property FollowupDoctorId = new Property(48, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(49, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property DrugComplianceCode = new Property(50, String.class, "drugComplianceCode", false, "DRUG_COMPLIANCE_CODE");
        public final static Property DrugAdverseCode = new Property(51, String.class, "drugAdverseCode", false, "DRUG_ADVERSE_CODE");
        public final static Property DrugAdverseDesc = new Property(52, String.class, "drugAdverseDesc", false, "DRUG_ADVERSE_DESC");
        public final static Property FollowupClassifyCode = new Property(53, String.class, "followupClassifyCode", false, "FOLLOWUP_CLASSIFY_CODE");
        public final static Property IsCancel = new Property(54, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(55, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(56, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(57, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(58, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(59, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(60, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(61, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(62, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(63, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(64, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(65, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property InsulinUsingStr = new Property(66, String.class, "insulinUsingStr", false, "INSULIN_USING_STR");
    };


    public DiabetesFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public DiabetesFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIABETES_FOLLOWUP\" (" + //
                "\"DIABETES_FOLLOWUP_ID\" TEXT," + // 0: diabetesFollowupId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"DIABETES_FOLLOWUP_NO\" TEXT," + // 2: diabetesFollowupNo
                "\"NAME\" TEXT," + // 3: name
                "\"RESP_DOCTOR_NAME\" TEXT," + // 4: respDoctorName
                "\"FOLLOWUP_DATE\" INTEGER," + // 5: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 6: followupWayCode
                "\"VISIT_TYPE\" TEXT," + // 7: visitType
                "\"IS_MISS\" TEXT," + // 8: isMiss
                "\"MISS_REASON\" TEXT," + // 9: missReason
                "\"SBP\" INTEGER," + // 10: sbp
                "\"DBP\" INTEGER," + // 11: dbp
                "\"WEIGHT\" REAL," + // 12: weight
                "\"AIM_WEIGHT\" REAL," + // 13: aimWeight
                "\"HEIGHT\" REAL," + // 14: height
                "\"BMI\" REAL," + // 15: bmi
                "\"AIM_BMI\" REAL," + // 16: aimBmi
                "\"POFDA_CODE\" TEXT," + // 17: pofdaCode
                "\"OTHER_POSITIVE_SIGNS\" TEXT," + // 18: otherPositiveSigns
                "\"DAILY_SMOKING\" INTEGER," + // 19: dailySmoking
                "\"AIM_DAILY_SMOKING\" INTEGER," + // 20: aimDailySmoking
                "\"DAILY_DRINKING\" INTEGER," + // 21: dailyDrinking
                "\"AIM_DAILY_DRINKING\" INTEGER," + // 22: aimDailyDrinking
                "\"EXERCISE_FREQ_CODE\" TEXT," + // 23: exerciseFreqCode
                "\"AIM_EXERCISE_FREQ_CODE\" TEXT," + // 24: aimExerciseFreqCode
                "\"EXERCISE_DURATION_WEEKS\" TEXT," + // 25: exerciseDurationWeeks
                "\"AIM_DURATION_WEEKS\" TEXT," + // 26: aimDurationWeeks
                "\"EXERCISE_DURATION_MINS\" INTEGER," + // 27: exerciseDurationMins
                "\"AIM_EXERCISE_MINS\" INTEGER," + // 28: aimExerciseMins
                "\"DAILY_STAPLE\" INTEGER," + // 29: dailyStaple
                "\"AIM_DAILY_STAPLE\" INTEGER," + // 30: aimDailyStaple
                "\"PSY_ADJUST_RESULT_CODE\" TEXT," + // 31: psyAdjustResultCode
                "\"COMPLIANCE_RESULT_CODE\" TEXT," + // 32: complianceResultCode
                "\"FBG\" REAL," + // 33: fbg
                "\"PBG\" REAL," + // 34: pbg
                "\"GHB\" REAL," + // 35: ghb
                "\"GHB_DATE\" INTEGER," + // 36: ghbDate
                "\"ACCESSORY_EXAM\" TEXT," + // 37: accessoryExam
                "\"HYPOG_REACT_CODE\" TEXT," + // 38: hypogReactCode
                "\"VISIT_EVAL_RESULT_CODE\" TEXT," + // 39: visitEvalResultCode
                "\"INSULIN_TYPE\" TEXT," + // 40: insulinType
                "\"INSULIN_USING_FREQ\" INTEGER," + // 41: insulinUsingFreq
                "\"INSULIN_PER_DOSE\" INTEGER," + // 42: insulinPerDose
                "\"IS_REFERRAL_CODE\" TEXT," + // 43: isReferralCode
                "\"REFERRAL_REASON\" TEXT," + // 44: referralReason
                "\"REFERTO_ORG_NAME\" TEXT," + // 45: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 46: refertoDeptName
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 47: nextFollowupDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 48: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 49: followupDoctorName
                "\"DRUG_COMPLIANCE_CODE\" TEXT," + // 50: drugComplianceCode
                "\"DRUG_ADVERSE_CODE\" TEXT," + // 51: drugAdverseCode
                "\"DRUG_ADVERSE_DESC\" TEXT," + // 52: drugAdverseDesc
                "\"FOLLOWUP_CLASSIFY_CODE\" TEXT," + // 53: followupClassifyCode
                "\"IS_CANCEL\" INTEGER," + // 54: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 55: createOrgId
                "\"ORG_NAME\" TEXT," + // 56: orgName
                "\"CREATOR_ID\" TEXT," + // 57: creatorId
                "\"CREATOR\" TEXT," + // 58: creator
                "\"CREATE_TIME\" INTEGER," + // 59: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 60: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 61: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 62: modifierId
                "\"MODIFIER\" TEXT," + // 63: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 64: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 65: jsonDetail
                "\"INSULIN_USING_STR\" TEXT);"); // 66: insulinUsingStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIABETES_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiabetesFollowup entity) {
        stmt.clearBindings();
 
        String diabetesFollowupId = entity.getDiabetesFollowupId();
        if (diabetesFollowupId != null) {
            stmt.bindString(1, diabetesFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String diabetesFollowupNo = entity.getDiabetesFollowupNo();
        if (diabetesFollowupNo != null) {
            stmt.bindString(3, diabetesFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(6, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(7, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(8, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(9, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(10, missReason);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(11, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(12, dbp);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(14, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(16, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(17, aimBmi);
        }
 
        String pofdaCode = entity.getPofdaCode();
        if (pofdaCode != null) {
            stmt.bindString(18, pofdaCode);
        }
 
        String otherPositiveSigns = entity.getOtherPositiveSigns();
        if (otherPositiveSigns != null) {
            stmt.bindString(19, otherPositiveSigns);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(20, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(21, aimDailySmoking);
        }
 
        Integer dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindLong(22, dailyDrinking);
        }
 
        Integer aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindLong(23, aimDailyDrinking);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(24, exerciseFreqCode);
        }
 
        String aimExerciseFreqCode = entity.getAimExerciseFreqCode();
        if (aimExerciseFreqCode != null) {
            stmt.bindString(25, aimExerciseFreqCode);
        }
 
        String exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindString(26, exerciseDurationWeeks);
        }
 
        String aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindString(27, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(28, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(29, aimExerciseMins);
        }
 
        Integer dailyStaple = entity.getDailyStaple();
        if (dailyStaple != null) {
            stmt.bindLong(30, dailyStaple);
        }
 
        Integer aimDailyStaple = entity.getAimDailyStaple();
        if (aimDailyStaple != null) {
            stmt.bindLong(31, aimDailyStaple);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(32, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(33, complianceResultCode);
        }
 
        Double fbg = entity.getFbg();
        if (fbg != null) {
            stmt.bindDouble(34, fbg);
        }
 
        Double pbg = entity.getPbg();
        if (pbg != null) {
            stmt.bindDouble(35, pbg);
        }
 
        Double ghb = entity.getGhb();
        if (ghb != null) {
            stmt.bindDouble(36, ghb);
        }
 
        java.util.Date ghbDate = entity.getGhbDate();
        if (ghbDate != null) {
            stmt.bindLong(37, ghbDate.getTime());
        }
 
        String accessoryExam = entity.getAccessoryExam();
        if (accessoryExam != null) {
            stmt.bindString(38, accessoryExam);
        }
 
        String hypogReactCode = entity.getHypogReactCode();
        if (hypogReactCode != null) {
            stmt.bindString(39, hypogReactCode);
        }
 
        String visitEvalResultCode = entity.getVisitEvalResultCode();
        if (visitEvalResultCode != null) {
            stmt.bindString(40, visitEvalResultCode);
        }
 
        String insulinType = entity.getInsulinType();
        if (insulinType != null) {
            stmt.bindString(41, insulinType);
        }
 
        Integer insulinUsingFreq = entity.getInsulinUsingFreq();
        if (insulinUsingFreq != null) {
            stmt.bindLong(42, insulinUsingFreq);
        }
 
        Integer insulinPerDose = entity.getInsulinPerDose();
        if (insulinPerDose != null) {
            stmt.bindLong(43, insulinPerDose);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(44, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(45, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(46, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(47, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(48, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(49, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(50, followupDoctorName);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(51, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(52, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(53, drugAdverseDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(54, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(55, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(56, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(57, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(58, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(59, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(60, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(61, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(62, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(63, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(64, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(65, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(66, jsonDetail);
        }
 
        String insulinUsingStr = entity.getInsulinUsingStr();
        if (insulinUsingStr != null) {
            stmt.bindString(67, insulinUsingStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiabetesFollowup entity) {
        stmt.clearBindings();
 
        String diabetesFollowupId = entity.getDiabetesFollowupId();
        if (diabetesFollowupId != null) {
            stmt.bindString(1, diabetesFollowupId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String diabetesFollowupNo = entity.getDiabetesFollowupNo();
        if (diabetesFollowupNo != null) {
            stmt.bindString(3, diabetesFollowupNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(6, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(7, followupWayCode);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(8, visitType);
        }
 
        String isMiss = entity.getIsMiss();
        if (isMiss != null) {
            stmt.bindString(9, isMiss);
        }
 
        String missReason = entity.getMissReason();
        if (missReason != null) {
            stmt.bindString(10, missReason);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(11, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(12, dbp);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(13, weight);
        }
 
        Double aimWeight = entity.getAimWeight();
        if (aimWeight != null) {
            stmt.bindDouble(14, aimWeight);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(15, height);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(16, bmi);
        }
 
        Double aimBmi = entity.getAimBmi();
        if (aimBmi != null) {
            stmt.bindDouble(17, aimBmi);
        }
 
        String pofdaCode = entity.getPofdaCode();
        if (pofdaCode != null) {
            stmt.bindString(18, pofdaCode);
        }
 
        String otherPositiveSigns = entity.getOtherPositiveSigns();
        if (otherPositiveSigns != null) {
            stmt.bindString(19, otherPositiveSigns);
        }
 
        Integer dailySmoking = entity.getDailySmoking();
        if (dailySmoking != null) {
            stmt.bindLong(20, dailySmoking);
        }
 
        Integer aimDailySmoking = entity.getAimDailySmoking();
        if (aimDailySmoking != null) {
            stmt.bindLong(21, aimDailySmoking);
        }
 
        Integer dailyDrinking = entity.getDailyDrinking();
        if (dailyDrinking != null) {
            stmt.bindLong(22, dailyDrinking);
        }
 
        Integer aimDailyDrinking = entity.getAimDailyDrinking();
        if (aimDailyDrinking != null) {
            stmt.bindLong(23, aimDailyDrinking);
        }
 
        String exerciseFreqCode = entity.getExerciseFreqCode();
        if (exerciseFreqCode != null) {
            stmt.bindString(24, exerciseFreqCode);
        }
 
        String aimExerciseFreqCode = entity.getAimExerciseFreqCode();
        if (aimExerciseFreqCode != null) {
            stmt.bindString(25, aimExerciseFreqCode);
        }
 
        String exerciseDurationWeeks = entity.getExerciseDurationWeeks();
        if (exerciseDurationWeeks != null) {
            stmt.bindString(26, exerciseDurationWeeks);
        }
 
        String aimDurationWeeks = entity.getAimDurationWeeks();
        if (aimDurationWeeks != null) {
            stmt.bindString(27, aimDurationWeeks);
        }
 
        Integer exerciseDurationMins = entity.getExerciseDurationMins();
        if (exerciseDurationMins != null) {
            stmt.bindLong(28, exerciseDurationMins);
        }
 
        Integer aimExerciseMins = entity.getAimExerciseMins();
        if (aimExerciseMins != null) {
            stmt.bindLong(29, aimExerciseMins);
        }
 
        Integer dailyStaple = entity.getDailyStaple();
        if (dailyStaple != null) {
            stmt.bindLong(30, dailyStaple);
        }
 
        Integer aimDailyStaple = entity.getAimDailyStaple();
        if (aimDailyStaple != null) {
            stmt.bindLong(31, aimDailyStaple);
        }
 
        String psyAdjustResultCode = entity.getPsyAdjustResultCode();
        if (psyAdjustResultCode != null) {
            stmt.bindString(32, psyAdjustResultCode);
        }
 
        String complianceResultCode = entity.getComplianceResultCode();
        if (complianceResultCode != null) {
            stmt.bindString(33, complianceResultCode);
        }
 
        Double fbg = entity.getFbg();
        if (fbg != null) {
            stmt.bindDouble(34, fbg);
        }
 
        Double pbg = entity.getPbg();
        if (pbg != null) {
            stmt.bindDouble(35, pbg);
        }
 
        Double ghb = entity.getGhb();
        if (ghb != null) {
            stmt.bindDouble(36, ghb);
        }
 
        java.util.Date ghbDate = entity.getGhbDate();
        if (ghbDate != null) {
            stmt.bindLong(37, ghbDate.getTime());
        }
 
        String accessoryExam = entity.getAccessoryExam();
        if (accessoryExam != null) {
            stmt.bindString(38, accessoryExam);
        }
 
        String hypogReactCode = entity.getHypogReactCode();
        if (hypogReactCode != null) {
            stmt.bindString(39, hypogReactCode);
        }
 
        String visitEvalResultCode = entity.getVisitEvalResultCode();
        if (visitEvalResultCode != null) {
            stmt.bindString(40, visitEvalResultCode);
        }
 
        String insulinType = entity.getInsulinType();
        if (insulinType != null) {
            stmt.bindString(41, insulinType);
        }
 
        Integer insulinUsingFreq = entity.getInsulinUsingFreq();
        if (insulinUsingFreq != null) {
            stmt.bindLong(42, insulinUsingFreq);
        }
 
        Integer insulinPerDose = entity.getInsulinPerDose();
        if (insulinPerDose != null) {
            stmt.bindLong(43, insulinPerDose);
        }
 
        String isReferralCode = entity.getIsReferralCode();
        if (isReferralCode != null) {
            stmt.bindString(44, isReferralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(45, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(46, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(47, refertoDeptName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(48, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(49, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(50, followupDoctorName);
        }
 
        String drugComplianceCode = entity.getDrugComplianceCode();
        if (drugComplianceCode != null) {
            stmt.bindString(51, drugComplianceCode);
        }
 
        String drugAdverseCode = entity.getDrugAdverseCode();
        if (drugAdverseCode != null) {
            stmt.bindString(52, drugAdverseCode);
        }
 
        String drugAdverseDesc = entity.getDrugAdverseDesc();
        if (drugAdverseDesc != null) {
            stmt.bindString(53, drugAdverseDesc);
        }
 
        String followupClassifyCode = entity.getFollowupClassifyCode();
        if (followupClassifyCode != null) {
            stmt.bindString(54, followupClassifyCode);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(55, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(56, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(57, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(58, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(59, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(60, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(61, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(62, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(63, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(64, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(65, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(66, jsonDetail);
        }
 
        String insulinUsingStr = entity.getInsulinUsingStr();
        if (insulinUsingStr != null) {
            stmt.bindString(67, insulinUsingStr);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DiabetesFollowup readEntity(Cursor cursor, int offset) {
        DiabetesFollowup entity = new DiabetesFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // diabetesFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // diabetesFollowupNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // respDoctorName
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // followupDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // followupWayCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // visitType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isMiss
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // missReason
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sbp
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // dbp
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // weight
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // aimWeight
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // height
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // bmi
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // aimBmi
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pofdaCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // otherPositiveSigns
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // dailySmoking
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // aimDailySmoking
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // dailyDrinking
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // aimDailyDrinking
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // exerciseFreqCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // aimExerciseFreqCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // exerciseDurationWeeks
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // aimDurationWeeks
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // exerciseDurationMins
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // aimExerciseMins
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // dailyStaple
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // aimDailyStaple
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // psyAdjustResultCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // complianceResultCode
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // fbg
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // pbg
            cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35), // ghb
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // ghbDate
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // accessoryExam
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // hypogReactCode
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // visitEvalResultCode
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // insulinType
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // insulinUsingFreq
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // insulinPerDose
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // isReferralCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // referralReason
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // refertoOrgName
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // refertoDeptName
            cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)), // nextFollowupDate
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // followupDoctorId
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // followupDoctorName
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // drugComplianceCode
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // drugAdverseCode
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // drugAdverseDesc
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // followupClassifyCode
            cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54), // isCancel
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // createOrgId
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // orgName
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // creatorId
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // creator
            cursor.isNull(offset + 59) ? null : new java.util.Date(cursor.getLong(offset + 59)), // createTime
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // modifiedOrgId
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // modifiedOrgName
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // modifierId
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // modifier
            cursor.isNull(offset + 64) ? null : new java.util.Date(cursor.getLong(offset + 64)), // modifiedTime
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // jsonDetail
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66) // insulinUsingStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiabetesFollowup entity, int offset) {
        entity.setDiabetesFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiabetesFollowupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRespDoctorName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFollowupDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFollowupWayCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVisitType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsMiss(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMissReason(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSbp(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDbp(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setWeight(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setAimWeight(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setHeight(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setBmi(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setAimBmi(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setPofdaCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOtherPositiveSigns(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDailySmoking(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setAimDailySmoking(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setDailyDrinking(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAimDailyDrinking(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setExerciseFreqCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAimExerciseFreqCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setExerciseDurationWeeks(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setAimDurationWeeks(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setExerciseDurationMins(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setAimExerciseMins(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setDailyStaple(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setAimDailyStaple(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setPsyAdjustResultCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setComplianceResultCode(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setFbg(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setPbg(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setGhb(cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35));
        entity.setGhbDate(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setAccessoryExam(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setHypogReactCode(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setVisitEvalResultCode(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setInsulinType(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setInsulinUsingFreq(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setInsulinPerDose(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setIsReferralCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setReferralReason(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setRefertoOrgName(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setRefertoDeptName(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setNextFollowupDate(cursor.isNull(offset + 47) ? null : new java.util.Date(cursor.getLong(offset + 47)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setFollowupDoctorName(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setDrugComplianceCode(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setDrugAdverseCode(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setDrugAdverseDesc(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setFollowupClassifyCode(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setIsCancel(cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54));
        entity.setCreateOrgId(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setOrgName(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setCreatorId(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setCreator(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setCreateTime(cursor.isNull(offset + 59) ? null : new java.util.Date(cursor.getLong(offset + 59)));
        entity.setModifiedOrgId(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setModifiedOrgName(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setModifierId(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setModifier(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setModifiedTime(cursor.isNull(offset + 64) ? null : new java.util.Date(cursor.getLong(offset + 64)));
        entity.setJsonDetail(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setInsulinUsingStr(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DiabetesFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DiabetesFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
