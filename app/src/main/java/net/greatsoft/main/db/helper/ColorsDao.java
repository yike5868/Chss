package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.Colors;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLORS".
*/
public class ColorsDao extends AbstractDao<Colors, Void> {

    public static final String TABLENAME = "COLORS";

    /**
     * Properties of entity Colors.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Color = new Property(0, String.class, "color", false, "COLOR");
        public final static Property Satic = new Property(1, String.class, "satic", false, "SATIC");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property IsDefault = new Property(3, String.class, "isDefault", false, "IS_DEFAULT");
    };


    public ColorsDao(DaoConfig config) {
        super(config);
    }
    
    public ColorsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLORS\" (" + //
                "\"COLOR\" TEXT," + // 0: color
                "\"SATIC\" TEXT," + // 1: satic
                "\"TYPE\" TEXT," + // 2: type
                "\"IS_DEFAULT\" TEXT);"); // 3: isDefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLORS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Colors entity) {
        stmt.clearBindings();
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(1, color);
        }
 
        String satic = entity.getSatic();
        if (satic != null) {
            stmt.bindString(2, satic);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindString(4, isDefault);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Colors entity) {
        stmt.clearBindings();
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(1, color);
        }
 
        String satic = entity.getSatic();
        if (satic != null) {
            stmt.bindString(2, satic);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindString(4, isDefault);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Colors readEntity(Cursor cursor, int offset) {
        Colors entity = new Colors( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // color
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // satic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // isDefault
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Colors entity, int offset) {
        entity.setColor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSatic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDefault(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Colors entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Colors entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
