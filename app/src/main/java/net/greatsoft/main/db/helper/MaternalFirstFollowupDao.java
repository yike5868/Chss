package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.maternal.MaternalFirstFollowup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_FIRST_FOLLOWUP".
*/
public class MaternalFirstFollowupDao extends AbstractDao<MaternalFirstFollowup, Void> {

    public static final String TABLENAME = "MATERNAL_FIRST_FOLLOWUP";

    /**
     * Properties of entity MaternalFirstFollowup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaternalFirstFollowupId = new Property(0, String.class, "maternalFirstFollowupId", false, "MATERNAL_FIRST_FOLLOWUP_ID");
        public final static Property MaternalInfoId = new Property(1, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MaternalFirstFollowupNo = new Property(3, String.class, "maternalFirstFollowupNo", false, "MATERNAL_FIRST_FOLLOWUP_NO");
        public final static Property MaternalRegisterId = new Property(4, String.class, "maternalRegisterId", false, "MATERNAL_REGISTER_ID");
        public final static Property PregnantCount = new Property(5, Integer.class, "pregnantCount", false, "PREGNANT_COUNT");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property FollowupDate = new Property(7, java.util.Date.class, "followupDate", false, "FOLLOWUP_DATE");
        public final static Property FollowupWayCode = new Property(8, String.class, "followupWayCode", false, "FOLLOWUP_WAY_CODE");
        public final static Property GestWeeks = new Property(9, Integer.class, "gestWeeks", false, "GEST_WEEKS");
        public final static Property GestDays = new Property(10, Integer.class, "gestDays", false, "GEST_DAYS");
        public final static Property Age = new Property(11, Integer.class, "age", false, "AGE");
        public final static Property HusbandName = new Property(12, String.class, "husbandName", false, "HUSBAND_NAME");
        public final static Property HusbandTelNo = new Property(13, String.class, "husbandTelNo", false, "HUSBAND_TEL_NO");
        public final static Property HusbandAge = new Property(14, Integer.class, "husbandAge", false, "HUSBAND_AGE");
        public final static Property HusbandBirthday = new Property(15, java.util.Date.class, "husbandBirthday", false, "HUSBAND_BIRTHDAY");
        public final static Property Gravidity = new Property(16, Integer.class, "gravidity", false, "GRAVIDITY");
        public final static Property VaginalDeliveryTimes = new Property(17, Integer.class, "vaginalDeliveryTimes", false, "VAGINAL_DELIVERY_TIMES");
        public final static Property CaesareanDeliveryTimes = new Property(18, Integer.class, "caesareanDeliveryTimes", false, "CAESAREAN_DELIVERY_TIMES");
        public final static Property LastMensesCode = new Property(19, String.class, "lastMensesCode", false, "LAST_MENSES_CODE");
        public final static Property MensesLastDate = new Property(20, java.util.Date.class, "mensesLastDate", false, "MENSES_LAST_DATE");
        public final static Property ExpectedChildBirthday = new Property(21, java.util.Date.class, "expectedChildBirthday", false, "EXPECTED_CHILD_BIRTHDAY");
        public final static Property GynOpHistoryCode = new Property(22, String.class, "gynOpHistoryCode", false, "GYN_OP_HISTORY_CODE");
        public final static Property GynOpHistory = new Property(23, String.class, "gynOpHistory", false, "GYN_OP_HISTORY");
        public final static Property AbortionTimes = new Property(24, Integer.class, "abortionTimes", false, "ABORTION_TIMES");
        public final static Property StillbirthNum = new Property(25, Integer.class, "stillbirthNum", false, "STILLBIRTH_NUM");
        public final static Property DeadFetusNum = new Property(26, Integer.class, "deadFetusNum", false, "DEAD_FETUS_NUM");
        public final static Property NewbornDeathNum = new Property(27, Integer.class, "newbornDeathNum", false, "NEWBORN_DEATH_NUM");
        public final static Property BirthDefectCount = new Property(28, Integer.class, "birthDefectCount", false, "BIRTH_DEFECT_COUNT");
        public final static Property Height = new Property(29, Double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(30, Double.class, "weight", false, "WEIGHT");
        public final static Property Bmi = new Property(31, Double.class, "bmi", false, "BMI");
        public final static Property Sbp = new Property(32, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(33, Integer.class, "dbp", false, "DBP");
        public final static Property LungAbnormCode = new Property(34, String.class, "lungAbnormCode", false, "LUNG_ABNORM_CODE");
        public final static Property LungAbnormDesc = new Property(35, String.class, "lungAbnormDesc", false, "LUNG_ABNORM_DESC");
        public final static Property HeartAbnormCode = new Property(36, String.class, "heartAbnormCode", false, "HEART_ABNORM_CODE");
        public final static Property HeartAbnormDesc = new Property(37, String.class, "heartAbnormDesc", false, "HEART_ABNORM_DESC");
        public final static Property VulvaAbnormCode = new Property(38, String.class, "vulvaAbnormCode", false, "VULVA_ABNORM_CODE");
        public final static Property VulvaAbnormDesc = new Property(39, String.class, "vulvaAbnormDesc", false, "VULVA_ABNORM_DESC");
        public final static Property VaginaAbnormCode = new Property(40, String.class, "vaginaAbnormCode", false, "VAGINA_ABNORM_CODE");
        public final static Property VaginaAbnormDesc = new Property(41, String.class, "vaginaAbnormDesc", false, "VAGINA_ABNORM_DESC");
        public final static Property CervixAbnormCode = new Property(42, String.class, "cervixAbnormCode", false, "CERVIX_ABNORM_CODE");
        public final static Property CervixAbnormDesc = new Property(43, String.class, "cervixAbnormDesc", false, "CERVIX_ABNORM_DESC");
        public final static Property CorpusuteriAbnormCode = new Property(44, String.class, "corpusuteriAbnormCode", false, "CORPUSUTERI_ABNORM_CODE");
        public final static Property CorpusuteriAbnormDesc = new Property(45, String.class, "corpusuteriAbnormDesc", false, "CORPUSUTERI_ABNORM_DESC");
        public final static Property AdnexaAbnormCode = new Property(46, String.class, "adnexaAbnormCode", false, "ADNEXA_ABNORM_CODE");
        public final static Property AdnexaAbnormDesc = new Property(47, String.class, "adnexaAbnormDesc", false, "ADNEXA_ABNORM_DESC");
        public final static Property Hgb = new Property(48, Double.class, "hgb", false, "HGB");
        public final static Property Wbc = new Property(49, Double.class, "wbc", false, "WBC");
        public final static Property Plt = new Property(50, Double.class, "plt", false, "PLT");
        public final static Property CbcOthers = new Property(51, String.class, "cbcOthers", false, "CBC_OTHERS");
        public final static Property ProQuanTestValue = new Property(52, Double.class, "proQuanTestValue", false, "PRO_QUAN_TEST_VALUE");
        public final static Property ProQualResultCode = new Property(53, String.class, "proQualResultCode", false, "PRO_QUAL_RESULT_CODE");
        public final static Property GluQualResultCode = new Property(54, String.class, "gluQualResultCode", false, "GLU_QUAL_RESULT_CODE");
        public final static Property GluQuanTestValue = new Property(55, Double.class, "gluQuanTestValue", false, "GLU_QUAN_TEST_VALUE");
        public final static Property KetQualResultCode = new Property(56, String.class, "ketQualResultCode", false, "KET_QUAL_RESULT_CODE");
        public final static Property UobTestResultCode = new Property(57, String.class, "uobTestResultCode", false, "UOB_TEST_RESULT_CODE");
        public final static Property UrineRoutineOther = new Property(58, String.class, "urineRoutineOther", false, "URINE_ROUTINE_OTHER");
        public final static Property AboRhValue = new Property(59, String.class, "aboRhValue", false, "ABO_RH_VALUE");
        public final static Property AboCode = new Property(60, String.class, "aboCode", false, "ABO_CODE");
        public final static Property RhCode = new Property(61, String.class, "rhCode", false, "RH_CODE");
        public final static Property Glu = new Property(62, Double.class, "glu", false, "GLU");
        public final static Property Sgpt = new Property(63, Double.class, "sgpt", false, "SGPT");
        public final static Property Ast = new Property(64, Double.class, "ast", false, "AST");
        public final static Property Alb = new Property(65, Double.class, "alb", false, "ALB");
        public final static Property Tbi = new Property(66, Double.class, "tbi", false, "TBI");
        public final static Property Dbil = new Property(67, Double.class, "dbil", false, "DBIL");
        public final static Property Bun = new Property(68, Double.class, "bun", false, "BUN");
        public final static Property Scr = new Property(69, Double.class, "scr", false, "SCR");
        public final static Property WvdCleanCode = new Property(70, String.class, "wvdCleanCode", false, "WVD_CLEAN_CODE");
        public final static Property HbeabTestResultCode = new Property(71, String.class, "hbeabTestResultCode", false, "HBEAB_TEST_RESULT_CODE");
        public final static Property HbeagTestResultCode = new Property(72, String.class, "hbeagTestResultCode", false, "HBEAG_TEST_RESULT_CODE");
        public final static Property HbsabTestResultCode = new Property(73, String.class, "hbsabTestResultCode", false, "HBSAB_TEST_RESULT_CODE");
        public final static Property HbsagTestResultCode = new Property(74, String.class, "hbsagTestResultCode", false, "HBSAG_TEST_RESULT_CODE");
        public final static Property HbcabTestResultCode = new Property(75, String.class, "hbcabTestResultCode", false, "HBCAB_TEST_RESULT_CODE");
        public final static Property StsResultCode = new Property(76, String.class, "stsResultCode", false, "STS_RESULT_CODE");
        public final static Property HivAntiResultCode = new Property(77, String.class, "hivAntiResultCode", false, "HIV_ANTI_RESULT_CODE");
        public final static Property BscanResultDesc = new Property(78, String.class, "bscanResultDesc", false, "BSCAN_RESULT_DESC");
        public final static Property PregHealthAbnormCode = new Property(79, String.class, "pregHealthAbnormCode", false, "PREG_HEALTH_ABNORM_CODE");
        public final static Property PregHealthAbnormDesc = new Property(80, String.class, "pregHealthAbnormDesc", false, "PREG_HEALTH_ABNORM_DESC");
        public final static Property ReferralCode = new Property(81, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property RefertoOrgName = new Property(82, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(83, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property ReferralReason = new Property(84, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property PreviousVisitDate = new Property(85, java.util.Date.class, "previousVisitDate", false, "PREVIOUS_VISIT_DATE");
        public final static Property PreviousVisitPerson = new Property(86, String.class, "previousVisitPerson", false, "PREVIOUS_VISIT_PERSON");
        public final static Property PreviousVisitTypeCode = new Property(87, String.class, "previousVisitTypeCode", false, "PREVIOUS_VISIT_TYPE_CODE");
        public final static Property NextFollowupDate = new Property(88, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property FollowupDoctorId = new Property(89, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupDoctorName = new Property(90, String.class, "followupDoctorName", false, "FOLLOWUP_DOCTOR_NAME");
        public final static Property IsCancel = new Property(91, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(92, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(93, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(94, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(95, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(96, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(97, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(98, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(99, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(100, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(101, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property ExamOthers = new Property(102, String.class, "examOthers", false, "EXAM_OTHERS");
    };


    public MaternalFirstFollowupDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalFirstFollowupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_FIRST_FOLLOWUP\" (" + //
                "\"MATERNAL_FIRST_FOLLOWUP_ID\" TEXT," + // 0: maternalFirstFollowupId
                "\"MATERNAL_INFO_ID\" TEXT," + // 1: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"MATERNAL_FIRST_FOLLOWUP_NO\" TEXT," + // 3: maternalFirstFollowupNo
                "\"MATERNAL_REGISTER_ID\" TEXT," + // 4: maternalRegisterId
                "\"PREGNANT_COUNT\" INTEGER," + // 5: pregnantCount
                "\"NAME\" TEXT," + // 6: name
                "\"FOLLOWUP_DATE\" INTEGER," + // 7: followupDate
                "\"FOLLOWUP_WAY_CODE\" TEXT," + // 8: followupWayCode
                "\"GEST_WEEKS\" INTEGER," + // 9: gestWeeks
                "\"GEST_DAYS\" INTEGER," + // 10: gestDays
                "\"AGE\" INTEGER," + // 11: age
                "\"HUSBAND_NAME\" TEXT," + // 12: husbandName
                "\"HUSBAND_TEL_NO\" TEXT," + // 13: husbandTelNo
                "\"HUSBAND_AGE\" INTEGER," + // 14: husbandAge
                "\"HUSBAND_BIRTHDAY\" INTEGER," + // 15: husbandBirthday
                "\"GRAVIDITY\" INTEGER," + // 16: gravidity
                "\"VAGINAL_DELIVERY_TIMES\" INTEGER," + // 17: vaginalDeliveryTimes
                "\"CAESAREAN_DELIVERY_TIMES\" INTEGER," + // 18: caesareanDeliveryTimes
                "\"LAST_MENSES_CODE\" TEXT," + // 19: lastMensesCode
                "\"MENSES_LAST_DATE\" INTEGER," + // 20: mensesLastDate
                "\"EXPECTED_CHILD_BIRTHDAY\" INTEGER," + // 21: expectedChildBirthday
                "\"GYN_OP_HISTORY_CODE\" TEXT," + // 22: gynOpHistoryCode
                "\"GYN_OP_HISTORY\" TEXT," + // 23: gynOpHistory
                "\"ABORTION_TIMES\" INTEGER," + // 24: abortionTimes
                "\"STILLBIRTH_NUM\" INTEGER," + // 25: stillbirthNum
                "\"DEAD_FETUS_NUM\" INTEGER," + // 26: deadFetusNum
                "\"NEWBORN_DEATH_NUM\" INTEGER," + // 27: newbornDeathNum
                "\"BIRTH_DEFECT_COUNT\" INTEGER," + // 28: birthDefectCount
                "\"HEIGHT\" REAL," + // 29: height
                "\"WEIGHT\" REAL," + // 30: weight
                "\"BMI\" REAL," + // 31: bmi
                "\"SBP\" INTEGER," + // 32: sbp
                "\"DBP\" INTEGER," + // 33: dbp
                "\"LUNG_ABNORM_CODE\" TEXT," + // 34: lungAbnormCode
                "\"LUNG_ABNORM_DESC\" TEXT," + // 35: lungAbnormDesc
                "\"HEART_ABNORM_CODE\" TEXT," + // 36: heartAbnormCode
                "\"HEART_ABNORM_DESC\" TEXT," + // 37: heartAbnormDesc
                "\"VULVA_ABNORM_CODE\" TEXT," + // 38: vulvaAbnormCode
                "\"VULVA_ABNORM_DESC\" TEXT," + // 39: vulvaAbnormDesc
                "\"VAGINA_ABNORM_CODE\" TEXT," + // 40: vaginaAbnormCode
                "\"VAGINA_ABNORM_DESC\" TEXT," + // 41: vaginaAbnormDesc
                "\"CERVIX_ABNORM_CODE\" TEXT," + // 42: cervixAbnormCode
                "\"CERVIX_ABNORM_DESC\" TEXT," + // 43: cervixAbnormDesc
                "\"CORPUSUTERI_ABNORM_CODE\" TEXT," + // 44: corpusuteriAbnormCode
                "\"CORPUSUTERI_ABNORM_DESC\" TEXT," + // 45: corpusuteriAbnormDesc
                "\"ADNEXA_ABNORM_CODE\" TEXT," + // 46: adnexaAbnormCode
                "\"ADNEXA_ABNORM_DESC\" TEXT," + // 47: adnexaAbnormDesc
                "\"HGB\" REAL," + // 48: hgb
                "\"WBC\" REAL," + // 49: wbc
                "\"PLT\" REAL," + // 50: plt
                "\"CBC_OTHERS\" TEXT," + // 51: cbcOthers
                "\"PRO_QUAN_TEST_VALUE\" REAL," + // 52: proQuanTestValue
                "\"PRO_QUAL_RESULT_CODE\" TEXT," + // 53: proQualResultCode
                "\"GLU_QUAL_RESULT_CODE\" TEXT," + // 54: gluQualResultCode
                "\"GLU_QUAN_TEST_VALUE\" REAL," + // 55: gluQuanTestValue
                "\"KET_QUAL_RESULT_CODE\" TEXT," + // 56: ketQualResultCode
                "\"UOB_TEST_RESULT_CODE\" TEXT," + // 57: uobTestResultCode
                "\"URINE_ROUTINE_OTHER\" TEXT," + // 58: urineRoutineOther
                "\"ABO_RH_VALUE\" TEXT," + // 59: aboRhValue
                "\"ABO_CODE\" TEXT," + // 60: aboCode
                "\"RH_CODE\" TEXT," + // 61: rhCode
                "\"GLU\" REAL," + // 62: glu
                "\"SGPT\" REAL," + // 63: sgpt
                "\"AST\" REAL," + // 64: ast
                "\"ALB\" REAL," + // 65: alb
                "\"TBI\" REAL," + // 66: tbi
                "\"DBIL\" REAL," + // 67: dbil
                "\"BUN\" REAL," + // 68: bun
                "\"SCR\" REAL," + // 69: scr
                "\"WVD_CLEAN_CODE\" TEXT," + // 70: wvdCleanCode
                "\"HBEAB_TEST_RESULT_CODE\" TEXT," + // 71: hbeabTestResultCode
                "\"HBEAG_TEST_RESULT_CODE\" TEXT," + // 72: hbeagTestResultCode
                "\"HBSAB_TEST_RESULT_CODE\" TEXT," + // 73: hbsabTestResultCode
                "\"HBSAG_TEST_RESULT_CODE\" TEXT," + // 74: hbsagTestResultCode
                "\"HBCAB_TEST_RESULT_CODE\" TEXT," + // 75: hbcabTestResultCode
                "\"STS_RESULT_CODE\" TEXT," + // 76: stsResultCode
                "\"HIV_ANTI_RESULT_CODE\" TEXT," + // 77: hivAntiResultCode
                "\"BSCAN_RESULT_DESC\" TEXT," + // 78: bscanResultDesc
                "\"PREG_HEALTH_ABNORM_CODE\" TEXT," + // 79: pregHealthAbnormCode
                "\"PREG_HEALTH_ABNORM_DESC\" TEXT," + // 80: pregHealthAbnormDesc
                "\"REFERRAL_CODE\" TEXT," + // 81: referralCode
                "\"REFERTO_ORG_NAME\" TEXT," + // 82: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 83: refertoDeptName
                "\"REFERRAL_REASON\" TEXT," + // 84: referralReason
                "\"PREVIOUS_VISIT_DATE\" INTEGER," + // 85: previousVisitDate
                "\"PREVIOUS_VISIT_PERSON\" TEXT," + // 86: previousVisitPerson
                "\"PREVIOUS_VISIT_TYPE_CODE\" TEXT," + // 87: previousVisitTypeCode
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 88: nextFollowupDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 89: followupDoctorId
                "\"FOLLOWUP_DOCTOR_NAME\" TEXT," + // 90: followupDoctorName
                "\"IS_CANCEL\" INTEGER," + // 91: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 92: createOrgId
                "\"ORG_NAME\" TEXT," + // 93: orgName
                "\"CREATOR_ID\" TEXT," + // 94: creatorId
                "\"CREATOR\" TEXT," + // 95: creator
                "\"CREATE_TIME\" INTEGER," + // 96: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 97: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 98: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 99: modifierId
                "\"MODIFIER\" TEXT," + // 100: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 101: modifiedTime
                "\"EXAM_OTHERS\" TEXT);"); // 102: examOthers
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_FIRST_FOLLOWUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalFirstFollowup entity) {
        stmt.clearBindings();
 
        String maternalFirstFollowupId = entity.getMaternalFirstFollowupId();
        if (maternalFirstFollowupId != null) {
            stmt.bindString(1, maternalFirstFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalFirstFollowupNo = entity.getMaternalFirstFollowupNo();
        if (maternalFirstFollowupNo != null) {
            stmt.bindString(4, maternalFirstFollowupNo);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(5, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(8, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(9, followupWayCode);
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(10, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(11, gestDays);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(12, age);
        }
 
        String husbandName = entity.getHusbandName();
        if (husbandName != null) {
            stmt.bindString(13, husbandName);
        }
 
        String husbandTelNo = entity.getHusbandTelNo();
        if (husbandTelNo != null) {
            stmt.bindString(14, husbandTelNo);
        }
 
        Integer husbandAge = entity.getHusbandAge();
        if (husbandAge != null) {
            stmt.bindLong(15, husbandAge);
        }
 
        java.util.Date husbandBirthday = entity.getHusbandBirthday();
        if (husbandBirthday != null) {
            stmt.bindLong(16, husbandBirthday.getTime());
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(17, gravidity);
        }
 
        Integer vaginalDeliveryTimes = entity.getVaginalDeliveryTimes();
        if (vaginalDeliveryTimes != null) {
            stmt.bindLong(18, vaginalDeliveryTimes);
        }
 
        Integer caesareanDeliveryTimes = entity.getCaesareanDeliveryTimes();
        if (caesareanDeliveryTimes != null) {
            stmt.bindLong(19, caesareanDeliveryTimes);
        }
 
        String lastMensesCode = entity.getLastMensesCode();
        if (lastMensesCode != null) {
            stmt.bindString(20, lastMensesCode);
        }
 
        java.util.Date mensesLastDate = entity.getMensesLastDate();
        if (mensesLastDate != null) {
            stmt.bindLong(21, mensesLastDate.getTime());
        }
 
        java.util.Date expectedChildBirthday = entity.getExpectedChildBirthday();
        if (expectedChildBirthday != null) {
            stmt.bindLong(22, expectedChildBirthday.getTime());
        }
 
        String gynOpHistoryCode = entity.getGynOpHistoryCode();
        if (gynOpHistoryCode != null) {
            stmt.bindString(23, gynOpHistoryCode);
        }
 
        String gynOpHistory = entity.getGynOpHistory();
        if (gynOpHistory != null) {
            stmt.bindString(24, gynOpHistory);
        }
 
        Integer abortionTimes = entity.getAbortionTimes();
        if (abortionTimes != null) {
            stmt.bindLong(25, abortionTimes);
        }
 
        Integer stillbirthNum = entity.getStillbirthNum();
        if (stillbirthNum != null) {
            stmt.bindLong(26, stillbirthNum);
        }
 
        Integer deadFetusNum = entity.getDeadFetusNum();
        if (deadFetusNum != null) {
            stmt.bindLong(27, deadFetusNum);
        }
 
        Integer newbornDeathNum = entity.getNewbornDeathNum();
        if (newbornDeathNum != null) {
            stmt.bindLong(28, newbornDeathNum);
        }
 
        Integer birthDefectCount = entity.getBirthDefectCount();
        if (birthDefectCount != null) {
            stmt.bindLong(29, birthDefectCount);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(30, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(31, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(32, bmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(33, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(34, dbp);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(35, lungAbnormCode);
        }
 
        String lungAbnormDesc = entity.getLungAbnormDesc();
        if (lungAbnormDesc != null) {
            stmt.bindString(36, lungAbnormDesc);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(37, heartAbnormCode);
        }
 
        String heartAbnormDesc = entity.getHeartAbnormDesc();
        if (heartAbnormDesc != null) {
            stmt.bindString(38, heartAbnormDesc);
        }
 
        String vulvaAbnormCode = entity.getVulvaAbnormCode();
        if (vulvaAbnormCode != null) {
            stmt.bindString(39, vulvaAbnormCode);
        }
 
        String vulvaAbnormDesc = entity.getVulvaAbnormDesc();
        if (vulvaAbnormDesc != null) {
            stmt.bindString(40, vulvaAbnormDesc);
        }
 
        String vaginaAbnormCode = entity.getVaginaAbnormCode();
        if (vaginaAbnormCode != null) {
            stmt.bindString(41, vaginaAbnormCode);
        }
 
        String vaginaAbnormDesc = entity.getVaginaAbnormDesc();
        if (vaginaAbnormDesc != null) {
            stmt.bindString(42, vaginaAbnormDesc);
        }
 
        String cervixAbnormCode = entity.getCervixAbnormCode();
        if (cervixAbnormCode != null) {
            stmt.bindString(43, cervixAbnormCode);
        }
 
        String cervixAbnormDesc = entity.getCervixAbnormDesc();
        if (cervixAbnormDesc != null) {
            stmt.bindString(44, cervixAbnormDesc);
        }
 
        String corpusuteriAbnormCode = entity.getCorpusuteriAbnormCode();
        if (corpusuteriAbnormCode != null) {
            stmt.bindString(45, corpusuteriAbnormCode);
        }
 
        String corpusuteriAbnormDesc = entity.getCorpusuteriAbnormDesc();
        if (corpusuteriAbnormDesc != null) {
            stmt.bindString(46, corpusuteriAbnormDesc);
        }
 
        String adnexaAbnormCode = entity.getAdnexaAbnormCode();
        if (adnexaAbnormCode != null) {
            stmt.bindString(47, adnexaAbnormCode);
        }
 
        String adnexaAbnormDesc = entity.getAdnexaAbnormDesc();
        if (adnexaAbnormDesc != null) {
            stmt.bindString(48, adnexaAbnormDesc);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(49, hgb);
        }
 
        Double wbc = entity.getWbc();
        if (wbc != null) {
            stmt.bindDouble(50, wbc);
        }
 
        Double plt = entity.getPlt();
        if (plt != null) {
            stmt.bindDouble(51, plt);
        }
 
        String cbcOthers = entity.getCbcOthers();
        if (cbcOthers != null) {
            stmt.bindString(52, cbcOthers);
        }
 
        Double proQuanTestValue = entity.getProQuanTestValue();
        if (proQuanTestValue != null) {
            stmt.bindDouble(53, proQuanTestValue);
        }
 
        String proQualResultCode = entity.getProQualResultCode();
        if (proQualResultCode != null) {
            stmt.bindString(54, proQualResultCode);
        }
 
        String gluQualResultCode = entity.getGluQualResultCode();
        if (gluQualResultCode != null) {
            stmt.bindString(55, gluQualResultCode);
        }
 
        Double gluQuanTestValue = entity.getGluQuanTestValue();
        if (gluQuanTestValue != null) {
            stmt.bindDouble(56, gluQuanTestValue);
        }
 
        String ketQualResultCode = entity.getKetQualResultCode();
        if (ketQualResultCode != null) {
            stmt.bindString(57, ketQualResultCode);
        }
 
        String uobTestResultCode = entity.getUobTestResultCode();
        if (uobTestResultCode != null) {
            stmt.bindString(58, uobTestResultCode);
        }
 
        String urineRoutineOther = entity.getUrineRoutineOther();
        if (urineRoutineOther != null) {
            stmt.bindString(59, urineRoutineOther);
        }
 
        String aboRhValue = entity.getAboRhValue();
        if (aboRhValue != null) {
            stmt.bindString(60, aboRhValue);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(61, aboCode);
        }
 
        String rhCode = entity.getRhCode();
        if (rhCode != null) {
            stmt.bindString(62, rhCode);
        }
 
        Double glu = entity.getGlu();
        if (glu != null) {
            stmt.bindDouble(63, glu);
        }
 
        Double sgpt = entity.getSgpt();
        if (sgpt != null) {
            stmt.bindDouble(64, sgpt);
        }
 
        Double ast = entity.getAst();
        if (ast != null) {
            stmt.bindDouble(65, ast);
        }
 
        Double alb = entity.getAlb();
        if (alb != null) {
            stmt.bindDouble(66, alb);
        }
 
        Double tbi = entity.getTbi();
        if (tbi != null) {
            stmt.bindDouble(67, tbi);
        }
 
        Double dbil = entity.getDbil();
        if (dbil != null) {
            stmt.bindDouble(68, dbil);
        }
 
        Double bun = entity.getBun();
        if (bun != null) {
            stmt.bindDouble(69, bun);
        }
 
        Double scr = entity.getScr();
        if (scr != null) {
            stmt.bindDouble(70, scr);
        }
 
        String wvdCleanCode = entity.getWvdCleanCode();
        if (wvdCleanCode != null) {
            stmt.bindString(71, wvdCleanCode);
        }
 
        String hbeabTestResultCode = entity.getHbeabTestResultCode();
        if (hbeabTestResultCode != null) {
            stmt.bindString(72, hbeabTestResultCode);
        }
 
        String hbeagTestResultCode = entity.getHbeagTestResultCode();
        if (hbeagTestResultCode != null) {
            stmt.bindString(73, hbeagTestResultCode);
        }
 
        String hbsabTestResultCode = entity.getHbsabTestResultCode();
        if (hbsabTestResultCode != null) {
            stmt.bindString(74, hbsabTestResultCode);
        }
 
        String hbsagTestResultCode = entity.getHbsagTestResultCode();
        if (hbsagTestResultCode != null) {
            stmt.bindString(75, hbsagTestResultCode);
        }
 
        String hbcabTestResultCode = entity.getHbcabTestResultCode();
        if (hbcabTestResultCode != null) {
            stmt.bindString(76, hbcabTestResultCode);
        }
 
        String stsResultCode = entity.getStsResultCode();
        if (stsResultCode != null) {
            stmt.bindString(77, stsResultCode);
        }
 
        String hivAntiResultCode = entity.getHivAntiResultCode();
        if (hivAntiResultCode != null) {
            stmt.bindString(78, hivAntiResultCode);
        }
 
        String bscanResultDesc = entity.getBscanResultDesc();
        if (bscanResultDesc != null) {
            stmt.bindString(79, bscanResultDesc);
        }
 
        String pregHealthAbnormCode = entity.getPregHealthAbnormCode();
        if (pregHealthAbnormCode != null) {
            stmt.bindString(80, pregHealthAbnormCode);
        }
 
        String pregHealthAbnormDesc = entity.getPregHealthAbnormDesc();
        if (pregHealthAbnormDesc != null) {
            stmt.bindString(81, pregHealthAbnormDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(82, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(83, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(84, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(85, referralReason);
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(86, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(87, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(88, previousVisitTypeCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(89, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(90, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(91, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(92, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(93, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(94, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(95, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(96, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(97, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(98, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(99, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(100, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(101, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(102, modifiedTime.getTime());
        }
 
        String examOthers = entity.getExamOthers();
        if (examOthers != null) {
            stmt.bindString(103, examOthers);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalFirstFollowup entity) {
        stmt.clearBindings();
 
        String maternalFirstFollowupId = entity.getMaternalFirstFollowupId();
        if (maternalFirstFollowupId != null) {
            stmt.bindString(1, maternalFirstFollowupId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalFirstFollowupNo = entity.getMaternalFirstFollowupNo();
        if (maternalFirstFollowupNo != null) {
            stmt.bindString(4, maternalFirstFollowupNo);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(5, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(6, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        java.util.Date followupDate = entity.getFollowupDate();
        if (followupDate != null) {
            stmt.bindLong(8, followupDate.getTime());
        }
 
        String followupWayCode = entity.getFollowupWayCode();
        if (followupWayCode != null) {
            stmt.bindString(9, followupWayCode);
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(10, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(11, gestDays);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(12, age);
        }
 
        String husbandName = entity.getHusbandName();
        if (husbandName != null) {
            stmt.bindString(13, husbandName);
        }
 
        String husbandTelNo = entity.getHusbandTelNo();
        if (husbandTelNo != null) {
            stmt.bindString(14, husbandTelNo);
        }
 
        Integer husbandAge = entity.getHusbandAge();
        if (husbandAge != null) {
            stmt.bindLong(15, husbandAge);
        }
 
        java.util.Date husbandBirthday = entity.getHusbandBirthday();
        if (husbandBirthday != null) {
            stmt.bindLong(16, husbandBirthday.getTime());
        }
 
        Integer gravidity = entity.getGravidity();
        if (gravidity != null) {
            stmt.bindLong(17, gravidity);
        }
 
        Integer vaginalDeliveryTimes = entity.getVaginalDeliveryTimes();
        if (vaginalDeliveryTimes != null) {
            stmt.bindLong(18, vaginalDeliveryTimes);
        }
 
        Integer caesareanDeliveryTimes = entity.getCaesareanDeliveryTimes();
        if (caesareanDeliveryTimes != null) {
            stmt.bindLong(19, caesareanDeliveryTimes);
        }
 
        String lastMensesCode = entity.getLastMensesCode();
        if (lastMensesCode != null) {
            stmt.bindString(20, lastMensesCode);
        }
 
        java.util.Date mensesLastDate = entity.getMensesLastDate();
        if (mensesLastDate != null) {
            stmt.bindLong(21, mensesLastDate.getTime());
        }
 
        java.util.Date expectedChildBirthday = entity.getExpectedChildBirthday();
        if (expectedChildBirthday != null) {
            stmt.bindLong(22, expectedChildBirthday.getTime());
        }
 
        String gynOpHistoryCode = entity.getGynOpHistoryCode();
        if (gynOpHistoryCode != null) {
            stmt.bindString(23, gynOpHistoryCode);
        }
 
        String gynOpHistory = entity.getGynOpHistory();
        if (gynOpHistory != null) {
            stmt.bindString(24, gynOpHistory);
        }
 
        Integer abortionTimes = entity.getAbortionTimes();
        if (abortionTimes != null) {
            stmt.bindLong(25, abortionTimes);
        }
 
        Integer stillbirthNum = entity.getStillbirthNum();
        if (stillbirthNum != null) {
            stmt.bindLong(26, stillbirthNum);
        }
 
        Integer deadFetusNum = entity.getDeadFetusNum();
        if (deadFetusNum != null) {
            stmt.bindLong(27, deadFetusNum);
        }
 
        Integer newbornDeathNum = entity.getNewbornDeathNum();
        if (newbornDeathNum != null) {
            stmt.bindLong(28, newbornDeathNum);
        }
 
        Integer birthDefectCount = entity.getBirthDefectCount();
        if (birthDefectCount != null) {
            stmt.bindLong(29, birthDefectCount);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(30, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(31, weight);
        }
 
        Double bmi = entity.getBmi();
        if (bmi != null) {
            stmt.bindDouble(32, bmi);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(33, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(34, dbp);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(35, lungAbnormCode);
        }
 
        String lungAbnormDesc = entity.getLungAbnormDesc();
        if (lungAbnormDesc != null) {
            stmt.bindString(36, lungAbnormDesc);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(37, heartAbnormCode);
        }
 
        String heartAbnormDesc = entity.getHeartAbnormDesc();
        if (heartAbnormDesc != null) {
            stmt.bindString(38, heartAbnormDesc);
        }
 
        String vulvaAbnormCode = entity.getVulvaAbnormCode();
        if (vulvaAbnormCode != null) {
            stmt.bindString(39, vulvaAbnormCode);
        }
 
        String vulvaAbnormDesc = entity.getVulvaAbnormDesc();
        if (vulvaAbnormDesc != null) {
            stmt.bindString(40, vulvaAbnormDesc);
        }
 
        String vaginaAbnormCode = entity.getVaginaAbnormCode();
        if (vaginaAbnormCode != null) {
            stmt.bindString(41, vaginaAbnormCode);
        }
 
        String vaginaAbnormDesc = entity.getVaginaAbnormDesc();
        if (vaginaAbnormDesc != null) {
            stmt.bindString(42, vaginaAbnormDesc);
        }
 
        String cervixAbnormCode = entity.getCervixAbnormCode();
        if (cervixAbnormCode != null) {
            stmt.bindString(43, cervixAbnormCode);
        }
 
        String cervixAbnormDesc = entity.getCervixAbnormDesc();
        if (cervixAbnormDesc != null) {
            stmt.bindString(44, cervixAbnormDesc);
        }
 
        String corpusuteriAbnormCode = entity.getCorpusuteriAbnormCode();
        if (corpusuteriAbnormCode != null) {
            stmt.bindString(45, corpusuteriAbnormCode);
        }
 
        String corpusuteriAbnormDesc = entity.getCorpusuteriAbnormDesc();
        if (corpusuteriAbnormDesc != null) {
            stmt.bindString(46, corpusuteriAbnormDesc);
        }
 
        String adnexaAbnormCode = entity.getAdnexaAbnormCode();
        if (adnexaAbnormCode != null) {
            stmt.bindString(47, adnexaAbnormCode);
        }
 
        String adnexaAbnormDesc = entity.getAdnexaAbnormDesc();
        if (adnexaAbnormDesc != null) {
            stmt.bindString(48, adnexaAbnormDesc);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(49, hgb);
        }
 
        Double wbc = entity.getWbc();
        if (wbc != null) {
            stmt.bindDouble(50, wbc);
        }
 
        Double plt = entity.getPlt();
        if (plt != null) {
            stmt.bindDouble(51, plt);
        }
 
        String cbcOthers = entity.getCbcOthers();
        if (cbcOthers != null) {
            stmt.bindString(52, cbcOthers);
        }
 
        Double proQuanTestValue = entity.getProQuanTestValue();
        if (proQuanTestValue != null) {
            stmt.bindDouble(53, proQuanTestValue);
        }
 
        String proQualResultCode = entity.getProQualResultCode();
        if (proQualResultCode != null) {
            stmt.bindString(54, proQualResultCode);
        }
 
        String gluQualResultCode = entity.getGluQualResultCode();
        if (gluQualResultCode != null) {
            stmt.bindString(55, gluQualResultCode);
        }
 
        Double gluQuanTestValue = entity.getGluQuanTestValue();
        if (gluQuanTestValue != null) {
            stmt.bindDouble(56, gluQuanTestValue);
        }
 
        String ketQualResultCode = entity.getKetQualResultCode();
        if (ketQualResultCode != null) {
            stmt.bindString(57, ketQualResultCode);
        }
 
        String uobTestResultCode = entity.getUobTestResultCode();
        if (uobTestResultCode != null) {
            stmt.bindString(58, uobTestResultCode);
        }
 
        String urineRoutineOther = entity.getUrineRoutineOther();
        if (urineRoutineOther != null) {
            stmt.bindString(59, urineRoutineOther);
        }
 
        String aboRhValue = entity.getAboRhValue();
        if (aboRhValue != null) {
            stmt.bindString(60, aboRhValue);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(61, aboCode);
        }
 
        String rhCode = entity.getRhCode();
        if (rhCode != null) {
            stmt.bindString(62, rhCode);
        }
 
        Double glu = entity.getGlu();
        if (glu != null) {
            stmt.bindDouble(63, glu);
        }
 
        Double sgpt = entity.getSgpt();
        if (sgpt != null) {
            stmt.bindDouble(64, sgpt);
        }
 
        Double ast = entity.getAst();
        if (ast != null) {
            stmt.bindDouble(65, ast);
        }
 
        Double alb = entity.getAlb();
        if (alb != null) {
            stmt.bindDouble(66, alb);
        }
 
        Double tbi = entity.getTbi();
        if (tbi != null) {
            stmt.bindDouble(67, tbi);
        }
 
        Double dbil = entity.getDbil();
        if (dbil != null) {
            stmt.bindDouble(68, dbil);
        }
 
        Double bun = entity.getBun();
        if (bun != null) {
            stmt.bindDouble(69, bun);
        }
 
        Double scr = entity.getScr();
        if (scr != null) {
            stmt.bindDouble(70, scr);
        }
 
        String wvdCleanCode = entity.getWvdCleanCode();
        if (wvdCleanCode != null) {
            stmt.bindString(71, wvdCleanCode);
        }
 
        String hbeabTestResultCode = entity.getHbeabTestResultCode();
        if (hbeabTestResultCode != null) {
            stmt.bindString(72, hbeabTestResultCode);
        }
 
        String hbeagTestResultCode = entity.getHbeagTestResultCode();
        if (hbeagTestResultCode != null) {
            stmt.bindString(73, hbeagTestResultCode);
        }
 
        String hbsabTestResultCode = entity.getHbsabTestResultCode();
        if (hbsabTestResultCode != null) {
            stmt.bindString(74, hbsabTestResultCode);
        }
 
        String hbsagTestResultCode = entity.getHbsagTestResultCode();
        if (hbsagTestResultCode != null) {
            stmt.bindString(75, hbsagTestResultCode);
        }
 
        String hbcabTestResultCode = entity.getHbcabTestResultCode();
        if (hbcabTestResultCode != null) {
            stmt.bindString(76, hbcabTestResultCode);
        }
 
        String stsResultCode = entity.getStsResultCode();
        if (stsResultCode != null) {
            stmt.bindString(77, stsResultCode);
        }
 
        String hivAntiResultCode = entity.getHivAntiResultCode();
        if (hivAntiResultCode != null) {
            stmt.bindString(78, hivAntiResultCode);
        }
 
        String bscanResultDesc = entity.getBscanResultDesc();
        if (bscanResultDesc != null) {
            stmt.bindString(79, bscanResultDesc);
        }
 
        String pregHealthAbnormCode = entity.getPregHealthAbnormCode();
        if (pregHealthAbnormCode != null) {
            stmt.bindString(80, pregHealthAbnormCode);
        }
 
        String pregHealthAbnormDesc = entity.getPregHealthAbnormDesc();
        if (pregHealthAbnormDesc != null) {
            stmt.bindString(81, pregHealthAbnormDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(82, referralCode);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(83, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(84, refertoDeptName);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(85, referralReason);
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(86, previousVisitDate.getTime());
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(87, previousVisitPerson);
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(88, previousVisitTypeCode);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(89, nextFollowupDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(90, followupDoctorId);
        }
 
        String followupDoctorName = entity.getFollowupDoctorName();
        if (followupDoctorName != null) {
            stmt.bindString(91, followupDoctorName);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(92, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(93, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(94, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(95, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(96, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(97, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(98, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(99, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(100, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(101, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(102, modifiedTime.getTime());
        }
 
        String examOthers = entity.getExamOthers();
        if (examOthers != null) {
            stmt.bindString(103, examOthers);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalFirstFollowup readEntity(Cursor cursor, int offset) {
        MaternalFirstFollowup entity = new MaternalFirstFollowup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maternalFirstFollowupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // maternalInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maternalFirstFollowupNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maternalRegisterId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pregnantCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // followupDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // followupWayCode
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // gestWeeks
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // gestDays
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // age
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // husbandName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // husbandTelNo
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // husbandAge
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // husbandBirthday
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // gravidity
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // vaginalDeliveryTimes
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // caesareanDeliveryTimes
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lastMensesCode
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // mensesLastDate
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // expectedChildBirthday
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // gynOpHistoryCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // gynOpHistory
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // abortionTimes
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // stillbirthNum
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // deadFetusNum
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // newbornDeathNum
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // birthDefectCount
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // height
            cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30), // weight
            cursor.isNull(offset + 31) ? null : cursor.getDouble(offset + 31), // bmi
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // sbp
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // dbp
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // lungAbnormCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // lungAbnormDesc
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // heartAbnormCode
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // heartAbnormDesc
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // vulvaAbnormCode
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // vulvaAbnormDesc
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // vaginaAbnormCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // vaginaAbnormDesc
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // cervixAbnormCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // cervixAbnormDesc
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // corpusuteriAbnormCode
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // corpusuteriAbnormDesc
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // adnexaAbnormCode
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // adnexaAbnormDesc
            cursor.isNull(offset + 48) ? null : cursor.getDouble(offset + 48), // hgb
            cursor.isNull(offset + 49) ? null : cursor.getDouble(offset + 49), // wbc
            cursor.isNull(offset + 50) ? null : cursor.getDouble(offset + 50), // plt
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // cbcOthers
            cursor.isNull(offset + 52) ? null : cursor.getDouble(offset + 52), // proQuanTestValue
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // proQualResultCode
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // gluQualResultCode
            cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55), // gluQuanTestValue
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // ketQualResultCode
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // uobTestResultCode
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // urineRoutineOther
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // aboRhValue
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // aboCode
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // rhCode
            cursor.isNull(offset + 62) ? null : cursor.getDouble(offset + 62), // glu
            cursor.isNull(offset + 63) ? null : cursor.getDouble(offset + 63), // sgpt
            cursor.isNull(offset + 64) ? null : cursor.getDouble(offset + 64), // ast
            cursor.isNull(offset + 65) ? null : cursor.getDouble(offset + 65), // alb
            cursor.isNull(offset + 66) ? null : cursor.getDouble(offset + 66), // tbi
            cursor.isNull(offset + 67) ? null : cursor.getDouble(offset + 67), // dbil
            cursor.isNull(offset + 68) ? null : cursor.getDouble(offset + 68), // bun
            cursor.isNull(offset + 69) ? null : cursor.getDouble(offset + 69), // scr
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // wvdCleanCode
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // hbeabTestResultCode
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // hbeagTestResultCode
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // hbsabTestResultCode
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // hbsagTestResultCode
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // hbcabTestResultCode
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // stsResultCode
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // hivAntiResultCode
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // bscanResultDesc
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // pregHealthAbnormCode
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // pregHealthAbnormDesc
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // referralCode
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // refertoOrgName
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // refertoDeptName
            cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84), // referralReason
            cursor.isNull(offset + 85) ? null : new java.util.Date(cursor.getLong(offset + 85)), // previousVisitDate
            cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86), // previousVisitPerson
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // previousVisitTypeCode
            cursor.isNull(offset + 88) ? null : new java.util.Date(cursor.getLong(offset + 88)), // nextFollowupDate
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // followupDoctorId
            cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90), // followupDoctorName
            cursor.isNull(offset + 91) ? null : cursor.getInt(offset + 91), // isCancel
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92), // createOrgId
            cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93), // orgName
            cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94), // creatorId
            cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95), // creator
            cursor.isNull(offset + 96) ? null : new java.util.Date(cursor.getLong(offset + 96)), // createTime
            cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97), // modifiedOrgId
            cursor.isNull(offset + 98) ? null : cursor.getString(offset + 98), // modifiedOrgName
            cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99), // modifierId
            cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100), // modifier
            cursor.isNull(offset + 101) ? null : new java.util.Date(cursor.getLong(offset + 101)), // modifiedTime
            cursor.isNull(offset + 102) ? null : cursor.getString(offset + 102) // examOthers
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalFirstFollowup entity, int offset) {
        entity.setMaternalFirstFollowupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaternalInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaternalFirstFollowupNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaternalRegisterId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPregnantCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFollowupDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setFollowupWayCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGestWeeks(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setGestDays(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAge(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setHusbandName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHusbandTelNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHusbandAge(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setHusbandBirthday(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setGravidity(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setVaginalDeliveryTimes(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCaesareanDeliveryTimes(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setLastMensesCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMensesLastDate(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setExpectedChildBirthday(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setGynOpHistoryCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGynOpHistory(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAbortionTimes(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setStillbirthNum(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDeadFetusNum(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setNewbornDeathNum(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setBirthDefectCount(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setHeight(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setWeight(cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30));
        entity.setBmi(cursor.isNull(offset + 31) ? null : cursor.getDouble(offset + 31));
        entity.setSbp(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setDbp(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setLungAbnormCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setLungAbnormDesc(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setHeartAbnormCode(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setHeartAbnormDesc(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setVulvaAbnormCode(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setVulvaAbnormDesc(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setVaginaAbnormCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setVaginaAbnormDesc(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCervixAbnormCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCervixAbnormDesc(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setCorpusuteriAbnormCode(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCorpusuteriAbnormDesc(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setAdnexaAbnormCode(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setAdnexaAbnormDesc(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setHgb(cursor.isNull(offset + 48) ? null : cursor.getDouble(offset + 48));
        entity.setWbc(cursor.isNull(offset + 49) ? null : cursor.getDouble(offset + 49));
        entity.setPlt(cursor.isNull(offset + 50) ? null : cursor.getDouble(offset + 50));
        entity.setCbcOthers(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setProQuanTestValue(cursor.isNull(offset + 52) ? null : cursor.getDouble(offset + 52));
        entity.setProQualResultCode(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setGluQualResultCode(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setGluQuanTestValue(cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55));
        entity.setKetQualResultCode(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setUobTestResultCode(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setUrineRoutineOther(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setAboRhValue(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setAboCode(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setRhCode(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setGlu(cursor.isNull(offset + 62) ? null : cursor.getDouble(offset + 62));
        entity.setSgpt(cursor.isNull(offset + 63) ? null : cursor.getDouble(offset + 63));
        entity.setAst(cursor.isNull(offset + 64) ? null : cursor.getDouble(offset + 64));
        entity.setAlb(cursor.isNull(offset + 65) ? null : cursor.getDouble(offset + 65));
        entity.setTbi(cursor.isNull(offset + 66) ? null : cursor.getDouble(offset + 66));
        entity.setDbil(cursor.isNull(offset + 67) ? null : cursor.getDouble(offset + 67));
        entity.setBun(cursor.isNull(offset + 68) ? null : cursor.getDouble(offset + 68));
        entity.setScr(cursor.isNull(offset + 69) ? null : cursor.getDouble(offset + 69));
        entity.setWvdCleanCode(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setHbeabTestResultCode(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setHbeagTestResultCode(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setHbsabTestResultCode(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setHbsagTestResultCode(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setHbcabTestResultCode(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setStsResultCode(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setHivAntiResultCode(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setBscanResultDesc(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setPregHealthAbnormCode(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setPregHealthAbnormDesc(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setReferralCode(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setRefertoOrgName(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setRefertoDeptName(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setReferralReason(cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84));
        entity.setPreviousVisitDate(cursor.isNull(offset + 85) ? null : new java.util.Date(cursor.getLong(offset + 85)));
        entity.setPreviousVisitPerson(cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86));
        entity.setPreviousVisitTypeCode(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setNextFollowupDate(cursor.isNull(offset + 88) ? null : new java.util.Date(cursor.getLong(offset + 88)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setFollowupDoctorName(cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90));
        entity.setIsCancel(cursor.isNull(offset + 91) ? null : cursor.getInt(offset + 91));
        entity.setCreateOrgId(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
        entity.setOrgName(cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93));
        entity.setCreatorId(cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94));
        entity.setCreator(cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95));
        entity.setCreateTime(cursor.isNull(offset + 96) ? null : new java.util.Date(cursor.getLong(offset + 96)));
        entity.setModifiedOrgId(cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97));
        entity.setModifiedOrgName(cursor.isNull(offset + 98) ? null : cursor.getString(offset + 98));
        entity.setModifierId(cursor.isNull(offset + 99) ? null : cursor.getString(offset + 99));
        entity.setModifier(cursor.isNull(offset + 100) ? null : cursor.getString(offset + 100));
        entity.setModifiedTime(cursor.isNull(offset + 101) ? null : new java.util.Date(cursor.getLong(offset + 101)));
        entity.setExamOthers(cursor.isNull(offset + 102) ? null : cursor.getString(offset + 102));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalFirstFollowup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalFirstFollowup entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
