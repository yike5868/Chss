package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.old.ElderExamLedger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ELDER_EXAM_LEDGER".
*/
public class ElderExamLedgerDao extends AbstractDao<ElderExamLedger, Void> {

    public static final String TABLENAME = "ELDER_EXAM_LEDGER";

    /**
     * Properties of entity ElderExamLedger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ElderExamLedgerId = new Property(0, String.class, "elderExamLedgerId", false, "ELDER_EXAM_LEDGER_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property HealthExamId = new Property(2, String.class, "healthExamId", false, "HEALTH_EXAM_ID");
        public final static Property PersonInfoNo = new Property(3, String.class, "personInfoNo", false, "PERSON_INFO_NO");
        public final static Property Year = new Property(4, Integer.class, "year", false, "YEAR");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property IdNo = new Property(6, String.class, "idNo", false, "ID_NO");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property SexValue = new Property(8, String.class, "sexValue", false, "SEX_VALUE");
        public final static Property TelNo = new Property(9, String.class, "telNo", false, "TEL_NO");
        public final static Property AboCode = new Property(10, String.class, "aboCode", false, "ABO_CODE");
        public final static Property EducationCode = new Property(11, String.class, "educationCode", false, "EDUCATION_CODE");
        public final static Property MarriageCode = new Property(12, String.class, "marriageCode", false, "MARRIAGE_CODE");
        public final static Property ExamDate = new Property(13, java.util.Date.class, "examDate", false, "EXAM_DATE");
        public final static Property Smoking = new Property(14, String.class, "smoking", false, "SMOKING");
        public final static Property Drink = new Property(15, String.class, "drink", false, "DRINK");
        public final static Property Teeth = new Property(16, String.class, "teeth", false, "TEETH");
        public final static Property Exercise = new Property(17, String.class, "exercise", false, "EXERCISE");
        public final static Property HyperDrugs = new Property(18, String.class, "hyperDrugs", false, "HYPER_DRUGS");
        public final static Property DiabetesDrugs = new Property(19, String.class, "diabetesDrugs", false, "DIABETES_DRUGS");
        public final static Property HeartDrugs = new Property(20, String.class, "heartDrugs", false, "HEART_DRUGS");
        public final static Property Medical = new Property(21, String.class, "medical", false, "MEDICAL");
        public final static Property DrugAllergy = new Property(22, String.class, "drugAllergy", false, "DRUG_ALLERGY");
        public final static Property WorkUnit = new Property(23, String.class, "workUnit", false, "WORK_UNIT");
        public final static Property ElderSelfCareAssess = new Property(24, String.class, "elderSelfCareAssess", false, "ELDER_SELF_CARE_ASSESS");
        public final static Property ElderCognition = new Property(25, String.class, "elderCognition", false, "ELDER_COGNITION");
        public final static Property ElderDepression = new Property(26, String.class, "elderDepression", false, "ELDER_DEPRESSION");
        public final static Property IsCancel = new Property(27, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(28, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(29, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(30, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(31, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(32, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(33, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(34, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(35, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(36, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(37, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property Birthday = new Property(38, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Age = new Property(39, Integer.class, "age", false, "AGE");
    };


    public ElderExamLedgerDao(DaoConfig config) {
        super(config);
    }
    
    public ElderExamLedgerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ELDER_EXAM_LEDGER\" (" + //
                "\"ELDER_EXAM_LEDGER_ID\" TEXT," + // 0: elderExamLedgerId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"HEALTH_EXAM_ID\" TEXT," + // 2: healthExamId
                "\"PERSON_INFO_NO\" TEXT," + // 3: personInfoNo
                "\"YEAR\" INTEGER," + // 4: year
                "\"NAME\" TEXT," + // 5: name
                "\"ID_NO\" TEXT," + // 6: idNo
                "\"ADDRESS\" TEXT," + // 7: address
                "\"SEX_VALUE\" TEXT," + // 8: sexValue
                "\"TEL_NO\" TEXT," + // 9: telNo
                "\"ABO_CODE\" TEXT," + // 10: aboCode
                "\"EDUCATION_CODE\" TEXT," + // 11: educationCode
                "\"MARRIAGE_CODE\" TEXT," + // 12: marriageCode
                "\"EXAM_DATE\" INTEGER," + // 13: examDate
                "\"SMOKING\" TEXT," + // 14: smoking
                "\"DRINK\" TEXT," + // 15: drink
                "\"TEETH\" TEXT," + // 16: teeth
                "\"EXERCISE\" TEXT," + // 17: exercise
                "\"HYPER_DRUGS\" TEXT," + // 18: hyperDrugs
                "\"DIABETES_DRUGS\" TEXT," + // 19: diabetesDrugs
                "\"HEART_DRUGS\" TEXT," + // 20: heartDrugs
                "\"MEDICAL\" TEXT," + // 21: medical
                "\"DRUG_ALLERGY\" TEXT," + // 22: drugAllergy
                "\"WORK_UNIT\" TEXT," + // 23: workUnit
                "\"ELDER_SELF_CARE_ASSESS\" TEXT," + // 24: elderSelfCareAssess
                "\"ELDER_COGNITION\" TEXT," + // 25: elderCognition
                "\"ELDER_DEPRESSION\" TEXT," + // 26: elderDepression
                "\"IS_CANCEL\" INTEGER," + // 27: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 28: createOrgId
                "\"ORG_NAME\" TEXT," + // 29: orgName
                "\"CREATOR_ID\" TEXT," + // 30: creatorId
                "\"CREATOR\" TEXT," + // 31: creator
                "\"CREATE_TIME\" INTEGER," + // 32: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 33: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 34: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 35: modifierId
                "\"MODIFIER\" TEXT," + // 36: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 37: modifiedTime
                "\"BIRTHDAY\" INTEGER," + // 38: birthday
                "\"AGE\" INTEGER);"); // 39: age
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ELDER_EXAM_LEDGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ElderExamLedger entity) {
        stmt.clearBindings();
 
        String elderExamLedgerId = entity.getElderExamLedgerId();
        if (elderExamLedgerId != null) {
            stmt.bindString(1, elderExamLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(3, healthExamId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(4, personInfoNo);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(5, year);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(7, idNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(9, sexValue);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(10, telNo);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(11, aboCode);
        }
 
        String educationCode = entity.getEducationCode();
        if (educationCode != null) {
            stmt.bindString(12, educationCode);
        }
 
        String marriageCode = entity.getMarriageCode();
        if (marriageCode != null) {
            stmt.bindString(13, marriageCode);
        }
 
        java.util.Date examDate = entity.getExamDate();
        if (examDate != null) {
            stmt.bindLong(14, examDate.getTime());
        }
 
        String smoking = entity.getSmoking();
        if (smoking != null) {
            stmt.bindString(15, smoking);
        }
 
        String drink = entity.getDrink();
        if (drink != null) {
            stmt.bindString(16, drink);
        }
 
        String teeth = entity.getTeeth();
        if (teeth != null) {
            stmt.bindString(17, teeth);
        }
 
        String exercise = entity.getExercise();
        if (exercise != null) {
            stmt.bindString(18, exercise);
        }
 
        String hyperDrugs = entity.getHyperDrugs();
        if (hyperDrugs != null) {
            stmt.bindString(19, hyperDrugs);
        }
 
        String diabetesDrugs = entity.getDiabetesDrugs();
        if (diabetesDrugs != null) {
            stmt.bindString(20, diabetesDrugs);
        }
 
        String heartDrugs = entity.getHeartDrugs();
        if (heartDrugs != null) {
            stmt.bindString(21, heartDrugs);
        }
 
        String medical = entity.getMedical();
        if (medical != null) {
            stmt.bindString(22, medical);
        }
 
        String drugAllergy = entity.getDrugAllergy();
        if (drugAllergy != null) {
            stmt.bindString(23, drugAllergy);
        }
 
        String workUnit = entity.getWorkUnit();
        if (workUnit != null) {
            stmt.bindString(24, workUnit);
        }
 
        String elderSelfCareAssess = entity.getElderSelfCareAssess();
        if (elderSelfCareAssess != null) {
            stmt.bindString(25, elderSelfCareAssess);
        }
 
        String elderCognition = entity.getElderCognition();
        if (elderCognition != null) {
            stmt.bindString(26, elderCognition);
        }
 
        String elderDepression = entity.getElderDepression();
        if (elderDepression != null) {
            stmt.bindString(27, elderDepression);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(28, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(29, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(31, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(32, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(33, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(34, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(35, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(36, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(37, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(38, modifiedTime.getTime());
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(39, birthday.getTime());
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(40, age);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ElderExamLedger entity) {
        stmt.clearBindings();
 
        String elderExamLedgerId = entity.getElderExamLedgerId();
        if (elderExamLedgerId != null) {
            stmt.bindString(1, elderExamLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String healthExamId = entity.getHealthExamId();
        if (healthExamId != null) {
            stmt.bindString(3, healthExamId);
        }
 
        String personInfoNo = entity.getPersonInfoNo();
        if (personInfoNo != null) {
            stmt.bindString(4, personInfoNo);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(5, year);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(7, idNo);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String sexValue = entity.getSexValue();
        if (sexValue != null) {
            stmt.bindString(9, sexValue);
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(10, telNo);
        }
 
        String aboCode = entity.getAboCode();
        if (aboCode != null) {
            stmt.bindString(11, aboCode);
        }
 
        String educationCode = entity.getEducationCode();
        if (educationCode != null) {
            stmt.bindString(12, educationCode);
        }
 
        String marriageCode = entity.getMarriageCode();
        if (marriageCode != null) {
            stmt.bindString(13, marriageCode);
        }
 
        java.util.Date examDate = entity.getExamDate();
        if (examDate != null) {
            stmt.bindLong(14, examDate.getTime());
        }
 
        String smoking = entity.getSmoking();
        if (smoking != null) {
            stmt.bindString(15, smoking);
        }
 
        String drink = entity.getDrink();
        if (drink != null) {
            stmt.bindString(16, drink);
        }
 
        String teeth = entity.getTeeth();
        if (teeth != null) {
            stmt.bindString(17, teeth);
        }
 
        String exercise = entity.getExercise();
        if (exercise != null) {
            stmt.bindString(18, exercise);
        }
 
        String hyperDrugs = entity.getHyperDrugs();
        if (hyperDrugs != null) {
            stmt.bindString(19, hyperDrugs);
        }
 
        String diabetesDrugs = entity.getDiabetesDrugs();
        if (diabetesDrugs != null) {
            stmt.bindString(20, diabetesDrugs);
        }
 
        String heartDrugs = entity.getHeartDrugs();
        if (heartDrugs != null) {
            stmt.bindString(21, heartDrugs);
        }
 
        String medical = entity.getMedical();
        if (medical != null) {
            stmt.bindString(22, medical);
        }
 
        String drugAllergy = entity.getDrugAllergy();
        if (drugAllergy != null) {
            stmt.bindString(23, drugAllergy);
        }
 
        String workUnit = entity.getWorkUnit();
        if (workUnit != null) {
            stmt.bindString(24, workUnit);
        }
 
        String elderSelfCareAssess = entity.getElderSelfCareAssess();
        if (elderSelfCareAssess != null) {
            stmt.bindString(25, elderSelfCareAssess);
        }
 
        String elderCognition = entity.getElderCognition();
        if (elderCognition != null) {
            stmt.bindString(26, elderCognition);
        }
 
        String elderDepression = entity.getElderDepression();
        if (elderDepression != null) {
            stmt.bindString(27, elderDepression);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(28, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(29, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(30, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(31, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(32, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(33, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(34, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(35, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(36, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(37, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(38, modifiedTime.getTime());
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(39, birthday.getTime());
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(40, age);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ElderExamLedger readEntity(Cursor cursor, int offset) {
        ElderExamLedger entity = new ElderExamLedger( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // elderExamLedgerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // healthExamId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // personInfoNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // idNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sexValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // aboCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // educationCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // marriageCode
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // examDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // smoking
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // drink
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // teeth
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // exercise
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // hyperDrugs
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // diabetesDrugs
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // heartDrugs
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // medical
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // drugAllergy
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // workUnit
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // elderSelfCareAssess
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // elderCognition
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // elderDepression
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // isCancel
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // createOrgId
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // orgName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // creatorId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // creator
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // createTime
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // modifiedOrgId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // modifiedOrgName
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // modifierId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modifier
            cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)), // modifiedTime
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)), // birthday
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39) // age
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ElderExamLedger entity, int offset) {
        entity.setElderExamLedgerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHealthExamId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonInfoNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSexValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAboCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEducationCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMarriageCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExamDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setSmoking(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDrink(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTeeth(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setExercise(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHyperDrugs(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDiabetesDrugs(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHeartDrugs(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMedical(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDrugAllergy(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWorkUnit(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setElderSelfCareAssess(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setElderCognition(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setElderDepression(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsCancel(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setCreateOrgId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setOrgName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCreatorId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCreator(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCreateTime(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setModifiedOrgId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setModifiedOrgName(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setModifierId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModifier(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModifiedTime(cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)));
        entity.setBirthday(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
        entity.setAge(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ElderExamLedger entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ElderExamLedger entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
