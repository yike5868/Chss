package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.vaccine.OrgChoiceVaccine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORG_CHOICE_VACCINE".
*/
public class OrgChoiceVaccineDao extends AbstractDao<OrgChoiceVaccine, Void> {

    public static final String TABLENAME = "ORG_CHOICE_VACCINE";

    /**
     * Properties of entity OrgChoiceVaccine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrgChoiceVaccineId = new Property(0, String.class, "orgChoiceVaccineId", false, "ORG_CHOICE_VACCINE_ID");
        public final static Property VaccineId = new Property(1, String.class, "vaccineId", false, "VACCINE_ID");
        public final static Property OrgId = new Property(2, String.class, "orgId", false, "ORG_ID");
    };


    public OrgChoiceVaccineDao(DaoConfig config) {
        super(config);
    }
    
    public OrgChoiceVaccineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORG_CHOICE_VACCINE\" (" + //
                "\"ORG_CHOICE_VACCINE_ID\" TEXT," + // 0: orgChoiceVaccineId
                "\"VACCINE_ID\" TEXT," + // 1: vaccineId
                "\"ORG_ID\" TEXT);"); // 2: orgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORG_CHOICE_VACCINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrgChoiceVaccine entity) {
        stmt.clearBindings();
 
        String orgChoiceVaccineId = entity.getOrgChoiceVaccineId();
        if (orgChoiceVaccineId != null) {
            stmt.bindString(1, orgChoiceVaccineId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(3, orgId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrgChoiceVaccine entity) {
        stmt.clearBindings();
 
        String orgChoiceVaccineId = entity.getOrgChoiceVaccineId();
        if (orgChoiceVaccineId != null) {
            stmt.bindString(1, orgChoiceVaccineId);
        }
 
        String vaccineId = entity.getVaccineId();
        if (vaccineId != null) {
            stmt.bindString(2, vaccineId);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(3, orgId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public OrgChoiceVaccine readEntity(Cursor cursor, int offset) {
        OrgChoiceVaccine entity = new OrgChoiceVaccine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orgChoiceVaccineId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vaccineId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // orgId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrgChoiceVaccine entity, int offset) {
        entity.setOrgChoiceVaccineId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVaccineId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(OrgChoiceVaccine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(OrgChoiceVaccine entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
