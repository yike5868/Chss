package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.Doctor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCTOR".
*/
public class DoctorDao extends AbstractDao<Doctor, Void> {

    public static final String TABLENAME = "DOCTOR";

    /**
     * Properties of entity Doctor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Emp_id = new Property(0, String.class, "emp_id", false, "EMP_ID");
        public final static Property Emp_name = new Property(1, String.class, "emp_name", false, "EMP_NAME");
        public final static Property Is_gw = new Property(2, String.class, "is_gw", false, "IS_GW");
    };


    public DoctorDao(DaoConfig config) {
        super(config);
    }
    
    public DoctorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCTOR\" (" + //
                "\"EMP_ID\" TEXT," + // 0: emp_id
                "\"EMP_NAME\" TEXT," + // 1: emp_name
                "\"IS_GW\" TEXT);"); // 2: is_gw
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Doctor entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String is_gw = entity.getIs_gw();
        if (is_gw != null) {
            stmt.bindString(3, is_gw);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Doctor entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String is_gw = entity.getIs_gw();
        if (is_gw != null) {
            stmt.bindString(3, is_gw);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Doctor readEntity(Cursor cursor, int offset) {
        Doctor entity = new Doctor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // emp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emp_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // is_gw
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Doctor entity, int offset) {
        entity.setEmp_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmp_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_gw(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Doctor entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Doctor entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
