package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.person.PersonDeath;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_DEATH".
*/
public class PersonDeathDao extends AbstractDao<PersonDeath, Void> {

    public static final String TABLENAME = "PERSON_DEATH";

    /**
     * Properties of entity PersonDeath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonDeathId = new Property(0, String.class, "personDeathId", false, "PERSON_DEATH_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property DeathDate = new Property(2, java.util.Date.class, "deathDate", false, "DEATH_DATE");
        public final static Property DeathAddress = new Property(3, String.class, "deathAddress", false, "DEATH_ADDRESS");
        public final static Property DeathReason = new Property(4, String.class, "deathReason", false, "DEATH_REASON");
        public final static Property ReportMan = new Property(5, String.class, "reportMan", false, "REPORT_MAN");
        public final static Property ReportContact = new Property(6, String.class, "reportContact", false, "REPORT_CONTACT");
        public final static Property IsCancel = new Property(7, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(8, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(9, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(10, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(11, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(12, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(13, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(14, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(15, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(16, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(17, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public PersonDeathDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDeathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_DEATH\" (" + //
                "\"PERSON_DEATH_ID\" TEXT," + // 0: personDeathId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"DEATH_DATE\" INTEGER," + // 2: deathDate
                "\"DEATH_ADDRESS\" TEXT," + // 3: deathAddress
                "\"DEATH_REASON\" TEXT," + // 4: deathReason
                "\"REPORT_MAN\" TEXT," + // 5: reportMan
                "\"REPORT_CONTACT\" TEXT," + // 6: reportContact
                "\"IS_CANCEL\" INTEGER," + // 7: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 8: createOrgId
                "\"ORG_NAME\" TEXT," + // 9: orgName
                "\"CREATOR_ID\" TEXT," + // 10: creatorId
                "\"CREATOR\" TEXT," + // 11: creator
                "\"CREATE_TIME\" INTEGER," + // 12: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 13: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 14: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 15: modifierId
                "\"MODIFIER\" TEXT," + // 16: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 17: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_DEATH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonDeath entity) {
        stmt.clearBindings();
 
        String personDeathId = entity.getPersonDeathId();
        if (personDeathId != null) {
            stmt.bindString(1, personDeathId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(3, deathDate.getTime());
        }
 
        String deathAddress = entity.getDeathAddress();
        if (deathAddress != null) {
            stmt.bindString(4, deathAddress);
        }
 
        String deathReason = entity.getDeathReason();
        if (deathReason != null) {
            stmt.bindString(5, deathReason);
        }
 
        String reportMan = entity.getReportMan();
        if (reportMan != null) {
            stmt.bindString(6, reportMan);
        }
 
        String reportContact = entity.getReportContact();
        if (reportContact != null) {
            stmt.bindString(7, reportContact);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(8, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(9, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(11, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(12, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(13, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(14, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(15, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(16, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(17, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(18, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonDeath entity) {
        stmt.clearBindings();
 
        String personDeathId = entity.getPersonDeathId();
        if (personDeathId != null) {
            stmt.bindString(1, personDeathId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        java.util.Date deathDate = entity.getDeathDate();
        if (deathDate != null) {
            stmt.bindLong(3, deathDate.getTime());
        }
 
        String deathAddress = entity.getDeathAddress();
        if (deathAddress != null) {
            stmt.bindString(4, deathAddress);
        }
 
        String deathReason = entity.getDeathReason();
        if (deathReason != null) {
            stmt.bindString(5, deathReason);
        }
 
        String reportMan = entity.getReportMan();
        if (reportMan != null) {
            stmt.bindString(6, reportMan);
        }
 
        String reportContact = entity.getReportContact();
        if (reportContact != null) {
            stmt.bindString(7, reportContact);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(8, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(9, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(11, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(12, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(13, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(14, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(15, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(16, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(17, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(18, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonDeath readEntity(Cursor cursor, int offset) {
        PersonDeath entity = new PersonDeath( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // personDeathId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // deathDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deathAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deathReason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reportMan
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reportContact
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isCancel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createOrgId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orgName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // creatorId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // creator
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // createTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // modifiedOrgId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // modifiedOrgName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modifierId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modifier
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonDeath entity, int offset) {
        entity.setPersonDeathId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeathDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDeathAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeathReason(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReportMan(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReportContact(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCancel(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateOrgId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrgName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatorId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreator(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setModifiedOrgId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setModifiedOrgName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModifierId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifier(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setModifiedTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonDeath entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonDeath entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
