package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.districts.Room;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROOM".
*/
public class RoomDao extends AbstractDao<Room, Void> {

    public static final String TABLENAME = "ROOM";

    /**
     * Properties of entity Room.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BuildingUnitNo = new Property(0, String.class, "buildingUnitNo", false, "BUILDING_UNIT_NO");
        public final static Property BuildingId = new Property(1, String.class, "buildingId", false, "BUILDING_ID");
        public final static Property RoomNumberNo = new Property(2, String.class, "roomNumberNo", false, "ROOM_NUMBER_NO");
        public final static Property RoomNumberId = new Property(3, String.class, "roomNumberId", false, "ROOM_NUMBER_ID");
        public final static Property FloorNum = new Property(4, String.class, "floorNum", false, "FLOOR_NUM");
    };


    public RoomDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROOM\" (" + //
                "\"BUILDING_UNIT_NO\" TEXT," + // 0: buildingUnitNo
                "\"BUILDING_ID\" TEXT," + // 1: buildingId
                "\"ROOM_NUMBER_NO\" TEXT," + // 2: roomNumberNo
                "\"ROOM_NUMBER_ID\" TEXT," + // 3: roomNumberId
                "\"FLOOR_NUM\" TEXT);"); // 4: floorNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Room entity) {
        stmt.clearBindings();
 
        String buildingUnitNo = entity.getBuildingUnitNo();
        if (buildingUnitNo != null) {
            stmt.bindString(1, buildingUnitNo);
        }
 
        String buildingId = entity.getBuildingId();
        if (buildingId != null) {
            stmt.bindString(2, buildingId);
        }
 
        String roomNumberNo = entity.getRoomNumberNo();
        if (roomNumberNo != null) {
            stmt.bindString(3, roomNumberNo);
        }
 
        String roomNumberId = entity.getRoomNumberId();
        if (roomNumberId != null) {
            stmt.bindString(4, roomNumberId);
        }
 
        String floorNum = entity.getFloorNum();
        if (floorNum != null) {
            stmt.bindString(5, floorNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Room entity) {
        stmt.clearBindings();
 
        String buildingUnitNo = entity.getBuildingUnitNo();
        if (buildingUnitNo != null) {
            stmt.bindString(1, buildingUnitNo);
        }
 
        String buildingId = entity.getBuildingId();
        if (buildingId != null) {
            stmt.bindString(2, buildingId);
        }
 
        String roomNumberNo = entity.getRoomNumberNo();
        if (roomNumberNo != null) {
            stmt.bindString(3, roomNumberNo);
        }
 
        String roomNumberId = entity.getRoomNumberId();
        if (roomNumberId != null) {
            stmt.bindString(4, roomNumberId);
        }
 
        String floorNum = entity.getFloorNum();
        if (floorNum != null) {
            stmt.bindString(5, floorNum);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Room readEntity(Cursor cursor, int offset) {
        Room entity = new Room( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // buildingUnitNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buildingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roomNumberNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roomNumberId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // floorNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Room entity, int offset) {
        entity.setBuildingUnitNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBuildingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomNumberNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoomNumberId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFloorNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Room entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Room entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
