package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildHealthExam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_HEALTH_EXAM".
*/
public class ChildHealthExamDao extends AbstractDao<ChildHealthExam, Void> {

    public static final String TABLENAME = "CHILD_HEALTH_EXAM";

    /**
     * Properties of entity ChildHealthExam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildHealthExamId = new Property(0, String.class, "childHealthExamId", false, "CHILD_HEALTH_EXAM_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ChildHealthExamFormNo = new Property(2, String.class, "childHealthExamFormNo", false, "CHILD_HEALTH_EXAM_FORM_NO");
        public final static Property AgeCode = new Property(3, String.class, "ageCode", false, "AGE_CODE");
        public final static Property VisitType = new Property(4, Integer.class, "visitType", false, "VISIT_TYPE");
        public final static Property NewbornName = new Property(5, String.class, "newbornName", false, "NEWBORN_NAME");
        public final static Property Height = new Property(6, Double.class, "height", false, "HEIGHT");
        public final static Property HeightEvalCode = new Property(7, String.class, "heightEvalCode", false, "HEIGHT_EVAL_CODE");
        public final static Property Weight = new Property(8, Double.class, "weight", false, "WEIGHT");
        public final static Property WeightEvalCode = new Property(9, String.class, "weightEvalCode", false, "WEIGHT_EVAL_CODE");
        public final static Property WeightDivHeight = new Property(10, Double.class, "weightDivHeight", false, "WEIGHT_DIV_HEIGHT");
        public final static Property WeightDivHeightEvalCode = new Property(11, String.class, "weightDivHeightEvalCode", false, "WEIGHT_DIV_HEIGHT_EVAL_CODE");
        public final static Property PhysicalDevelopEvalCode = new Property(12, String.class, "physicalDevelopEvalCode", false, "PHYSICAL_DEVELOP_EVAL_CODE");
        public final static Property HeadCircumference = new Property(13, Double.class, "headCircumference", false, "HEAD_CIRCUMFERENCE");
        public final static Property ChildComplexionCode = new Property(14, String.class, "childComplexionCode", false, "CHILD_COMPLEXION_CODE");
        public final static Property ChildComplexionValue = new Property(15, String.class, "childComplexionValue", false, "CHILD_COMPLEXION_VALUE");
        public final static Property SkinAbnormCode = new Property(16, String.class, "skinAbnormCode", false, "SKIN_ABNORM_CODE");
        public final static Property SkinAbnormValue = new Property(17, String.class, "skinAbnormValue", false, "SKIN_ABNORM_VALUE");
        public final static Property BregmaCloseCode = new Property(18, String.class, "bregmaCloseCode", false, "BREGMA_CLOSE_CODE");
        public final static Property BregmaHorizDiameter = new Property(19, Double.class, "bregmaHorizDiameter", false, "BREGMA_HORIZ_DIAMETER");
        public final static Property BregmaVertDiameter = new Property(20, Double.class, "bregmaVertDiameter", false, "BREGMA_VERT_DIAMETER");
        public final static Property NeckMassCode = new Property(21, String.class, "neckMassCode", false, "NECK_MASS_CODE");
        public final static Property EyeAbnormCode = new Property(22, String.class, "eyeAbnormCode", false, "EYE_ABNORM_CODE");
        public final static Property EyeAbnormValue = new Property(23, String.class, "eyeAbnormValue", false, "EYE_ABNORM_VALUE");
        public final static Property LeftOriginalEyesight = new Property(24, String.class, "leftOriginalEyesight", false, "LEFT_ORIGINAL_EYESIGHT");
        public final static Property RightOriginalEyesight = new Property(25, Double.class, "rightOriginalEyesight", false, "RIGHT_ORIGINAL_EYESIGHT");
        public final static Property LeftCorrectEyesight = new Property(26, Double.class, "leftCorrectEyesight", false, "LEFT_CORRECT_EYESIGHT");
        public final static Property RightCorrectEyesight = new Property(27, Double.class, "rightCorrectEyesight", false, "RIGHT_CORRECT_EYESIGHT");
        public final static Property EarAbnormCode = new Property(28, String.class, "earAbnormCode", false, "EAR_ABNORM_CODE");
        public final static Property EarAbnormValue = new Property(29, String.class, "earAbnormValue", false, "EAR_ABNORM_VALUE");
        public final static Property HearingScreenResultCode = new Property(30, String.class, "hearingScreenResultCode", false, "HEARING_SCREEN_RESULT_CODE");
        public final static Property OralAbnormCode = new Property(31, String.class, "oralAbnormCode", false, "ORAL_ABNORM_CODE");
        public final static Property OralAbnormValue = new Property(32, String.class, "oralAbnormValue", false, "ORAL_ABNORM_VALUE");
        public final static Property TeethCount = new Property(33, Integer.class, "teethCount", false, "TEETH_COUNT");
        public final static Property CariesCount = new Property(34, Integer.class, "cariesCount", false, "CARIES_COUNT");
        public final static Property LungAbnormCode = new Property(35, String.class, "lungAbnormCode", false, "LUNG_ABNORM_CODE");
        public final static Property LungAbnormValue = new Property(36, String.class, "lungAbnormValue", false, "LUNG_ABNORM_VALUE");
        public final static Property HeartAbnormCode = new Property(37, String.class, "heartAbnormCode", false, "HEART_ABNORM_CODE");
        public final static Property HeartAbnormValue = new Property(38, String.class, "heartAbnormValue", false, "HEART_ABNORM_VALUE");
        public final static Property AbdomenAbnormCode = new Property(39, String.class, "abdomenAbnormCode", false, "ABDOMEN_ABNORM_CODE");
        public final static Property AbdomenAbnormValue = new Property(40, String.class, "abdomenAbnormValue", false, "ABDOMEN_ABNORM_VALUE");
        public final static Property UmbcordFallCode = new Property(41, String.class, "umbcordFallCode", false, "UMBCORD_FALL_CODE");
        public final static Property UmbcordFallValue = new Property(42, String.class, "umbcordFallValue", false, "UMBCORD_FALL_VALUE");
        public final static Property UmbCordResultCode = new Property(43, String.class, "umbCordResultCode", false, "UMB_CORD_RESULT_CODE");
        public final static Property UmbHerniaCode = new Property(44, String.class, "umbHerniaCode", false, "UMB_HERNIA_CODE");
        public final static Property LimbsAbnormCode = new Property(45, String.class, "limbsAbnormCode", false, "LIMBS_ABNORM_CODE");
        public final static Property LimbsAbnormValue = new Property(46, String.class, "limbsAbnormValue", false, "LIMBS_ABNORM_VALUE");
        public final static Property GaitAbnormCode = new Property(47, String.class, "gaitAbnormCode", false, "GAIT_ABNORM_CODE");
        public final static Property GaitAbnormValue = new Property(48, String.class, "gaitAbnormValue", false, "GAIT_ABNORM_VALUE");
        public final static Property RicketsSymptomCode = new Property(49, String.class, "ricketsSymptomCode", false, "RICKETS_SYMPTOM_CODE");
        public final static Property RicketsSignCode = new Property(50, String.class, "ricketsSignCode", false, "RICKETS_SIGN_CODE");
        public final static Property AnusAbnormCode = new Property(51, String.class, "anusAbnormCode", false, "ANUS_ABNORM_CODE");
        public final static Property AnusAbnormValue = new Property(52, String.class, "anusAbnormValue", false, "ANUS_ABNORM_VALUE");
        public final static Property GenitaliaAbnormCode = new Property(53, String.class, "genitaliaAbnormCode", false, "GENITALIA_ABNORM_CODE");
        public final static Property GenitaliaAbnormValue = new Property(54, String.class, "genitaliaAbnormValue", false, "GENITALIA_ABNORM_VALUE");
        public final static Property Hgb = new Property(55, Double.class, "hgb", false, "HGB");
        public final static Property OthersHealthExam = new Property(56, String.class, "othersHealthExam", false, "OTHERS_HEALTH_EXAM");
        public final static Property OutdoorActHours = new Property(57, Double.class, "outdoorActHours", false, "OUTDOOR_ACT_HOURS");
        public final static Property VitamindName = new Property(58, String.class, "vitamindName", false, "VITAMIND_NAME");
        public final static Property VitamindDose = new Property(59, Integer.class, "vitamindDose", false, "VITAMIND_DOSE");
        public final static Property DevelopPassCode = new Property(60, String.class, "developPassCode", false, "DEVELOP_PASS_CODE");
        public final static Property SickVisitCode = new Property(61, String.class, "sickVisitCode", false, "SICK_VISIT_CODE");
        public final static Property PneumVisitTimes = new Property(62, Integer.class, "pneumVisitTimes", false, "PNEUM_VISIT_TIMES");
        public final static Property DiarrheaVisitTimes = new Property(63, Integer.class, "diarrheaVisitTimes", false, "DIARRHEA_VISIT_TIMES");
        public final static Property TraumaVisitTimes = new Property(64, Integer.class, "traumaVisitTimes", false, "TRAUMA_VISIT_TIMES");
        public final static Property OthersVisitDesc = new Property(65, String.class, "othersVisitDesc", false, "OTHERS_VISIT_DESC");
        public final static Property ReferralCode = new Property(66, String.class, "referralCode", false, "REFERRAL_CODE");
        public final static Property ReferralReason = new Property(67, String.class, "referralReason", false, "REFERRAL_REASON");
        public final static Property RefertoOrgName = new Property(68, String.class, "refertoOrgName", false, "REFERTO_ORG_NAME");
        public final static Property RefertoDeptName = new Property(69, String.class, "refertoDeptName", false, "REFERTO_DEPT_NAME");
        public final static Property FollowupVisitDate = new Property(70, java.util.Date.class, "followupVisitDate", false, "FOLLOWUP_VISIT_DATE");
        public final static Property FollowupDoctorId = new Property(71, String.class, "followupDoctorId", false, "FOLLOWUP_DOCTOR_ID");
        public final static Property FollowupVisitDoctorName = new Property(72, String.class, "followupVisitDoctorName", false, "FOLLOWUP_VISIT_DOCTOR_NAME");
        public final static Property NextFollowupDate = new Property(73, java.util.Date.class, "nextFollowupDate", false, "NEXT_FOLLOWUP_DATE");
        public final static Property IsCancel = new Property(74, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(75, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(76, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(77, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(78, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(79, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(80, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(81, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(82, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(83, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(84, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildHealthExamDao(DaoConfig config) {
        super(config);
    }
    
    public ChildHealthExamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_HEALTH_EXAM\" (" + //
                "\"CHILD_HEALTH_EXAM_ID\" TEXT," + // 0: childHealthExamId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CHILD_HEALTH_EXAM_FORM_NO\" TEXT," + // 2: childHealthExamFormNo
                "\"AGE_CODE\" TEXT," + // 3: ageCode
                "\"VISIT_TYPE\" INTEGER," + // 4: visitType
                "\"NEWBORN_NAME\" TEXT," + // 5: newbornName
                "\"HEIGHT\" REAL," + // 6: height
                "\"HEIGHT_EVAL_CODE\" TEXT," + // 7: heightEvalCode
                "\"WEIGHT\" REAL," + // 8: weight
                "\"WEIGHT_EVAL_CODE\" TEXT," + // 9: weightEvalCode
                "\"WEIGHT_DIV_HEIGHT\" REAL," + // 10: weightDivHeight
                "\"WEIGHT_DIV_HEIGHT_EVAL_CODE\" TEXT," + // 11: weightDivHeightEvalCode
                "\"PHYSICAL_DEVELOP_EVAL_CODE\" TEXT," + // 12: physicalDevelopEvalCode
                "\"HEAD_CIRCUMFERENCE\" REAL," + // 13: headCircumference
                "\"CHILD_COMPLEXION_CODE\" TEXT," + // 14: childComplexionCode
                "\"CHILD_COMPLEXION_VALUE\" TEXT," + // 15: childComplexionValue
                "\"SKIN_ABNORM_CODE\" TEXT," + // 16: skinAbnormCode
                "\"SKIN_ABNORM_VALUE\" TEXT," + // 17: skinAbnormValue
                "\"BREGMA_CLOSE_CODE\" TEXT," + // 18: bregmaCloseCode
                "\"BREGMA_HORIZ_DIAMETER\" REAL," + // 19: bregmaHorizDiameter
                "\"BREGMA_VERT_DIAMETER\" REAL," + // 20: bregmaVertDiameter
                "\"NECK_MASS_CODE\" TEXT," + // 21: neckMassCode
                "\"EYE_ABNORM_CODE\" TEXT," + // 22: eyeAbnormCode
                "\"EYE_ABNORM_VALUE\" TEXT," + // 23: eyeAbnormValue
                "\"LEFT_ORIGINAL_EYESIGHT\" TEXT," + // 24: leftOriginalEyesight
                "\"RIGHT_ORIGINAL_EYESIGHT\" REAL," + // 25: rightOriginalEyesight
                "\"LEFT_CORRECT_EYESIGHT\" REAL," + // 26: leftCorrectEyesight
                "\"RIGHT_CORRECT_EYESIGHT\" REAL," + // 27: rightCorrectEyesight
                "\"EAR_ABNORM_CODE\" TEXT," + // 28: earAbnormCode
                "\"EAR_ABNORM_VALUE\" TEXT," + // 29: earAbnormValue
                "\"HEARING_SCREEN_RESULT_CODE\" TEXT," + // 30: hearingScreenResultCode
                "\"ORAL_ABNORM_CODE\" TEXT," + // 31: oralAbnormCode
                "\"ORAL_ABNORM_VALUE\" TEXT," + // 32: oralAbnormValue
                "\"TEETH_COUNT\" INTEGER," + // 33: teethCount
                "\"CARIES_COUNT\" INTEGER," + // 34: cariesCount
                "\"LUNG_ABNORM_CODE\" TEXT," + // 35: lungAbnormCode
                "\"LUNG_ABNORM_VALUE\" TEXT," + // 36: lungAbnormValue
                "\"HEART_ABNORM_CODE\" TEXT," + // 37: heartAbnormCode
                "\"HEART_ABNORM_VALUE\" TEXT," + // 38: heartAbnormValue
                "\"ABDOMEN_ABNORM_CODE\" TEXT," + // 39: abdomenAbnormCode
                "\"ABDOMEN_ABNORM_VALUE\" TEXT," + // 40: abdomenAbnormValue
                "\"UMBCORD_FALL_CODE\" TEXT," + // 41: umbcordFallCode
                "\"UMBCORD_FALL_VALUE\" TEXT," + // 42: umbcordFallValue
                "\"UMB_CORD_RESULT_CODE\" TEXT," + // 43: umbCordResultCode
                "\"UMB_HERNIA_CODE\" TEXT," + // 44: umbHerniaCode
                "\"LIMBS_ABNORM_CODE\" TEXT," + // 45: limbsAbnormCode
                "\"LIMBS_ABNORM_VALUE\" TEXT," + // 46: limbsAbnormValue
                "\"GAIT_ABNORM_CODE\" TEXT," + // 47: gaitAbnormCode
                "\"GAIT_ABNORM_VALUE\" TEXT," + // 48: gaitAbnormValue
                "\"RICKETS_SYMPTOM_CODE\" TEXT," + // 49: ricketsSymptomCode
                "\"RICKETS_SIGN_CODE\" TEXT," + // 50: ricketsSignCode
                "\"ANUS_ABNORM_CODE\" TEXT," + // 51: anusAbnormCode
                "\"ANUS_ABNORM_VALUE\" TEXT," + // 52: anusAbnormValue
                "\"GENITALIA_ABNORM_CODE\" TEXT," + // 53: genitaliaAbnormCode
                "\"GENITALIA_ABNORM_VALUE\" TEXT," + // 54: genitaliaAbnormValue
                "\"HGB\" REAL," + // 55: hgb
                "\"OTHERS_HEALTH_EXAM\" TEXT," + // 56: othersHealthExam
                "\"OUTDOOR_ACT_HOURS\" REAL," + // 57: outdoorActHours
                "\"VITAMIND_NAME\" TEXT," + // 58: vitamindName
                "\"VITAMIND_DOSE\" INTEGER," + // 59: vitamindDose
                "\"DEVELOP_PASS_CODE\" TEXT," + // 60: developPassCode
                "\"SICK_VISIT_CODE\" TEXT," + // 61: sickVisitCode
                "\"PNEUM_VISIT_TIMES\" INTEGER," + // 62: pneumVisitTimes
                "\"DIARRHEA_VISIT_TIMES\" INTEGER," + // 63: diarrheaVisitTimes
                "\"TRAUMA_VISIT_TIMES\" INTEGER," + // 64: traumaVisitTimes
                "\"OTHERS_VISIT_DESC\" TEXT," + // 65: othersVisitDesc
                "\"REFERRAL_CODE\" TEXT," + // 66: referralCode
                "\"REFERRAL_REASON\" TEXT," + // 67: referralReason
                "\"REFERTO_ORG_NAME\" TEXT," + // 68: refertoOrgName
                "\"REFERTO_DEPT_NAME\" TEXT," + // 69: refertoDeptName
                "\"FOLLOWUP_VISIT_DATE\" INTEGER," + // 70: followupVisitDate
                "\"FOLLOWUP_DOCTOR_ID\" TEXT," + // 71: followupDoctorId
                "\"FOLLOWUP_VISIT_DOCTOR_NAME\" TEXT," + // 72: followupVisitDoctorName
                "\"NEXT_FOLLOWUP_DATE\" INTEGER," + // 73: nextFollowupDate
                "\"IS_CANCEL\" INTEGER," + // 74: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 75: createOrgId
                "\"ORG_NAME\" TEXT," + // 76: orgName
                "\"CREATOR_ID\" TEXT," + // 77: creatorId
                "\"CREATOR\" TEXT," + // 78: creator
                "\"CREATE_TIME\" INTEGER," + // 79: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 80: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 81: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 82: modifierId
                "\"MODIFIER\" TEXT," + // 83: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 84: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_HEALTH_EXAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildHealthExam entity) {
        stmt.clearBindings();
 
        String childHealthExamId = entity.getChildHealthExamId();
        if (childHealthExamId != null) {
            stmt.bindString(1, childHealthExamId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childHealthExamFormNo = entity.getChildHealthExamFormNo();
        if (childHealthExamFormNo != null) {
            stmt.bindString(3, childHealthExamFormNo);
        }
 
        String ageCode = entity.getAgeCode();
        if (ageCode != null) {
            stmt.bindString(4, ageCode);
        }
 
        Integer visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindLong(5, visitType);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(6, newbornName);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(7, height);
        }
 
        String heightEvalCode = entity.getHeightEvalCode();
        if (heightEvalCode != null) {
            stmt.bindString(8, heightEvalCode);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(9, weight);
        }
 
        String weightEvalCode = entity.getWeightEvalCode();
        if (weightEvalCode != null) {
            stmt.bindString(10, weightEvalCode);
        }
 
        Double weightDivHeight = entity.getWeightDivHeight();
        if (weightDivHeight != null) {
            stmt.bindDouble(11, weightDivHeight);
        }
 
        String weightDivHeightEvalCode = entity.getWeightDivHeightEvalCode();
        if (weightDivHeightEvalCode != null) {
            stmt.bindString(12, weightDivHeightEvalCode);
        }
 
        String physicalDevelopEvalCode = entity.getPhysicalDevelopEvalCode();
        if (physicalDevelopEvalCode != null) {
            stmt.bindString(13, physicalDevelopEvalCode);
        }
 
        Double headCircumference = entity.getHeadCircumference();
        if (headCircumference != null) {
            stmt.bindDouble(14, headCircumference);
        }
 
        String childComplexionCode = entity.getChildComplexionCode();
        if (childComplexionCode != null) {
            stmt.bindString(15, childComplexionCode);
        }
 
        String childComplexionValue = entity.getChildComplexionValue();
        if (childComplexionValue != null) {
            stmt.bindString(16, childComplexionValue);
        }
 
        String skinAbnormCode = entity.getSkinAbnormCode();
        if (skinAbnormCode != null) {
            stmt.bindString(17, skinAbnormCode);
        }
 
        String skinAbnormValue = entity.getSkinAbnormValue();
        if (skinAbnormValue != null) {
            stmt.bindString(18, skinAbnormValue);
        }
 
        String bregmaCloseCode = entity.getBregmaCloseCode();
        if (bregmaCloseCode != null) {
            stmt.bindString(19, bregmaCloseCode);
        }
 
        Double bregmaHorizDiameter = entity.getBregmaHorizDiameter();
        if (bregmaHorizDiameter != null) {
            stmt.bindDouble(20, bregmaHorizDiameter);
        }
 
        Double bregmaVertDiameter = entity.getBregmaVertDiameter();
        if (bregmaVertDiameter != null) {
            stmt.bindDouble(21, bregmaVertDiameter);
        }
 
        String neckMassCode = entity.getNeckMassCode();
        if (neckMassCode != null) {
            stmt.bindString(22, neckMassCode);
        }
 
        String eyeAbnormCode = entity.getEyeAbnormCode();
        if (eyeAbnormCode != null) {
            stmt.bindString(23, eyeAbnormCode);
        }
 
        String eyeAbnormValue = entity.getEyeAbnormValue();
        if (eyeAbnormValue != null) {
            stmt.bindString(24, eyeAbnormValue);
        }
 
        String leftOriginalEyesight = entity.getLeftOriginalEyesight();
        if (leftOriginalEyesight != null) {
            stmt.bindString(25, leftOriginalEyesight);
        }
 
        Double rightOriginalEyesight = entity.getRightOriginalEyesight();
        if (rightOriginalEyesight != null) {
            stmt.bindDouble(26, rightOriginalEyesight);
        }
 
        Double leftCorrectEyesight = entity.getLeftCorrectEyesight();
        if (leftCorrectEyesight != null) {
            stmt.bindDouble(27, leftCorrectEyesight);
        }
 
        Double rightCorrectEyesight = entity.getRightCorrectEyesight();
        if (rightCorrectEyesight != null) {
            stmt.bindDouble(28, rightCorrectEyesight);
        }
 
        String earAbnormCode = entity.getEarAbnormCode();
        if (earAbnormCode != null) {
            stmt.bindString(29, earAbnormCode);
        }
 
        String earAbnormValue = entity.getEarAbnormValue();
        if (earAbnormValue != null) {
            stmt.bindString(30, earAbnormValue);
        }
 
        String hearingScreenResultCode = entity.getHearingScreenResultCode();
        if (hearingScreenResultCode != null) {
            stmt.bindString(31, hearingScreenResultCode);
        }
 
        String oralAbnormCode = entity.getOralAbnormCode();
        if (oralAbnormCode != null) {
            stmt.bindString(32, oralAbnormCode);
        }
 
        String oralAbnormValue = entity.getOralAbnormValue();
        if (oralAbnormValue != null) {
            stmt.bindString(33, oralAbnormValue);
        }
 
        Integer teethCount = entity.getTeethCount();
        if (teethCount != null) {
            stmt.bindLong(34, teethCount);
        }
 
        Integer cariesCount = entity.getCariesCount();
        if (cariesCount != null) {
            stmt.bindLong(35, cariesCount);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(36, lungAbnormCode);
        }
 
        String lungAbnormValue = entity.getLungAbnormValue();
        if (lungAbnormValue != null) {
            stmt.bindString(37, lungAbnormValue);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(38, heartAbnormCode);
        }
 
        String heartAbnormValue = entity.getHeartAbnormValue();
        if (heartAbnormValue != null) {
            stmt.bindString(39, heartAbnormValue);
        }
 
        String abdomenAbnormCode = entity.getAbdomenAbnormCode();
        if (abdomenAbnormCode != null) {
            stmt.bindString(40, abdomenAbnormCode);
        }
 
        String abdomenAbnormValue = entity.getAbdomenAbnormValue();
        if (abdomenAbnormValue != null) {
            stmt.bindString(41, abdomenAbnormValue);
        }
 
        String umbcordFallCode = entity.getUmbcordFallCode();
        if (umbcordFallCode != null) {
            stmt.bindString(42, umbcordFallCode);
        }
 
        String umbcordFallValue = entity.getUmbcordFallValue();
        if (umbcordFallValue != null) {
            stmt.bindString(43, umbcordFallValue);
        }
 
        String umbCordResultCode = entity.getUmbCordResultCode();
        if (umbCordResultCode != null) {
            stmt.bindString(44, umbCordResultCode);
        }
 
        String umbHerniaCode = entity.getUmbHerniaCode();
        if (umbHerniaCode != null) {
            stmt.bindString(45, umbHerniaCode);
        }
 
        String limbsAbnormCode = entity.getLimbsAbnormCode();
        if (limbsAbnormCode != null) {
            stmt.bindString(46, limbsAbnormCode);
        }
 
        String limbsAbnormValue = entity.getLimbsAbnormValue();
        if (limbsAbnormValue != null) {
            stmt.bindString(47, limbsAbnormValue);
        }
 
        String gaitAbnormCode = entity.getGaitAbnormCode();
        if (gaitAbnormCode != null) {
            stmt.bindString(48, gaitAbnormCode);
        }
 
        String gaitAbnormValue = entity.getGaitAbnormValue();
        if (gaitAbnormValue != null) {
            stmt.bindString(49, gaitAbnormValue);
        }
 
        String ricketsSymptomCode = entity.getRicketsSymptomCode();
        if (ricketsSymptomCode != null) {
            stmt.bindString(50, ricketsSymptomCode);
        }
 
        String ricketsSignCode = entity.getRicketsSignCode();
        if (ricketsSignCode != null) {
            stmt.bindString(51, ricketsSignCode);
        }
 
        String anusAbnormCode = entity.getAnusAbnormCode();
        if (anusAbnormCode != null) {
            stmt.bindString(52, anusAbnormCode);
        }
 
        String anusAbnormValue = entity.getAnusAbnormValue();
        if (anusAbnormValue != null) {
            stmt.bindString(53, anusAbnormValue);
        }
 
        String genitaliaAbnormCode = entity.getGenitaliaAbnormCode();
        if (genitaliaAbnormCode != null) {
            stmt.bindString(54, genitaliaAbnormCode);
        }
 
        String genitaliaAbnormValue = entity.getGenitaliaAbnormValue();
        if (genitaliaAbnormValue != null) {
            stmt.bindString(55, genitaliaAbnormValue);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(56, hgb);
        }
 
        String othersHealthExam = entity.getOthersHealthExam();
        if (othersHealthExam != null) {
            stmt.bindString(57, othersHealthExam);
        }
 
        Double outdoorActHours = entity.getOutdoorActHours();
        if (outdoorActHours != null) {
            stmt.bindDouble(58, outdoorActHours);
        }
 
        String vitamindName = entity.getVitamindName();
        if (vitamindName != null) {
            stmt.bindString(59, vitamindName);
        }
 
        Integer vitamindDose = entity.getVitamindDose();
        if (vitamindDose != null) {
            stmt.bindLong(60, vitamindDose);
        }
 
        String developPassCode = entity.getDevelopPassCode();
        if (developPassCode != null) {
            stmt.bindString(61, developPassCode);
        }
 
        String sickVisitCode = entity.getSickVisitCode();
        if (sickVisitCode != null) {
            stmt.bindString(62, sickVisitCode);
        }
 
        Integer pneumVisitTimes = entity.getPneumVisitTimes();
        if (pneumVisitTimes != null) {
            stmt.bindLong(63, pneumVisitTimes);
        }
 
        Integer diarrheaVisitTimes = entity.getDiarrheaVisitTimes();
        if (diarrheaVisitTimes != null) {
            stmt.bindLong(64, diarrheaVisitTimes);
        }
 
        Integer traumaVisitTimes = entity.getTraumaVisitTimes();
        if (traumaVisitTimes != null) {
            stmt.bindLong(65, traumaVisitTimes);
        }
 
        String othersVisitDesc = entity.getOthersVisitDesc();
        if (othersVisitDesc != null) {
            stmt.bindString(66, othersVisitDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(67, referralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(68, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(69, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(70, refertoDeptName);
        }
 
        java.util.Date followupVisitDate = entity.getFollowupVisitDate();
        if (followupVisitDate != null) {
            stmt.bindLong(71, followupVisitDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(72, followupDoctorId);
        }
 
        String followupVisitDoctorName = entity.getFollowupVisitDoctorName();
        if (followupVisitDoctorName != null) {
            stmt.bindString(73, followupVisitDoctorName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(74, nextFollowupDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(75, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(76, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(77, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(78, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(79, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(80, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(81, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(82, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(83, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(84, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(85, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildHealthExam entity) {
        stmt.clearBindings();
 
        String childHealthExamId = entity.getChildHealthExamId();
        if (childHealthExamId != null) {
            stmt.bindString(1, childHealthExamId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childHealthExamFormNo = entity.getChildHealthExamFormNo();
        if (childHealthExamFormNo != null) {
            stmt.bindString(3, childHealthExamFormNo);
        }
 
        String ageCode = entity.getAgeCode();
        if (ageCode != null) {
            stmt.bindString(4, ageCode);
        }
 
        Integer visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindLong(5, visitType);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(6, newbornName);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(7, height);
        }
 
        String heightEvalCode = entity.getHeightEvalCode();
        if (heightEvalCode != null) {
            stmt.bindString(8, heightEvalCode);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(9, weight);
        }
 
        String weightEvalCode = entity.getWeightEvalCode();
        if (weightEvalCode != null) {
            stmt.bindString(10, weightEvalCode);
        }
 
        Double weightDivHeight = entity.getWeightDivHeight();
        if (weightDivHeight != null) {
            stmt.bindDouble(11, weightDivHeight);
        }
 
        String weightDivHeightEvalCode = entity.getWeightDivHeightEvalCode();
        if (weightDivHeightEvalCode != null) {
            stmt.bindString(12, weightDivHeightEvalCode);
        }
 
        String physicalDevelopEvalCode = entity.getPhysicalDevelopEvalCode();
        if (physicalDevelopEvalCode != null) {
            stmt.bindString(13, physicalDevelopEvalCode);
        }
 
        Double headCircumference = entity.getHeadCircumference();
        if (headCircumference != null) {
            stmt.bindDouble(14, headCircumference);
        }
 
        String childComplexionCode = entity.getChildComplexionCode();
        if (childComplexionCode != null) {
            stmt.bindString(15, childComplexionCode);
        }
 
        String childComplexionValue = entity.getChildComplexionValue();
        if (childComplexionValue != null) {
            stmt.bindString(16, childComplexionValue);
        }
 
        String skinAbnormCode = entity.getSkinAbnormCode();
        if (skinAbnormCode != null) {
            stmt.bindString(17, skinAbnormCode);
        }
 
        String skinAbnormValue = entity.getSkinAbnormValue();
        if (skinAbnormValue != null) {
            stmt.bindString(18, skinAbnormValue);
        }
 
        String bregmaCloseCode = entity.getBregmaCloseCode();
        if (bregmaCloseCode != null) {
            stmt.bindString(19, bregmaCloseCode);
        }
 
        Double bregmaHorizDiameter = entity.getBregmaHorizDiameter();
        if (bregmaHorizDiameter != null) {
            stmt.bindDouble(20, bregmaHorizDiameter);
        }
 
        Double bregmaVertDiameter = entity.getBregmaVertDiameter();
        if (bregmaVertDiameter != null) {
            stmt.bindDouble(21, bregmaVertDiameter);
        }
 
        String neckMassCode = entity.getNeckMassCode();
        if (neckMassCode != null) {
            stmt.bindString(22, neckMassCode);
        }
 
        String eyeAbnormCode = entity.getEyeAbnormCode();
        if (eyeAbnormCode != null) {
            stmt.bindString(23, eyeAbnormCode);
        }
 
        String eyeAbnormValue = entity.getEyeAbnormValue();
        if (eyeAbnormValue != null) {
            stmt.bindString(24, eyeAbnormValue);
        }
 
        String leftOriginalEyesight = entity.getLeftOriginalEyesight();
        if (leftOriginalEyesight != null) {
            stmt.bindString(25, leftOriginalEyesight);
        }
 
        Double rightOriginalEyesight = entity.getRightOriginalEyesight();
        if (rightOriginalEyesight != null) {
            stmt.bindDouble(26, rightOriginalEyesight);
        }
 
        Double leftCorrectEyesight = entity.getLeftCorrectEyesight();
        if (leftCorrectEyesight != null) {
            stmt.bindDouble(27, leftCorrectEyesight);
        }
 
        Double rightCorrectEyesight = entity.getRightCorrectEyesight();
        if (rightCorrectEyesight != null) {
            stmt.bindDouble(28, rightCorrectEyesight);
        }
 
        String earAbnormCode = entity.getEarAbnormCode();
        if (earAbnormCode != null) {
            stmt.bindString(29, earAbnormCode);
        }
 
        String earAbnormValue = entity.getEarAbnormValue();
        if (earAbnormValue != null) {
            stmt.bindString(30, earAbnormValue);
        }
 
        String hearingScreenResultCode = entity.getHearingScreenResultCode();
        if (hearingScreenResultCode != null) {
            stmt.bindString(31, hearingScreenResultCode);
        }
 
        String oralAbnormCode = entity.getOralAbnormCode();
        if (oralAbnormCode != null) {
            stmt.bindString(32, oralAbnormCode);
        }
 
        String oralAbnormValue = entity.getOralAbnormValue();
        if (oralAbnormValue != null) {
            stmt.bindString(33, oralAbnormValue);
        }
 
        Integer teethCount = entity.getTeethCount();
        if (teethCount != null) {
            stmt.bindLong(34, teethCount);
        }
 
        Integer cariesCount = entity.getCariesCount();
        if (cariesCount != null) {
            stmt.bindLong(35, cariesCount);
        }
 
        String lungAbnormCode = entity.getLungAbnormCode();
        if (lungAbnormCode != null) {
            stmt.bindString(36, lungAbnormCode);
        }
 
        String lungAbnormValue = entity.getLungAbnormValue();
        if (lungAbnormValue != null) {
            stmt.bindString(37, lungAbnormValue);
        }
 
        String heartAbnormCode = entity.getHeartAbnormCode();
        if (heartAbnormCode != null) {
            stmt.bindString(38, heartAbnormCode);
        }
 
        String heartAbnormValue = entity.getHeartAbnormValue();
        if (heartAbnormValue != null) {
            stmt.bindString(39, heartAbnormValue);
        }
 
        String abdomenAbnormCode = entity.getAbdomenAbnormCode();
        if (abdomenAbnormCode != null) {
            stmt.bindString(40, abdomenAbnormCode);
        }
 
        String abdomenAbnormValue = entity.getAbdomenAbnormValue();
        if (abdomenAbnormValue != null) {
            stmt.bindString(41, abdomenAbnormValue);
        }
 
        String umbcordFallCode = entity.getUmbcordFallCode();
        if (umbcordFallCode != null) {
            stmt.bindString(42, umbcordFallCode);
        }
 
        String umbcordFallValue = entity.getUmbcordFallValue();
        if (umbcordFallValue != null) {
            stmt.bindString(43, umbcordFallValue);
        }
 
        String umbCordResultCode = entity.getUmbCordResultCode();
        if (umbCordResultCode != null) {
            stmt.bindString(44, umbCordResultCode);
        }
 
        String umbHerniaCode = entity.getUmbHerniaCode();
        if (umbHerniaCode != null) {
            stmt.bindString(45, umbHerniaCode);
        }
 
        String limbsAbnormCode = entity.getLimbsAbnormCode();
        if (limbsAbnormCode != null) {
            stmt.bindString(46, limbsAbnormCode);
        }
 
        String limbsAbnormValue = entity.getLimbsAbnormValue();
        if (limbsAbnormValue != null) {
            stmt.bindString(47, limbsAbnormValue);
        }
 
        String gaitAbnormCode = entity.getGaitAbnormCode();
        if (gaitAbnormCode != null) {
            stmt.bindString(48, gaitAbnormCode);
        }
 
        String gaitAbnormValue = entity.getGaitAbnormValue();
        if (gaitAbnormValue != null) {
            stmt.bindString(49, gaitAbnormValue);
        }
 
        String ricketsSymptomCode = entity.getRicketsSymptomCode();
        if (ricketsSymptomCode != null) {
            stmt.bindString(50, ricketsSymptomCode);
        }
 
        String ricketsSignCode = entity.getRicketsSignCode();
        if (ricketsSignCode != null) {
            stmt.bindString(51, ricketsSignCode);
        }
 
        String anusAbnormCode = entity.getAnusAbnormCode();
        if (anusAbnormCode != null) {
            stmt.bindString(52, anusAbnormCode);
        }
 
        String anusAbnormValue = entity.getAnusAbnormValue();
        if (anusAbnormValue != null) {
            stmt.bindString(53, anusAbnormValue);
        }
 
        String genitaliaAbnormCode = entity.getGenitaliaAbnormCode();
        if (genitaliaAbnormCode != null) {
            stmt.bindString(54, genitaliaAbnormCode);
        }
 
        String genitaliaAbnormValue = entity.getGenitaliaAbnormValue();
        if (genitaliaAbnormValue != null) {
            stmt.bindString(55, genitaliaAbnormValue);
        }
 
        Double hgb = entity.getHgb();
        if (hgb != null) {
            stmt.bindDouble(56, hgb);
        }
 
        String othersHealthExam = entity.getOthersHealthExam();
        if (othersHealthExam != null) {
            stmt.bindString(57, othersHealthExam);
        }
 
        Double outdoorActHours = entity.getOutdoorActHours();
        if (outdoorActHours != null) {
            stmt.bindDouble(58, outdoorActHours);
        }
 
        String vitamindName = entity.getVitamindName();
        if (vitamindName != null) {
            stmt.bindString(59, vitamindName);
        }
 
        Integer vitamindDose = entity.getVitamindDose();
        if (vitamindDose != null) {
            stmt.bindLong(60, vitamindDose);
        }
 
        String developPassCode = entity.getDevelopPassCode();
        if (developPassCode != null) {
            stmt.bindString(61, developPassCode);
        }
 
        String sickVisitCode = entity.getSickVisitCode();
        if (sickVisitCode != null) {
            stmt.bindString(62, sickVisitCode);
        }
 
        Integer pneumVisitTimes = entity.getPneumVisitTimes();
        if (pneumVisitTimes != null) {
            stmt.bindLong(63, pneumVisitTimes);
        }
 
        Integer diarrheaVisitTimes = entity.getDiarrheaVisitTimes();
        if (diarrheaVisitTimes != null) {
            stmt.bindLong(64, diarrheaVisitTimes);
        }
 
        Integer traumaVisitTimes = entity.getTraumaVisitTimes();
        if (traumaVisitTimes != null) {
            stmt.bindLong(65, traumaVisitTimes);
        }
 
        String othersVisitDesc = entity.getOthersVisitDesc();
        if (othersVisitDesc != null) {
            stmt.bindString(66, othersVisitDesc);
        }
 
        String referralCode = entity.getReferralCode();
        if (referralCode != null) {
            stmt.bindString(67, referralCode);
        }
 
        String referralReason = entity.getReferralReason();
        if (referralReason != null) {
            stmt.bindString(68, referralReason);
        }
 
        String refertoOrgName = entity.getRefertoOrgName();
        if (refertoOrgName != null) {
            stmt.bindString(69, refertoOrgName);
        }
 
        String refertoDeptName = entity.getRefertoDeptName();
        if (refertoDeptName != null) {
            stmt.bindString(70, refertoDeptName);
        }
 
        java.util.Date followupVisitDate = entity.getFollowupVisitDate();
        if (followupVisitDate != null) {
            stmt.bindLong(71, followupVisitDate.getTime());
        }
 
        String followupDoctorId = entity.getFollowupDoctorId();
        if (followupDoctorId != null) {
            stmt.bindString(72, followupDoctorId);
        }
 
        String followupVisitDoctorName = entity.getFollowupVisitDoctorName();
        if (followupVisitDoctorName != null) {
            stmt.bindString(73, followupVisitDoctorName);
        }
 
        java.util.Date nextFollowupDate = entity.getNextFollowupDate();
        if (nextFollowupDate != null) {
            stmt.bindLong(74, nextFollowupDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(75, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(76, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(77, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(78, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(79, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(80, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(81, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(82, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(83, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(84, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(85, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildHealthExam readEntity(Cursor cursor, int offset) {
        ChildHealthExam entity = new ChildHealthExam( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childHealthExamId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childHealthExamFormNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ageCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // visitType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // newbornName
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // height
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // heightEvalCode
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // weight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // weightEvalCode
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // weightDivHeight
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // weightDivHeightEvalCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // physicalDevelopEvalCode
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // headCircumference
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // childComplexionCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // childComplexionValue
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // skinAbnormCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // skinAbnormValue
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bregmaCloseCode
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // bregmaHorizDiameter
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // bregmaVertDiameter
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // neckMassCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // eyeAbnormCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // eyeAbnormValue
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // leftOriginalEyesight
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // rightOriginalEyesight
            cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26), // leftCorrectEyesight
            cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27), // rightCorrectEyesight
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // earAbnormCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // earAbnormValue
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // hearingScreenResultCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // oralAbnormCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // oralAbnormValue
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // teethCount
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // cariesCount
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // lungAbnormCode
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // lungAbnormValue
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // heartAbnormCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // heartAbnormValue
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // abdomenAbnormCode
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // abdomenAbnormValue
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // umbcordFallCode
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // umbcordFallValue
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // umbCordResultCode
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // umbHerniaCode
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // limbsAbnormCode
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // limbsAbnormValue
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // gaitAbnormCode
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // gaitAbnormValue
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // ricketsSymptomCode
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // ricketsSignCode
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // anusAbnormCode
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // anusAbnormValue
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // genitaliaAbnormCode
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // genitaliaAbnormValue
            cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55), // hgb
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // othersHealthExam
            cursor.isNull(offset + 57) ? null : cursor.getDouble(offset + 57), // outdoorActHours
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // vitamindName
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // vitamindDose
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // developPassCode
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // sickVisitCode
            cursor.isNull(offset + 62) ? null : cursor.getInt(offset + 62), // pneumVisitTimes
            cursor.isNull(offset + 63) ? null : cursor.getInt(offset + 63), // diarrheaVisitTimes
            cursor.isNull(offset + 64) ? null : cursor.getInt(offset + 64), // traumaVisitTimes
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // othersVisitDesc
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // referralCode
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // referralReason
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // refertoOrgName
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // refertoDeptName
            cursor.isNull(offset + 70) ? null : new java.util.Date(cursor.getLong(offset + 70)), // followupVisitDate
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // followupDoctorId
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // followupVisitDoctorName
            cursor.isNull(offset + 73) ? null : new java.util.Date(cursor.getLong(offset + 73)), // nextFollowupDate
            cursor.isNull(offset + 74) ? null : cursor.getInt(offset + 74), // isCancel
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // createOrgId
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // orgName
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // creatorId
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // creator
            cursor.isNull(offset + 79) ? null : new java.util.Date(cursor.getLong(offset + 79)), // createTime
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // modifiedOrgId
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // modifiedOrgName
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // modifierId
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // modifier
            cursor.isNull(offset + 84) ? null : new java.util.Date(cursor.getLong(offset + 84)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildHealthExam entity, int offset) {
        entity.setChildHealthExamId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildHealthExamFormNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgeCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisitType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNewbornName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setHeightEvalCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeight(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setWeightEvalCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeightDivHeight(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setWeightDivHeightEvalCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhysicalDevelopEvalCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeadCircumference(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setChildComplexionCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChildComplexionValue(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSkinAbnormCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSkinAbnormValue(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBregmaCloseCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBregmaHorizDiameter(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setBregmaVertDiameter(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setNeckMassCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setEyeAbnormCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setEyeAbnormValue(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLeftOriginalEyesight(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRightOriginalEyesight(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setLeftCorrectEyesight(cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26));
        entity.setRightCorrectEyesight(cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27));
        entity.setEarAbnormCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setEarAbnormValue(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHearingScreenResultCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setOralAbnormCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setOralAbnormValue(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setTeethCount(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setCariesCount(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setLungAbnormCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setLungAbnormValue(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setHeartAbnormCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setHeartAbnormValue(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setAbdomenAbnormCode(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setAbdomenAbnormValue(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setUmbcordFallCode(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setUmbcordFallValue(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setUmbCordResultCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setUmbHerniaCode(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setLimbsAbnormCode(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setLimbsAbnormValue(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setGaitAbnormCode(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setGaitAbnormValue(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setRicketsSymptomCode(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setRicketsSignCode(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setAnusAbnormCode(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setAnusAbnormValue(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setGenitaliaAbnormCode(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setGenitaliaAbnormValue(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setHgb(cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55));
        entity.setOthersHealthExam(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setOutdoorActHours(cursor.isNull(offset + 57) ? null : cursor.getDouble(offset + 57));
        entity.setVitamindName(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setVitamindDose(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setDevelopPassCode(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setSickVisitCode(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setPneumVisitTimes(cursor.isNull(offset + 62) ? null : cursor.getInt(offset + 62));
        entity.setDiarrheaVisitTimes(cursor.isNull(offset + 63) ? null : cursor.getInt(offset + 63));
        entity.setTraumaVisitTimes(cursor.isNull(offset + 64) ? null : cursor.getInt(offset + 64));
        entity.setOthersVisitDesc(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setReferralCode(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setReferralReason(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setRefertoOrgName(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setRefertoDeptName(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setFollowupVisitDate(cursor.isNull(offset + 70) ? null : new java.util.Date(cursor.getLong(offset + 70)));
        entity.setFollowupDoctorId(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setFollowupVisitDoctorName(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setNextFollowupDate(cursor.isNull(offset + 73) ? null : new java.util.Date(cursor.getLong(offset + 73)));
        entity.setIsCancel(cursor.isNull(offset + 74) ? null : cursor.getInt(offset + 74));
        entity.setCreateOrgId(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setOrgName(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setCreatorId(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setCreator(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setCreateTime(cursor.isNull(offset + 79) ? null : new java.util.Date(cursor.getLong(offset + 79)));
        entity.setModifiedOrgId(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setModifiedOrgName(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setModifierId(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setModifier(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setModifiedTime(cursor.isNull(offset + 84) ? null : new java.util.Date(cursor.getLong(offset + 84)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildHealthExam entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildHealthExam entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
