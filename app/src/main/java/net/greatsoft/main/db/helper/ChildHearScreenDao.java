package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildHearScreen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_HEAR_SCREEN".
*/
public class ChildHearScreenDao extends AbstractDao<ChildHearScreen, Void> {

    public static final String TABLENAME = "CHILD_HEAR_SCREEN";

    /**
     * Properties of entity ChildHearScreen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildHearScreenId = new Property(0, String.class, "childHearScreenId", false, "CHILD_HEAR_SCREEN_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ChildHearScreenNo = new Property(2, String.class, "childHearScreenNo", false, "CHILD_HEAR_SCREEN_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SexCode = new Property(4, String.class, "sexCode", false, "SEX_CODE");
        public final static Property BirthDate = new Property(5, java.util.Date.class, "birthDate", false, "BIRTH_DATE");
        public final static Property TelNo = new Property(6, String.class, "telNo", false, "TEL_NO");
        public final static Property HouseholdAddress = new Property(7, String.class, "householdAddress", false, "HOUSEHOLD_ADDRESS");
        public final static Property PresentAddress = new Property(8, String.class, "presentAddress", false, "PRESENT_ADDRESS");
        public final static Property ScreenMethodCode = new Property(9, String.class, "screenMethodCode", false, "SCREEN_METHOD_CODE");
        public final static Property ScreenAddressCode = new Property(10, String.class, "screenAddressCode", false, "SCREEN_ADDRESS_CODE");
        public final static Property ScreenDate = new Property(11, java.util.Date.class, "screenDate", false, "SCREEN_DATE");
        public final static Property ScreenDoctor = new Property(12, String.class, "screenDoctor", false, "SCREEN_DOCTOR");
        public final static Property IsCancel = new Property(13, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(14, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(15, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(16, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(17, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(18, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(19, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(20, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(21, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(22, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(23, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildHearScreenDao(DaoConfig config) {
        super(config);
    }
    
    public ChildHearScreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_HEAR_SCREEN\" (" + //
                "\"CHILD_HEAR_SCREEN_ID\" TEXT," + // 0: childHearScreenId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"CHILD_HEAR_SCREEN_NO\" TEXT," + // 2: childHearScreenNo
                "\"NAME\" TEXT," + // 3: name
                "\"SEX_CODE\" TEXT," + // 4: sexCode
                "\"BIRTH_DATE\" INTEGER," + // 5: birthDate
                "\"TEL_NO\" TEXT," + // 6: telNo
                "\"HOUSEHOLD_ADDRESS\" TEXT," + // 7: householdAddress
                "\"PRESENT_ADDRESS\" TEXT," + // 8: presentAddress
                "\"SCREEN_METHOD_CODE\" TEXT," + // 9: screenMethodCode
                "\"SCREEN_ADDRESS_CODE\" TEXT," + // 10: screenAddressCode
                "\"SCREEN_DATE\" INTEGER," + // 11: screenDate
                "\"SCREEN_DOCTOR\" TEXT," + // 12: screenDoctor
                "\"IS_CANCEL\" INTEGER," + // 13: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 14: createOrgId
                "\"ORG_NAME\" TEXT," + // 15: orgName
                "\"CREATOR_ID\" TEXT," + // 16: creatorId
                "\"CREATOR\" TEXT," + // 17: creator
                "\"CREATE_TIME\" INTEGER," + // 18: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 19: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 20: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 21: modifierId
                "\"MODIFIER\" TEXT," + // 22: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 23: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_HEAR_SCREEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildHearScreen entity) {
        stmt.clearBindings();
 
        String childHearScreenId = entity.getChildHearScreenId();
        if (childHearScreenId != null) {
            stmt.bindString(1, childHearScreenId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childHearScreenNo = entity.getChildHearScreenNo();
        if (childHearScreenNo != null) {
            stmt.bindString(3, childHearScreenNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        java.util.Date birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindLong(6, birthDate.getTime());
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(7, telNo);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(8, householdAddress);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(9, presentAddress);
        }
 
        String screenMethodCode = entity.getScreenMethodCode();
        if (screenMethodCode != null) {
            stmt.bindString(10, screenMethodCode);
        }
 
        String screenAddressCode = entity.getScreenAddressCode();
        if (screenAddressCode != null) {
            stmt.bindString(11, screenAddressCode);
        }
 
        java.util.Date screenDate = entity.getScreenDate();
        if (screenDate != null) {
            stmt.bindLong(12, screenDate.getTime());
        }
 
        String screenDoctor = entity.getScreenDoctor();
        if (screenDoctor != null) {
            stmt.bindString(13, screenDoctor);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(14, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(15, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(16, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(17, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(18, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(19, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(20, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(21, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(22, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(23, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(24, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildHearScreen entity) {
        stmt.clearBindings();
 
        String childHearScreenId = entity.getChildHearScreenId();
        if (childHearScreenId != null) {
            stmt.bindString(1, childHearScreenId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String childHearScreenNo = entity.getChildHearScreenNo();
        if (childHearScreenNo != null) {
            stmt.bindString(3, childHearScreenNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sexCode = entity.getSexCode();
        if (sexCode != null) {
            stmt.bindString(5, sexCode);
        }
 
        java.util.Date birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindLong(6, birthDate.getTime());
        }
 
        String telNo = entity.getTelNo();
        if (telNo != null) {
            stmt.bindString(7, telNo);
        }
 
        String householdAddress = entity.getHouseholdAddress();
        if (householdAddress != null) {
            stmt.bindString(8, householdAddress);
        }
 
        String presentAddress = entity.getPresentAddress();
        if (presentAddress != null) {
            stmt.bindString(9, presentAddress);
        }
 
        String screenMethodCode = entity.getScreenMethodCode();
        if (screenMethodCode != null) {
            stmt.bindString(10, screenMethodCode);
        }
 
        String screenAddressCode = entity.getScreenAddressCode();
        if (screenAddressCode != null) {
            stmt.bindString(11, screenAddressCode);
        }
 
        java.util.Date screenDate = entity.getScreenDate();
        if (screenDate != null) {
            stmt.bindLong(12, screenDate.getTime());
        }
 
        String screenDoctor = entity.getScreenDoctor();
        if (screenDoctor != null) {
            stmt.bindString(13, screenDoctor);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(14, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(15, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(16, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(17, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(18, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(19, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(20, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(21, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(22, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(23, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(24, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildHearScreen readEntity(Cursor cursor, int offset) {
        ChildHearScreen entity = new ChildHearScreen( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childHearScreenId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childHearScreenNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexCode
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // birthDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // householdAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // presentAddress
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // screenMethodCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // screenAddressCode
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // screenDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // screenDoctor
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isCancel
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createOrgId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // orgName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // creatorId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // creator
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // createTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // modifiedOrgId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // modifiedOrgName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // modifierId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // modifier
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildHearScreen entity, int offset) {
        entity.setChildHearScreenId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildHearScreenNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSexCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTelNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHouseholdAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPresentAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScreenMethodCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScreenAddressCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScreenDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setScreenDoctor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsCancel(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCreateOrgId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrgName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreatorId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreator(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreateTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setModifiedOrgId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setModifiedOrgName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setModifierId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModifier(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setModifiedTime(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildHearScreen entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildHearScreen entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
