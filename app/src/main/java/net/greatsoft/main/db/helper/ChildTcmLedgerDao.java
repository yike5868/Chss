package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.child.ChildTcmLedger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_TCM_LEDGER".
*/
public class ChildTcmLedgerDao extends AbstractDao<ChildTcmLedger, Void> {

    public static final String TABLENAME = "CHILD_TCM_LEDGER";

    /**
     * Properties of entity ChildTcmLedger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChildTcmLedgerId = new Property(0, String.class, "childTcmLedgerId", false, "CHILD_TCM_LEDGER_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property NewbornName = new Property(2, String.class, "newbornName", false, "NEWBORN_NAME");
        public final static Property NewbornSexCode = new Property(3, String.class, "newbornSexCode", false, "NEWBORN_SEX_CODE");
        public final static Property NewbornSexValue = new Property(4, String.class, "newbornSexValue", false, "NEWBORN_SEX_VALUE");
        public final static Property NewbornBirthDate = new Property(5, java.util.Date.class, "newbornBirthDate", false, "NEWBORN_BIRTH_DATE");
        public final static Property NewbornNation = new Property(6, String.class, "newbornNation", false, "NEWBORN_NATION");
        public final static Property PresentAddrProvince = new Property(7, String.class, "presentAddrProvince", false, "PRESENT_ADDR_PROVINCE");
        public final static Property FatherId = new Property(8, String.class, "fatherId", false, "FATHER_ID");
        public final static Property FatherName = new Property(9, String.class, "fatherName", false, "FATHER_NAME");
        public final static Property FatherIdno = new Property(10, String.class, "fatherIdno", false, "FATHER_IDNO");
        public final static Property FatherOccupCode = new Property(11, String.class, "fatherOccupCode", false, "FATHER_OCCUP_CODE");
        public final static Property FatherTelNo = new Property(12, String.class, "fatherTelNo", false, "FATHER_TEL_NO");
        public final static Property FatherBirthDate = new Property(13, java.util.Date.class, "fatherBirthDate", false, "FATHER_BIRTH_DATE");
        public final static Property MotherId = new Property(14, String.class, "motherId", false, "MOTHER_ID");
        public final static Property MotherName = new Property(15, String.class, "motherName", false, "MOTHER_NAME");
        public final static Property MotherIdno = new Property(16, String.class, "motherIdno", false, "MOTHER_IDNO");
        public final static Property MotherOccupCode = new Property(17, String.class, "motherOccupCode", false, "MOTHER_OCCUP_CODE");
        public final static Property MotherTelNo = new Property(18, String.class, "motherTelNo", false, "MOTHER_TEL_NO");
        public final static Property MotherBirthDate = new Property(19, java.util.Date.class, "motherBirthDate", false, "MOTHER_BIRTH_DATE");
        public final static Property Household = new Property(20, String.class, "household", false, "HOUSEHOLD");
        public final static Property MonthOfAge = new Property(21, Integer.class, "monthOfAge", false, "MONTH_OF_AGE");
        public final static Property VisitDate = new Property(22, java.util.Date.class, "visitDate", false, "VISIT_DATE");
        public final static Property ChildTcmOne = new Property(23, String.class, "childTcmOne", false, "CHILD_TCM_ONE");
        public final static Property ChildTcmTwo = new Property(24, String.class, "childTcmTwo", false, "CHILD_TCM_TWO");
        public final static Property ChildTcmThree = new Property(25, String.class, "childTcmThree", false, "CHILD_TCM_THREE");
        public final static Property ChildTcmFour = new Property(26, String.class, "childTcmFour", false, "CHILD_TCM_FOUR");
        public final static Property ChildTcmFive = new Property(27, String.class, "childTcmFive", false, "CHILD_TCM_FIVE");
        public final static Property ChildTcmOther = new Property(28, String.class, "childTcmOther", false, "CHILD_TCM_OTHER");
        public final static Property IsCancel = new Property(29, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(30, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(31, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(32, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(33, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(34, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(35, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(36, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(37, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(38, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(39, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public ChildTcmLedgerDao(DaoConfig config) {
        super(config);
    }
    
    public ChildTcmLedgerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_TCM_LEDGER\" (" + //
                "\"CHILD_TCM_LEDGER_ID\" TEXT," + // 0: childTcmLedgerId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"NEWBORN_NAME\" TEXT," + // 2: newbornName
                "\"NEWBORN_SEX_CODE\" TEXT," + // 3: newbornSexCode
                "\"NEWBORN_SEX_VALUE\" TEXT," + // 4: newbornSexValue
                "\"NEWBORN_BIRTH_DATE\" INTEGER," + // 5: newbornBirthDate
                "\"NEWBORN_NATION\" TEXT," + // 6: newbornNation
                "\"PRESENT_ADDR_PROVINCE\" TEXT," + // 7: presentAddrProvince
                "\"FATHER_ID\" TEXT," + // 8: fatherId
                "\"FATHER_NAME\" TEXT," + // 9: fatherName
                "\"FATHER_IDNO\" TEXT," + // 10: fatherIdno
                "\"FATHER_OCCUP_CODE\" TEXT," + // 11: fatherOccupCode
                "\"FATHER_TEL_NO\" TEXT," + // 12: fatherTelNo
                "\"FATHER_BIRTH_DATE\" INTEGER," + // 13: fatherBirthDate
                "\"MOTHER_ID\" TEXT," + // 14: motherId
                "\"MOTHER_NAME\" TEXT," + // 15: motherName
                "\"MOTHER_IDNO\" TEXT," + // 16: motherIdno
                "\"MOTHER_OCCUP_CODE\" TEXT," + // 17: motherOccupCode
                "\"MOTHER_TEL_NO\" TEXT," + // 18: motherTelNo
                "\"MOTHER_BIRTH_DATE\" INTEGER," + // 19: motherBirthDate
                "\"HOUSEHOLD\" TEXT," + // 20: household
                "\"MONTH_OF_AGE\" INTEGER," + // 21: monthOfAge
                "\"VISIT_DATE\" INTEGER," + // 22: visitDate
                "\"CHILD_TCM_ONE\" TEXT," + // 23: childTcmOne
                "\"CHILD_TCM_TWO\" TEXT," + // 24: childTcmTwo
                "\"CHILD_TCM_THREE\" TEXT," + // 25: childTcmThree
                "\"CHILD_TCM_FOUR\" TEXT," + // 26: childTcmFour
                "\"CHILD_TCM_FIVE\" TEXT," + // 27: childTcmFive
                "\"CHILD_TCM_OTHER\" TEXT," + // 28: childTcmOther
                "\"IS_CANCEL\" INTEGER," + // 29: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 30: createOrgId
                "\"ORG_NAME\" TEXT," + // 31: orgName
                "\"CREATOR_ID\" TEXT," + // 32: creatorId
                "\"CREATOR\" TEXT," + // 33: creator
                "\"CREATE_TIME\" INTEGER," + // 34: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 35: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 36: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 37: modifierId
                "\"MODIFIER\" TEXT," + // 38: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 39: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_TCM_LEDGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildTcmLedger entity) {
        stmt.clearBindings();
 
        String childTcmLedgerId = entity.getChildTcmLedgerId();
        if (childTcmLedgerId != null) {
            stmt.bindString(1, childTcmLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(3, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(4, newbornSexCode);
        }
 
        String newbornSexValue = entity.getNewbornSexValue();
        if (newbornSexValue != null) {
            stmt.bindString(5, newbornSexValue);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(6, newbornBirthDate.getTime());
        }
 
        String newbornNation = entity.getNewbornNation();
        if (newbornNation != null) {
            stmt.bindString(7, newbornNation);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(8, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(9, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(10, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(11, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(12, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(13, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(14, fatherBirthDate.getTime());
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(15, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(16, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(17, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(18, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(19, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(20, motherBirthDate.getTime());
        }
 
        String household = entity.getHousehold();
        if (household != null) {
            stmt.bindString(21, household);
        }
 
        Integer monthOfAge = entity.getMonthOfAge();
        if (monthOfAge != null) {
            stmt.bindLong(22, monthOfAge);
        }
 
        java.util.Date visitDate = entity.getVisitDate();
        if (visitDate != null) {
            stmt.bindLong(23, visitDate.getTime());
        }
 
        String childTcmOne = entity.getChildTcmOne();
        if (childTcmOne != null) {
            stmt.bindString(24, childTcmOne);
        }
 
        String childTcmTwo = entity.getChildTcmTwo();
        if (childTcmTwo != null) {
            stmt.bindString(25, childTcmTwo);
        }
 
        String childTcmThree = entity.getChildTcmThree();
        if (childTcmThree != null) {
            stmt.bindString(26, childTcmThree);
        }
 
        String childTcmFour = entity.getChildTcmFour();
        if (childTcmFour != null) {
            stmt.bindString(27, childTcmFour);
        }
 
        String childTcmFive = entity.getChildTcmFive();
        if (childTcmFive != null) {
            stmt.bindString(28, childTcmFive);
        }
 
        String childTcmOther = entity.getChildTcmOther();
        if (childTcmOther != null) {
            stmt.bindString(29, childTcmOther);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(30, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(31, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(32, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(33, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(34, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(35, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(36, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(37, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(38, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(39, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(40, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildTcmLedger entity) {
        stmt.clearBindings();
 
        String childTcmLedgerId = entity.getChildTcmLedgerId();
        if (childTcmLedgerId != null) {
            stmt.bindString(1, childTcmLedgerId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String newbornName = entity.getNewbornName();
        if (newbornName != null) {
            stmt.bindString(3, newbornName);
        }
 
        String newbornSexCode = entity.getNewbornSexCode();
        if (newbornSexCode != null) {
            stmt.bindString(4, newbornSexCode);
        }
 
        String newbornSexValue = entity.getNewbornSexValue();
        if (newbornSexValue != null) {
            stmt.bindString(5, newbornSexValue);
        }
 
        java.util.Date newbornBirthDate = entity.getNewbornBirthDate();
        if (newbornBirthDate != null) {
            stmt.bindLong(6, newbornBirthDate.getTime());
        }
 
        String newbornNation = entity.getNewbornNation();
        if (newbornNation != null) {
            stmt.bindString(7, newbornNation);
        }
 
        String presentAddrProvince = entity.getPresentAddrProvince();
        if (presentAddrProvince != null) {
            stmt.bindString(8, presentAddrProvince);
        }
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(9, fatherId);
        }
 
        String fatherName = entity.getFatherName();
        if (fatherName != null) {
            stmt.bindString(10, fatherName);
        }
 
        String fatherIdno = entity.getFatherIdno();
        if (fatherIdno != null) {
            stmt.bindString(11, fatherIdno);
        }
 
        String fatherOccupCode = entity.getFatherOccupCode();
        if (fatherOccupCode != null) {
            stmt.bindString(12, fatherOccupCode);
        }
 
        String fatherTelNo = entity.getFatherTelNo();
        if (fatherTelNo != null) {
            stmt.bindString(13, fatherTelNo);
        }
 
        java.util.Date fatherBirthDate = entity.getFatherBirthDate();
        if (fatherBirthDate != null) {
            stmt.bindLong(14, fatherBirthDate.getTime());
        }
 
        String motherId = entity.getMotherId();
        if (motherId != null) {
            stmt.bindString(15, motherId);
        }
 
        String motherName = entity.getMotherName();
        if (motherName != null) {
            stmt.bindString(16, motherName);
        }
 
        String motherIdno = entity.getMotherIdno();
        if (motherIdno != null) {
            stmt.bindString(17, motherIdno);
        }
 
        String motherOccupCode = entity.getMotherOccupCode();
        if (motherOccupCode != null) {
            stmt.bindString(18, motherOccupCode);
        }
 
        String motherTelNo = entity.getMotherTelNo();
        if (motherTelNo != null) {
            stmt.bindString(19, motherTelNo);
        }
 
        java.util.Date motherBirthDate = entity.getMotherBirthDate();
        if (motherBirthDate != null) {
            stmt.bindLong(20, motherBirthDate.getTime());
        }
 
        String household = entity.getHousehold();
        if (household != null) {
            stmt.bindString(21, household);
        }
 
        Integer monthOfAge = entity.getMonthOfAge();
        if (monthOfAge != null) {
            stmt.bindLong(22, monthOfAge);
        }
 
        java.util.Date visitDate = entity.getVisitDate();
        if (visitDate != null) {
            stmt.bindLong(23, visitDate.getTime());
        }
 
        String childTcmOne = entity.getChildTcmOne();
        if (childTcmOne != null) {
            stmt.bindString(24, childTcmOne);
        }
 
        String childTcmTwo = entity.getChildTcmTwo();
        if (childTcmTwo != null) {
            stmt.bindString(25, childTcmTwo);
        }
 
        String childTcmThree = entity.getChildTcmThree();
        if (childTcmThree != null) {
            stmt.bindString(26, childTcmThree);
        }
 
        String childTcmFour = entity.getChildTcmFour();
        if (childTcmFour != null) {
            stmt.bindString(27, childTcmFour);
        }
 
        String childTcmFive = entity.getChildTcmFive();
        if (childTcmFive != null) {
            stmt.bindString(28, childTcmFive);
        }
 
        String childTcmOther = entity.getChildTcmOther();
        if (childTcmOther != null) {
            stmt.bindString(29, childTcmOther);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(30, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(31, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(32, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(33, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(34, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(35, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(36, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(37, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(38, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(39, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(40, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChildTcmLedger readEntity(Cursor cursor, int offset) {
        ChildTcmLedger entity = new ChildTcmLedger( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // childTcmLedgerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newbornName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newbornSexCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // newbornSexValue
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // newbornBirthDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newbornNation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // presentAddrProvince
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fatherId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fatherName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fatherIdno
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fatherOccupCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fatherTelNo
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // fatherBirthDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // motherId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // motherName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // motherIdno
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // motherOccupCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // motherTelNo
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // motherBirthDate
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // household
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // monthOfAge
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // visitDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // childTcmOne
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // childTcmTwo
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // childTcmThree
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // childTcmFour
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // childTcmFive
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // childTcmOther
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // isCancel
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // createOrgId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // orgName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // creatorId
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // creator
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // createTime
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // modifiedOrgId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modifiedOrgName
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // modifierId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // modifier
            cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildTcmLedger entity, int offset) {
        entity.setChildTcmLedgerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewbornName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewbornSexCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewbornSexValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNewbornBirthDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setNewbornNation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPresentAddrProvince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFatherId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFatherName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFatherIdno(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFatherOccupCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFatherTelNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFatherBirthDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setMotherId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMotherName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMotherIdno(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMotherOccupCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMotherTelNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMotherBirthDate(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setHousehold(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMonthOfAge(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setVisitDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setChildTcmOne(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setChildTcmTwo(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setChildTcmThree(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setChildTcmFour(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setChildTcmFive(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setChildTcmOther(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsCancel(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setCreateOrgId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setOrgName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCreatorId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCreator(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCreateTime(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setModifiedOrgId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModifiedOrgName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModifierId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setModifier(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setModifiedTime(cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChildTcmLedger entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChildTcmLedger entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
