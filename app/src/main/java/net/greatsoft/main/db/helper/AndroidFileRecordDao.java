package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.AndroidFileRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANDROID_FILE_RECORD".
*/
public class AndroidFileRecordDao extends AbstractDao<AndroidFileRecord, Void> {

    public static final String TABLENAME = "ANDROID_FILE_RECORD";

    /**
     * Properties of entity AndroidFileRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AndroidFileRecordId = new Property(0, String.class, "androidFileRecordId", false, "ANDROID_FILE_RECORD_ID");
        public final static Property ReferenceKey = new Property(1, String.class, "referenceKey", false, "REFERENCE_KEY");
        public final static Property AttachmentId = new Property(2, String.class, "attachmentId", false, "ATTACHMENT_ID");
        public final static Property UploadDate = new Property(3, java.util.Date.class, "uploadDate", false, "UPLOAD_DATE");
        public final static Property ServiceItemId = new Property(4, String.class, "serviceItemId", false, "SERVICE_ITEM_ID");
    };


    public AndroidFileRecordDao(DaoConfig config) {
        super(config);
    }
    
    public AndroidFileRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANDROID_FILE_RECORD\" (" + //
                "\"ANDROID_FILE_RECORD_ID\" TEXT," + // 0: androidFileRecordId
                "\"REFERENCE_KEY\" TEXT," + // 1: referenceKey
                "\"ATTACHMENT_ID\" TEXT," + // 2: attachmentId
                "\"UPLOAD_DATE\" INTEGER," + // 3: uploadDate
                "\"SERVICE_ITEM_ID\" TEXT);"); // 4: serviceItemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANDROID_FILE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AndroidFileRecord entity) {
        stmt.clearBindings();
 
        String androidFileRecordId = entity.getAndroidFileRecordId();
        if (androidFileRecordId != null) {
            stmt.bindString(1, androidFileRecordId);
        }
 
        String referenceKey = entity.getReferenceKey();
        if (referenceKey != null) {
            stmt.bindString(2, referenceKey);
        }
 
        String attachmentId = entity.getAttachmentId();
        if (attachmentId != null) {
            stmt.bindString(3, attachmentId);
        }
 
        java.util.Date uploadDate = entity.getUploadDate();
        if (uploadDate != null) {
            stmt.bindLong(4, uploadDate.getTime());
        }
 
        String serviceItemId = entity.getServiceItemId();
        if (serviceItemId != null) {
            stmt.bindString(5, serviceItemId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AndroidFileRecord entity) {
        stmt.clearBindings();
 
        String androidFileRecordId = entity.getAndroidFileRecordId();
        if (androidFileRecordId != null) {
            stmt.bindString(1, androidFileRecordId);
        }
 
        String referenceKey = entity.getReferenceKey();
        if (referenceKey != null) {
            stmt.bindString(2, referenceKey);
        }
 
        String attachmentId = entity.getAttachmentId();
        if (attachmentId != null) {
            stmt.bindString(3, attachmentId);
        }
 
        java.util.Date uploadDate = entity.getUploadDate();
        if (uploadDate != null) {
            stmt.bindLong(4, uploadDate.getTime());
        }
 
        String serviceItemId = entity.getServiceItemId();
        if (serviceItemId != null) {
            stmt.bindString(5, serviceItemId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AndroidFileRecord readEntity(Cursor cursor, int offset) {
        AndroidFileRecord entity = new AndroidFileRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // androidFileRecordId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // referenceKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attachmentId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // uploadDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // serviceItemId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AndroidFileRecord entity, int offset) {
        entity.setAndroidFileRecordId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReferenceKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttachmentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUploadDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setServiceItemId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AndroidFileRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AndroidFileRecord entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
