package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.hyperinfo.HyperInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HYPER_INFO".
*/
public class HyperInfoDao extends AbstractDao<HyperInfo, Void> {

    public static final String TABLENAME = "HYPER_INFO";

    /**
     * Properties of entity HyperInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HyperInfoId = new Property(0, String.class, "hyperInfoId", false, "HYPER_INFO_ID");
        public final static Property PersonInfoId = new Property(1, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property ManageOrgId = new Property(2, String.class, "manageOrgId", false, "MANAGE_ORG_ID");
        public final static Property RespDoctorId = new Property(3, String.class, "respDoctorId", false, "RESP_DOCTOR_ID");
        public final static Property RespDoctorName = new Property(4, String.class, "respDoctorName", false, "RESP_DOCTOR_NAME");
        public final static Property HyperInfoNo = new Property(5, String.class, "hyperInfoNo", false, "HYPER_INFO_NO");
        public final static Property HyperManagLevelCode = new Property(6, String.class, "hyperManagLevelCode", false, "HYPER_MANAG_LEVEL_CODE");
        public final static Property HyperManagLevelName = new Property(7, String.class, "hyperManagLevelName", false, "HYPER_MANAG_LEVEL_NAME");
        public final static Property HyperTypeCode = new Property(8, String.class, "hyperTypeCode", false, "HYPER_TYPE_CODE");
        public final static Property DiagnoseSbp = new Property(9, Integer.class, "diagnoseSbp", false, "DIAGNOSE_SBP");
        public final static Property DiagnoseDbp = new Property(10, Integer.class, "diagnoseDbp", false, "DIAGNOSE_DBP");
        public final static Property PersonalHistory = new Property(11, String.class, "personalHistory", false, "PERSONAL_HISTORY");
        public final static Property AllergicHistoryCode = new Property(12, String.class, "allergicHistoryCode", false, "ALLERGIC_HISTORY_CODE");
        public final static Property AllergicHistoryValue = new Property(13, String.class, "allergicHistoryValue", false, "ALLERGIC_HISTORY_VALUE");
        public final static Property DiagnoseDate = new Property(14, java.util.Date.class, "diagnoseDate", false, "DIAGNOSE_DATE");
        public final static Property DiagnoseOrgName = new Property(15, String.class, "diagnoseOrgName", false, "DIAGNOSE_ORG_NAME");
        public final static Property UserCreateTime = new Property(16, java.util.Date.class, "userCreateTime", false, "USER_CREATE_TIME");
        public final static Property ComplicationCode = new Property(17, String.class, "complicationCode", false, "COMPLICATION_CODE");
        public final static Property SelfCareCode = new Property(18, String.class, "selfCareCode", false, "SELF_CARE_CODE");
        public final static Property SmokingCode = new Property(19, String.class, "smokingCode", false, "SMOKING_CODE");
        public final static Property DrinkingCode = new Property(20, String.class, "drinkingCode", false, "DRINKING_CODE");
        public final static Property ExerciseCode = new Property(21, String.class, "exerciseCode", false, "EXERCISE_CODE");
        public final static Property Height = new Property(22, Double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(23, Double.class, "weight", false, "WEIGHT");
        public final static Property Pulse = new Property(24, Integer.class, "pulse", false, "PULSE");
        public final static Property HeartRate = new Property(25, Integer.class, "heartRate", false, "HEART_RATE");
        public final static Property Sbp = new Property(26, Integer.class, "sbp", false, "SBP");
        public final static Property Dbp = new Property(27, Integer.class, "dbp", false, "DBP");
        public final static Property Fbg = new Property(28, Double.class, "fbg", false, "FBG");
        public final static Property Pbg = new Property(29, Double.class, "pbg", false, "PBG");
        public final static Property Tg = new Property(30, Double.class, "tg", false, "TG");
        public final static Property Tcho = new Property(31, Double.class, "tcho", false, "TCHO");
        public final static Property Ldlc = new Property(32, Double.class, "ldlc", false, "LDLC");
        public final static Property Hdlc = new Property(33, Double.class, "hdlc", false, "HDLC");
        public final static Property RetionopathyCode = new Property(34, String.class, "retionopathyCode", false, "RETIONOPATHY_CODE");
        public final static Property NeuropathyCode = new Property(35, String.class, "neuropathyCode", false, "NEUROPATHY_CODE");
        public final static Property UrineMalb = new Property(36, Double.class, "urineMalb", false, "URINE_MALB");
        public final static Property EcgResult = new Property(37, String.class, "ecgResult", false, "ECG_RESULT");
        public final static Property OthersExam = new Property(38, String.class, "othersExam", false, "OTHERS_EXAM");
        public final static Property HasUseDrugs = new Property(39, String.class, "hasUseDrugs", false, "HAS_USE_DRUGS");
        public final static Property LimitSaltCode = new Property(40, String.class, "limitSaltCode", false, "LIMIT_SALT_CODE");
        public final static Property PhysicalActivityCode = new Property(41, String.class, "physicalActivityCode", false, "PHYSICAL_ACTIVITY_CODE");
        public final static Property StopSmokingCode = new Property(42, String.class, "stopSmokingCode", false, "STOP_SMOKING_CODE");
        public final static Property HealthcareOrg = new Property(43, String.class, "healthcareOrg", false, "HEALTHCARE_ORG");
        public final static Property LimitAlcoholCode = new Property(44, String.class, "limitAlcoholCode", false, "LIMIT_ALCOHOL_CODE");
        public final static Property LastVisitDate = new Property(45, java.util.Date.class, "lastVisitDate", false, "LAST_VISIT_DATE");
        public final static Property NextVisitDate = new Property(46, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property IsCancel = new Property(47, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(48, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(49, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(50, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(51, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(52, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(53, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(54, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(55, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(56, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(57, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
        public final static Property JsonDetail = new Property(58, String.class, "jsonDetail", false, "JSON_DETAIL");
        public final static Property HouseholdRegister = new Property(59, String.class, "householdRegister", false, "HOUSEHOLD_REGISTER");
    };


    public HyperInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HyperInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HYPER_INFO\" (" + //
                "\"HYPER_INFO_ID\" TEXT," + // 0: hyperInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 1: personInfoId
                "\"MANAGE_ORG_ID\" TEXT," + // 2: manageOrgId
                "\"RESP_DOCTOR_ID\" TEXT," + // 3: respDoctorId
                "\"RESP_DOCTOR_NAME\" TEXT," + // 4: respDoctorName
                "\"HYPER_INFO_NO\" TEXT," + // 5: hyperInfoNo
                "\"HYPER_MANAG_LEVEL_CODE\" TEXT," + // 6: hyperManagLevelCode
                "\"HYPER_MANAG_LEVEL_NAME\" TEXT," + // 7: hyperManagLevelName
                "\"HYPER_TYPE_CODE\" TEXT," + // 8: hyperTypeCode
                "\"DIAGNOSE_SBP\" INTEGER," + // 9: diagnoseSbp
                "\"DIAGNOSE_DBP\" INTEGER," + // 10: diagnoseDbp
                "\"PERSONAL_HISTORY\" TEXT," + // 11: personalHistory
                "\"ALLERGIC_HISTORY_CODE\" TEXT," + // 12: allergicHistoryCode
                "\"ALLERGIC_HISTORY_VALUE\" TEXT," + // 13: allergicHistoryValue
                "\"DIAGNOSE_DATE\" INTEGER," + // 14: diagnoseDate
                "\"DIAGNOSE_ORG_NAME\" TEXT," + // 15: diagnoseOrgName
                "\"USER_CREATE_TIME\" INTEGER," + // 16: userCreateTime
                "\"COMPLICATION_CODE\" TEXT," + // 17: complicationCode
                "\"SELF_CARE_CODE\" TEXT," + // 18: selfCareCode
                "\"SMOKING_CODE\" TEXT," + // 19: smokingCode
                "\"DRINKING_CODE\" TEXT," + // 20: drinkingCode
                "\"EXERCISE_CODE\" TEXT," + // 21: exerciseCode
                "\"HEIGHT\" REAL," + // 22: height
                "\"WEIGHT\" REAL," + // 23: weight
                "\"PULSE\" INTEGER," + // 24: pulse
                "\"HEART_RATE\" INTEGER," + // 25: heartRate
                "\"SBP\" INTEGER," + // 26: sbp
                "\"DBP\" INTEGER," + // 27: dbp
                "\"FBG\" REAL," + // 28: fbg
                "\"PBG\" REAL," + // 29: pbg
                "\"TG\" REAL," + // 30: tg
                "\"TCHO\" REAL," + // 31: tcho
                "\"LDLC\" REAL," + // 32: ldlc
                "\"HDLC\" REAL," + // 33: hdlc
                "\"RETIONOPATHY_CODE\" TEXT," + // 34: retionopathyCode
                "\"NEUROPATHY_CODE\" TEXT," + // 35: neuropathyCode
                "\"URINE_MALB\" REAL," + // 36: urineMalb
                "\"ECG_RESULT\" TEXT," + // 37: ecgResult
                "\"OTHERS_EXAM\" TEXT," + // 38: othersExam
                "\"HAS_USE_DRUGS\" TEXT," + // 39: hasUseDrugs
                "\"LIMIT_SALT_CODE\" TEXT," + // 40: limitSaltCode
                "\"PHYSICAL_ACTIVITY_CODE\" TEXT," + // 41: physicalActivityCode
                "\"STOP_SMOKING_CODE\" TEXT," + // 42: stopSmokingCode
                "\"HEALTHCARE_ORG\" TEXT," + // 43: healthcareOrg
                "\"LIMIT_ALCOHOL_CODE\" TEXT," + // 44: limitAlcoholCode
                "\"LAST_VISIT_DATE\" INTEGER," + // 45: lastVisitDate
                "\"NEXT_VISIT_DATE\" INTEGER," + // 46: nextVisitDate
                "\"IS_CANCEL\" INTEGER," + // 47: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 48: createOrgId
                "\"ORG_NAME\" TEXT," + // 49: orgName
                "\"CREATOR_ID\" TEXT," + // 50: creatorId
                "\"CREATOR\" TEXT," + // 51: creator
                "\"CREATE_TIME\" INTEGER," + // 52: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 53: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 54: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 55: modifierId
                "\"MODIFIER\" TEXT," + // 56: modifier
                "\"MODIFIED_TIME\" INTEGER," + // 57: modifiedTime
                "\"JSON_DETAIL\" TEXT," + // 58: jsonDetail
                "\"HOUSEHOLD_REGISTER\" TEXT);"); // 59: householdRegister
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HYPER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HyperInfo entity) {
        stmt.clearBindings();
 
        String hyperInfoId = entity.getHyperInfoId();
        if (hyperInfoId != null) {
            stmt.bindString(1, hyperInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(4, respDoctorId);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        String hyperInfoNo = entity.getHyperInfoNo();
        if (hyperInfoNo != null) {
            stmt.bindString(6, hyperInfoNo);
        }
 
        String hyperManagLevelCode = entity.getHyperManagLevelCode();
        if (hyperManagLevelCode != null) {
            stmt.bindString(7, hyperManagLevelCode);
        }
 
        String hyperManagLevelName = entity.getHyperManagLevelName();
        if (hyperManagLevelName != null) {
            stmt.bindString(8, hyperManagLevelName);
        }
 
        String hyperTypeCode = entity.getHyperTypeCode();
        if (hyperTypeCode != null) {
            stmt.bindString(9, hyperTypeCode);
        }
 
        Integer diagnoseSbp = entity.getDiagnoseSbp();
        if (diagnoseSbp != null) {
            stmt.bindLong(10, diagnoseSbp);
        }
 
        Integer diagnoseDbp = entity.getDiagnoseDbp();
        if (diagnoseDbp != null) {
            stmt.bindLong(11, diagnoseDbp);
        }
 
        String personalHistory = entity.getPersonalHistory();
        if (personalHistory != null) {
            stmt.bindString(12, personalHistory);
        }
 
        String allergicHistoryCode = entity.getAllergicHistoryCode();
        if (allergicHistoryCode != null) {
            stmt.bindString(13, allergicHistoryCode);
        }
 
        String allergicHistoryValue = entity.getAllergicHistoryValue();
        if (allergicHistoryValue != null) {
            stmt.bindString(14, allergicHistoryValue);
        }
 
        java.util.Date diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindLong(15, diagnoseDate.getTime());
        }
 
        String diagnoseOrgName = entity.getDiagnoseOrgName();
        if (diagnoseOrgName != null) {
            stmt.bindString(16, diagnoseOrgName);
        }
 
        java.util.Date userCreateTime = entity.getUserCreateTime();
        if (userCreateTime != null) {
            stmt.bindLong(17, userCreateTime.getTime());
        }
 
        String complicationCode = entity.getComplicationCode();
        if (complicationCode != null) {
            stmt.bindString(18, complicationCode);
        }
 
        String selfCareCode = entity.getSelfCareCode();
        if (selfCareCode != null) {
            stmt.bindString(19, selfCareCode);
        }
 
        String smokingCode = entity.getSmokingCode();
        if (smokingCode != null) {
            stmt.bindString(20, smokingCode);
        }
 
        String drinkingCode = entity.getDrinkingCode();
        if (drinkingCode != null) {
            stmt.bindString(21, drinkingCode);
        }
 
        String exerciseCode = entity.getExerciseCode();
        if (exerciseCode != null) {
            stmt.bindString(22, exerciseCode);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(23, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(24, weight);
        }
 
        Integer pulse = entity.getPulse();
        if (pulse != null) {
            stmt.bindLong(25, pulse);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(26, heartRate);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(27, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(28, dbp);
        }
 
        Double fbg = entity.getFbg();
        if (fbg != null) {
            stmt.bindDouble(29, fbg);
        }
 
        Double pbg = entity.getPbg();
        if (pbg != null) {
            stmt.bindDouble(30, pbg);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(31, tg);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(32, tcho);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(33, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(34, hdlc);
        }
 
        String retionopathyCode = entity.getRetionopathyCode();
        if (retionopathyCode != null) {
            stmt.bindString(35, retionopathyCode);
        }
 
        String neuropathyCode = entity.getNeuropathyCode();
        if (neuropathyCode != null) {
            stmt.bindString(36, neuropathyCode);
        }
 
        Double urineMalb = entity.getUrineMalb();
        if (urineMalb != null) {
            stmt.bindDouble(37, urineMalb);
        }
 
        String ecgResult = entity.getEcgResult();
        if (ecgResult != null) {
            stmt.bindString(38, ecgResult);
        }
 
        String othersExam = entity.getOthersExam();
        if (othersExam != null) {
            stmt.bindString(39, othersExam);
        }
 
        String hasUseDrugs = entity.getHasUseDrugs();
        if (hasUseDrugs != null) {
            stmt.bindString(40, hasUseDrugs);
        }
 
        String limitSaltCode = entity.getLimitSaltCode();
        if (limitSaltCode != null) {
            stmt.bindString(41, limitSaltCode);
        }
 
        String physicalActivityCode = entity.getPhysicalActivityCode();
        if (physicalActivityCode != null) {
            stmt.bindString(42, physicalActivityCode);
        }
 
        String stopSmokingCode = entity.getStopSmokingCode();
        if (stopSmokingCode != null) {
            stmt.bindString(43, stopSmokingCode);
        }
 
        String healthcareOrg = entity.getHealthcareOrg();
        if (healthcareOrg != null) {
            stmt.bindString(44, healthcareOrg);
        }
 
        String limitAlcoholCode = entity.getLimitAlcoholCode();
        if (limitAlcoholCode != null) {
            stmt.bindString(45, limitAlcoholCode);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(46, lastVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(47, nextVisitDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(48, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(49, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(50, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(51, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(52, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(53, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(54, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(55, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(56, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(57, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(58, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(59, jsonDetail);
        }
 
        String householdRegister = entity.getHouseholdRegister();
        if (householdRegister != null) {
            stmt.bindString(60, householdRegister);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HyperInfo entity) {
        stmt.clearBindings();
 
        String hyperInfoId = entity.getHyperInfoId();
        if (hyperInfoId != null) {
            stmt.bindString(1, hyperInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(2, personInfoId);
        }
 
        String manageOrgId = entity.getManageOrgId();
        if (manageOrgId != null) {
            stmt.bindString(3, manageOrgId);
        }
 
        String respDoctorId = entity.getRespDoctorId();
        if (respDoctorId != null) {
            stmt.bindString(4, respDoctorId);
        }
 
        String respDoctorName = entity.getRespDoctorName();
        if (respDoctorName != null) {
            stmt.bindString(5, respDoctorName);
        }
 
        String hyperInfoNo = entity.getHyperInfoNo();
        if (hyperInfoNo != null) {
            stmt.bindString(6, hyperInfoNo);
        }
 
        String hyperManagLevelCode = entity.getHyperManagLevelCode();
        if (hyperManagLevelCode != null) {
            stmt.bindString(7, hyperManagLevelCode);
        }
 
        String hyperManagLevelName = entity.getHyperManagLevelName();
        if (hyperManagLevelName != null) {
            stmt.bindString(8, hyperManagLevelName);
        }
 
        String hyperTypeCode = entity.getHyperTypeCode();
        if (hyperTypeCode != null) {
            stmt.bindString(9, hyperTypeCode);
        }
 
        Integer diagnoseSbp = entity.getDiagnoseSbp();
        if (diagnoseSbp != null) {
            stmt.bindLong(10, diagnoseSbp);
        }
 
        Integer diagnoseDbp = entity.getDiagnoseDbp();
        if (diagnoseDbp != null) {
            stmt.bindLong(11, diagnoseDbp);
        }
 
        String personalHistory = entity.getPersonalHistory();
        if (personalHistory != null) {
            stmt.bindString(12, personalHistory);
        }
 
        String allergicHistoryCode = entity.getAllergicHistoryCode();
        if (allergicHistoryCode != null) {
            stmt.bindString(13, allergicHistoryCode);
        }
 
        String allergicHistoryValue = entity.getAllergicHistoryValue();
        if (allergicHistoryValue != null) {
            stmt.bindString(14, allergicHistoryValue);
        }
 
        java.util.Date diagnoseDate = entity.getDiagnoseDate();
        if (diagnoseDate != null) {
            stmt.bindLong(15, diagnoseDate.getTime());
        }
 
        String diagnoseOrgName = entity.getDiagnoseOrgName();
        if (diagnoseOrgName != null) {
            stmt.bindString(16, diagnoseOrgName);
        }
 
        java.util.Date userCreateTime = entity.getUserCreateTime();
        if (userCreateTime != null) {
            stmt.bindLong(17, userCreateTime.getTime());
        }
 
        String complicationCode = entity.getComplicationCode();
        if (complicationCode != null) {
            stmt.bindString(18, complicationCode);
        }
 
        String selfCareCode = entity.getSelfCareCode();
        if (selfCareCode != null) {
            stmt.bindString(19, selfCareCode);
        }
 
        String smokingCode = entity.getSmokingCode();
        if (smokingCode != null) {
            stmt.bindString(20, smokingCode);
        }
 
        String drinkingCode = entity.getDrinkingCode();
        if (drinkingCode != null) {
            stmt.bindString(21, drinkingCode);
        }
 
        String exerciseCode = entity.getExerciseCode();
        if (exerciseCode != null) {
            stmt.bindString(22, exerciseCode);
        }
 
        Double height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(23, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(24, weight);
        }
 
        Integer pulse = entity.getPulse();
        if (pulse != null) {
            stmt.bindLong(25, pulse);
        }
 
        Integer heartRate = entity.getHeartRate();
        if (heartRate != null) {
            stmt.bindLong(26, heartRate);
        }
 
        Integer sbp = entity.getSbp();
        if (sbp != null) {
            stmt.bindLong(27, sbp);
        }
 
        Integer dbp = entity.getDbp();
        if (dbp != null) {
            stmt.bindLong(28, dbp);
        }
 
        Double fbg = entity.getFbg();
        if (fbg != null) {
            stmt.bindDouble(29, fbg);
        }
 
        Double pbg = entity.getPbg();
        if (pbg != null) {
            stmt.bindDouble(30, pbg);
        }
 
        Double tg = entity.getTg();
        if (tg != null) {
            stmt.bindDouble(31, tg);
        }
 
        Double tcho = entity.getTcho();
        if (tcho != null) {
            stmt.bindDouble(32, tcho);
        }
 
        Double ldlc = entity.getLdlc();
        if (ldlc != null) {
            stmt.bindDouble(33, ldlc);
        }
 
        Double hdlc = entity.getHdlc();
        if (hdlc != null) {
            stmt.bindDouble(34, hdlc);
        }
 
        String retionopathyCode = entity.getRetionopathyCode();
        if (retionopathyCode != null) {
            stmt.bindString(35, retionopathyCode);
        }
 
        String neuropathyCode = entity.getNeuropathyCode();
        if (neuropathyCode != null) {
            stmt.bindString(36, neuropathyCode);
        }
 
        Double urineMalb = entity.getUrineMalb();
        if (urineMalb != null) {
            stmt.bindDouble(37, urineMalb);
        }
 
        String ecgResult = entity.getEcgResult();
        if (ecgResult != null) {
            stmt.bindString(38, ecgResult);
        }
 
        String othersExam = entity.getOthersExam();
        if (othersExam != null) {
            stmt.bindString(39, othersExam);
        }
 
        String hasUseDrugs = entity.getHasUseDrugs();
        if (hasUseDrugs != null) {
            stmt.bindString(40, hasUseDrugs);
        }
 
        String limitSaltCode = entity.getLimitSaltCode();
        if (limitSaltCode != null) {
            stmt.bindString(41, limitSaltCode);
        }
 
        String physicalActivityCode = entity.getPhysicalActivityCode();
        if (physicalActivityCode != null) {
            stmt.bindString(42, physicalActivityCode);
        }
 
        String stopSmokingCode = entity.getStopSmokingCode();
        if (stopSmokingCode != null) {
            stmt.bindString(43, stopSmokingCode);
        }
 
        String healthcareOrg = entity.getHealthcareOrg();
        if (healthcareOrg != null) {
            stmt.bindString(44, healthcareOrg);
        }
 
        String limitAlcoholCode = entity.getLimitAlcoholCode();
        if (limitAlcoholCode != null) {
            stmt.bindString(45, limitAlcoholCode);
        }
 
        java.util.Date lastVisitDate = entity.getLastVisitDate();
        if (lastVisitDate != null) {
            stmt.bindLong(46, lastVisitDate.getTime());
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(47, nextVisitDate.getTime());
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(48, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(49, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(50, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(51, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(52, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(53, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(54, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(55, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(56, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(57, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(58, modifiedTime.getTime());
        }
 
        String jsonDetail = entity.getJsonDetail();
        if (jsonDetail != null) {
            stmt.bindString(59, jsonDetail);
        }
 
        String householdRegister = entity.getHouseholdRegister();
        if (householdRegister != null) {
            stmt.bindString(60, householdRegister);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HyperInfo readEntity(Cursor cursor, int offset) {
        HyperInfo entity = new HyperInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // hyperInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // manageOrgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // respDoctorId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // respDoctorName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hyperInfoNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hyperManagLevelCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hyperManagLevelName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hyperTypeCode
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // diagnoseSbp
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // diagnoseDbp
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // personalHistory
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // allergicHistoryCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // allergicHistoryValue
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // diagnoseDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // diagnoseOrgName
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // userCreateTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // complicationCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // selfCareCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // smokingCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // drinkingCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // exerciseCode
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // height
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // weight
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // pulse
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // heartRate
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // sbp
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // dbp
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // fbg
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // pbg
            cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30), // tg
            cursor.isNull(offset + 31) ? null : cursor.getDouble(offset + 31), // tcho
            cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32), // ldlc
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // hdlc
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // retionopathyCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // neuropathyCode
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // urineMalb
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // ecgResult
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // othersExam
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // hasUseDrugs
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // limitSaltCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // physicalActivityCode
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // stopSmokingCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // healthcareOrg
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // limitAlcoholCode
            cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)), // lastVisitDate
            cursor.isNull(offset + 46) ? null : new java.util.Date(cursor.getLong(offset + 46)), // nextVisitDate
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // isCancel
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // createOrgId
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // orgName
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // creatorId
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // creator
            cursor.isNull(offset + 52) ? null : new java.util.Date(cursor.getLong(offset + 52)), // createTime
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // modifiedOrgId
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // modifiedOrgName
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // modifierId
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // modifier
            cursor.isNull(offset + 57) ? null : new java.util.Date(cursor.getLong(offset + 57)), // modifiedTime
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // jsonDetail
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59) // householdRegister
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HyperInfo entity, int offset) {
        entity.setHyperInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManageOrgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRespDoctorId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRespDoctorName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHyperInfoNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHyperManagLevelCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHyperManagLevelName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHyperTypeCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDiagnoseSbp(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDiagnoseDbp(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPersonalHistory(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAllergicHistoryCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAllergicHistoryValue(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDiagnoseDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setDiagnoseOrgName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserCreateTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setComplicationCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSelfCareCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSmokingCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDrinkingCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setExerciseCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHeight(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setWeight(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setPulse(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setHeartRate(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setSbp(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setDbp(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setFbg(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setPbg(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setTg(cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30));
        entity.setTcho(cursor.isNull(offset + 31) ? null : cursor.getDouble(offset + 31));
        entity.setLdlc(cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32));
        entity.setHdlc(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setRetionopathyCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setNeuropathyCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setUrineMalb(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setEcgResult(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setOthersExam(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setHasUseDrugs(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setLimitSaltCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setPhysicalActivityCode(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setStopSmokingCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setHealthcareOrg(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setLimitAlcoholCode(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setLastVisitDate(cursor.isNull(offset + 45) ? null : new java.util.Date(cursor.getLong(offset + 45)));
        entity.setNextVisitDate(cursor.isNull(offset + 46) ? null : new java.util.Date(cursor.getLong(offset + 46)));
        entity.setIsCancel(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
        entity.setCreateOrgId(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setOrgName(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setCreatorId(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setCreator(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setCreateTime(cursor.isNull(offset + 52) ? null : new java.util.Date(cursor.getLong(offset + 52)));
        entity.setModifiedOrgId(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setModifiedOrgName(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setModifierId(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setModifier(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setModifiedTime(cursor.isNull(offset + 57) ? null : new java.util.Date(cursor.getLong(offset + 57)));
        entity.setJsonDetail(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setHouseholdRegister(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HyperInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HyperInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
