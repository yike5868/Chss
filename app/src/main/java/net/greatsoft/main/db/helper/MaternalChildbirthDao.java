package net.greatsoft.main.db.helper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.greatsoft.main.db.po.maternal.MaternalChildbirth;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERNAL_CHILDBIRTH".
*/
public class MaternalChildbirthDao extends AbstractDao<MaternalChildbirth, Void> {

    public static final String TABLENAME = "MATERNAL_CHILDBIRTH";

    /**
     * Properties of entity MaternalChildbirth.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaternalChildbirthId = new Property(0, String.class, "maternalChildbirthId", false, "MATERNAL_CHILDBIRTH_ID");
        public final static Property MaternalInfoId = new Property(1, String.class, "maternalInfoId", false, "MATERNAL_INFO_ID");
        public final static Property PersonInfoId = new Property(2, String.class, "personInfoId", false, "PERSON_INFO_ID");
        public final static Property MaternalRegisterId = new Property(3, String.class, "maternalRegisterId", false, "MATERNAL_REGISTER_ID");
        public final static Property PregnantCount = new Property(4, Integer.class, "pregnantCount", false, "PREGNANT_COUNT");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property VisitType = new Property(6, String.class, "visitType", false, "VISIT_TYPE");
        public final static Property LaborPlaceCode = new Property(7, String.class, "laborPlaceCode", false, "LABOR_PLACE_CODE");
        public final static Property LaborPlaceValue = new Property(8, String.class, "laborPlaceValue", false, "LABOR_PLACE_VALUE");
        public final static Property LaborWay = new Property(9, String.class, "laborWay", false, "LABOR_WAY");
        public final static Property LaborTime = new Property(10, java.util.Date.class, "laborTime", false, "LABOR_TIME");
        public final static Property GestWeeks = new Property(11, Integer.class, "gestWeeks", false, "GEST_WEEKS");
        public final static Property GestDays = new Property(12, Integer.class, "gestDays", false, "GEST_DAYS");
        public final static Property BirthTime1 = new Property(13, Double.class, "birthTime1", false, "BIRTH_TIME1");
        public final static Property BirthTime2 = new Property(14, Double.class, "birthTime2", false, "BIRTH_TIME2");
        public final static Property BirthTime3 = new Property(15, Double.class, "birthTime3", false, "BIRTH_TIME3");
        public final static Property BirthTotal = new Property(16, Double.class, "birthTotal", false, "BIRTH_TOTAL");
        public final static Property PerineumSituation = new Property(17, String.class, "perineumSituation", false, "PERINEUM_SITUATION");
        public final static Property ParturientSituationCn = new Property(18, String.class, "parturientSituationCn", false, "PARTURIENT_SITUATION_CN");
        public final static Property BabyFetusCounts = new Property(19, String.class, "babyFetusCounts", false, "BABY_FETUS_COUNTS");
        public final static Property BabyFetusCountsCn = new Property(20, Integer.class, "babyFetusCountsCn", false, "BABY_FETUS_COUNTS_CN");
        public final static Property HivConsultative = new Property(21, String.class, "hivConsultative", false, "HIV_CONSULTATIVE");
        public final static Property HivExamination = new Property(22, String.class, "hivExamination", false, "HIV_EXAMINATION");
        public final static Property SyphilisExamination = new Property(23, String.class, "syphilisExamination", false, "SYPHILIS_EXAMINATION");
        public final static Property NextVisitType = new Property(24, String.class, "nextVisitType", false, "NEXT_VISIT_TYPE");
        public final static Property NextVisitDate = new Property(25, java.util.Date.class, "nextVisitDate", false, "NEXT_VISIT_DATE");
        public final static Property PreviousVisitDate = new Property(26, java.util.Date.class, "previousVisitDate", false, "PREVIOUS_VISIT_DATE");
        public final static Property PreviousVisitTypeCode = new Property(27, String.class, "previousVisitTypeCode", false, "PREVIOUS_VISIT_TYPE_CODE");
        public final static Property PreviousVisitPerson = new Property(28, String.class, "previousVisitPerson", false, "PREVIOUS_VISIT_PERSON");
        public final static Property IsCancel = new Property(29, Integer.class, "isCancel", false, "IS_CANCEL");
        public final static Property CreateOrgId = new Property(30, String.class, "createOrgId", false, "CREATE_ORG_ID");
        public final static Property OrgName = new Property(31, String.class, "orgName", false, "ORG_NAME");
        public final static Property CreatorId = new Property(32, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property Creator = new Property(33, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(34, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifiedOrgId = new Property(35, String.class, "modifiedOrgId", false, "MODIFIED_ORG_ID");
        public final static Property ModifiedOrgName = new Property(36, String.class, "modifiedOrgName", false, "MODIFIED_ORG_NAME");
        public final static Property ModifierId = new Property(37, String.class, "modifierId", false, "MODIFIER_ID");
        public final static Property Modifier = new Property(38, String.class, "modifier", false, "MODIFIER");
        public final static Property ModifiedTime = new Property(39, java.util.Date.class, "modifiedTime", false, "MODIFIED_TIME");
    };


    public MaternalChildbirthDao(DaoConfig config) {
        super(config);
    }
    
    public MaternalChildbirthDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERNAL_CHILDBIRTH\" (" + //
                "\"MATERNAL_CHILDBIRTH_ID\" TEXT," + // 0: maternalChildbirthId
                "\"MATERNAL_INFO_ID\" TEXT," + // 1: maternalInfoId
                "\"PERSON_INFO_ID\" TEXT," + // 2: personInfoId
                "\"MATERNAL_REGISTER_ID\" TEXT," + // 3: maternalRegisterId
                "\"PREGNANT_COUNT\" INTEGER," + // 4: pregnantCount
                "\"NAME\" TEXT," + // 5: name
                "\"VISIT_TYPE\" TEXT," + // 6: visitType
                "\"LABOR_PLACE_CODE\" TEXT," + // 7: laborPlaceCode
                "\"LABOR_PLACE_VALUE\" TEXT," + // 8: laborPlaceValue
                "\"LABOR_WAY\" TEXT," + // 9: laborWay
                "\"LABOR_TIME\" INTEGER," + // 10: laborTime
                "\"GEST_WEEKS\" INTEGER," + // 11: gestWeeks
                "\"GEST_DAYS\" INTEGER," + // 12: gestDays
                "\"BIRTH_TIME1\" REAL," + // 13: birthTime1
                "\"BIRTH_TIME2\" REAL," + // 14: birthTime2
                "\"BIRTH_TIME3\" REAL," + // 15: birthTime3
                "\"BIRTH_TOTAL\" REAL," + // 16: birthTotal
                "\"PERINEUM_SITUATION\" TEXT," + // 17: perineumSituation
                "\"PARTURIENT_SITUATION_CN\" TEXT," + // 18: parturientSituationCn
                "\"BABY_FETUS_COUNTS\" TEXT," + // 19: babyFetusCounts
                "\"BABY_FETUS_COUNTS_CN\" INTEGER," + // 20: babyFetusCountsCn
                "\"HIV_CONSULTATIVE\" TEXT," + // 21: hivConsultative
                "\"HIV_EXAMINATION\" TEXT," + // 22: hivExamination
                "\"SYPHILIS_EXAMINATION\" TEXT," + // 23: syphilisExamination
                "\"NEXT_VISIT_TYPE\" TEXT," + // 24: nextVisitType
                "\"NEXT_VISIT_DATE\" INTEGER," + // 25: nextVisitDate
                "\"PREVIOUS_VISIT_DATE\" INTEGER," + // 26: previousVisitDate
                "\"PREVIOUS_VISIT_TYPE_CODE\" TEXT," + // 27: previousVisitTypeCode
                "\"PREVIOUS_VISIT_PERSON\" TEXT," + // 28: previousVisitPerson
                "\"IS_CANCEL\" INTEGER," + // 29: isCancel
                "\"CREATE_ORG_ID\" TEXT," + // 30: createOrgId
                "\"ORG_NAME\" TEXT," + // 31: orgName
                "\"CREATOR_ID\" TEXT," + // 32: creatorId
                "\"CREATOR\" TEXT," + // 33: creator
                "\"CREATE_TIME\" INTEGER," + // 34: createTime
                "\"MODIFIED_ORG_ID\" TEXT," + // 35: modifiedOrgId
                "\"MODIFIED_ORG_NAME\" TEXT," + // 36: modifiedOrgName
                "\"MODIFIER_ID\" TEXT," + // 37: modifierId
                "\"MODIFIER\" TEXT," + // 38: modifier
                "\"MODIFIED_TIME\" INTEGER);"); // 39: modifiedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERNAL_CHILDBIRTH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaternalChildbirth entity) {
        stmt.clearBindings();
 
        String maternalChildbirthId = entity.getMaternalChildbirthId();
        if (maternalChildbirthId != null) {
            stmt.bindString(1, maternalChildbirthId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(4, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(5, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(7, visitType);
        }
 
        String laborPlaceCode = entity.getLaborPlaceCode();
        if (laborPlaceCode != null) {
            stmt.bindString(8, laborPlaceCode);
        }
 
        String laborPlaceValue = entity.getLaborPlaceValue();
        if (laborPlaceValue != null) {
            stmt.bindString(9, laborPlaceValue);
        }
 
        String laborWay = entity.getLaborWay();
        if (laborWay != null) {
            stmt.bindString(10, laborWay);
        }
 
        java.util.Date laborTime = entity.getLaborTime();
        if (laborTime != null) {
            stmt.bindLong(11, laborTime.getTime());
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(12, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(13, gestDays);
        }
 
        Double birthTime1 = entity.getBirthTime1();
        if (birthTime1 != null) {
            stmt.bindDouble(14, birthTime1);
        }
 
        Double birthTime2 = entity.getBirthTime2();
        if (birthTime2 != null) {
            stmt.bindDouble(15, birthTime2);
        }
 
        Double birthTime3 = entity.getBirthTime3();
        if (birthTime3 != null) {
            stmt.bindDouble(16, birthTime3);
        }
 
        Double birthTotal = entity.getBirthTotal();
        if (birthTotal != null) {
            stmt.bindDouble(17, birthTotal);
        }
 
        String perineumSituation = entity.getPerineumSituation();
        if (perineumSituation != null) {
            stmt.bindString(18, perineumSituation);
        }
 
        String parturientSituationCn = entity.getParturientSituationCn();
        if (parturientSituationCn != null) {
            stmt.bindString(19, parturientSituationCn);
        }
 
        String babyFetusCounts = entity.getBabyFetusCounts();
        if (babyFetusCounts != null) {
            stmt.bindString(20, babyFetusCounts);
        }
 
        Integer babyFetusCountsCn = entity.getBabyFetusCountsCn();
        if (babyFetusCountsCn != null) {
            stmt.bindLong(21, babyFetusCountsCn);
        }
 
        String hivConsultative = entity.getHivConsultative();
        if (hivConsultative != null) {
            stmt.bindString(22, hivConsultative);
        }
 
        String hivExamination = entity.getHivExamination();
        if (hivExamination != null) {
            stmt.bindString(23, hivExamination);
        }
 
        String syphilisExamination = entity.getSyphilisExamination();
        if (syphilisExamination != null) {
            stmt.bindString(24, syphilisExamination);
        }
 
        String nextVisitType = entity.getNextVisitType();
        if (nextVisitType != null) {
            stmt.bindString(25, nextVisitType);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(26, nextVisitDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(27, previousVisitDate.getTime());
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(28, previousVisitTypeCode);
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(29, previousVisitPerson);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(30, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(31, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(32, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(33, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(34, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(35, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(36, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(37, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(38, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(39, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(40, modifiedTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaternalChildbirth entity) {
        stmt.clearBindings();
 
        String maternalChildbirthId = entity.getMaternalChildbirthId();
        if (maternalChildbirthId != null) {
            stmt.bindString(1, maternalChildbirthId);
        }
 
        String maternalInfoId = entity.getMaternalInfoId();
        if (maternalInfoId != null) {
            stmt.bindString(2, maternalInfoId);
        }
 
        String personInfoId = entity.getPersonInfoId();
        if (personInfoId != null) {
            stmt.bindString(3, personInfoId);
        }
 
        String maternalRegisterId = entity.getMaternalRegisterId();
        if (maternalRegisterId != null) {
            stmt.bindString(4, maternalRegisterId);
        }
 
        Integer pregnantCount = entity.getPregnantCount();
        if (pregnantCount != null) {
            stmt.bindLong(5, pregnantCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String visitType = entity.getVisitType();
        if (visitType != null) {
            stmt.bindString(7, visitType);
        }
 
        String laborPlaceCode = entity.getLaborPlaceCode();
        if (laborPlaceCode != null) {
            stmt.bindString(8, laborPlaceCode);
        }
 
        String laborPlaceValue = entity.getLaborPlaceValue();
        if (laborPlaceValue != null) {
            stmt.bindString(9, laborPlaceValue);
        }
 
        String laborWay = entity.getLaborWay();
        if (laborWay != null) {
            stmt.bindString(10, laborWay);
        }
 
        java.util.Date laborTime = entity.getLaborTime();
        if (laborTime != null) {
            stmt.bindLong(11, laborTime.getTime());
        }
 
        Integer gestWeeks = entity.getGestWeeks();
        if (gestWeeks != null) {
            stmt.bindLong(12, gestWeeks);
        }
 
        Integer gestDays = entity.getGestDays();
        if (gestDays != null) {
            stmt.bindLong(13, gestDays);
        }
 
        Double birthTime1 = entity.getBirthTime1();
        if (birthTime1 != null) {
            stmt.bindDouble(14, birthTime1);
        }
 
        Double birthTime2 = entity.getBirthTime2();
        if (birthTime2 != null) {
            stmt.bindDouble(15, birthTime2);
        }
 
        Double birthTime3 = entity.getBirthTime3();
        if (birthTime3 != null) {
            stmt.bindDouble(16, birthTime3);
        }
 
        Double birthTotal = entity.getBirthTotal();
        if (birthTotal != null) {
            stmt.bindDouble(17, birthTotal);
        }
 
        String perineumSituation = entity.getPerineumSituation();
        if (perineumSituation != null) {
            stmt.bindString(18, perineumSituation);
        }
 
        String parturientSituationCn = entity.getParturientSituationCn();
        if (parturientSituationCn != null) {
            stmt.bindString(19, parturientSituationCn);
        }
 
        String babyFetusCounts = entity.getBabyFetusCounts();
        if (babyFetusCounts != null) {
            stmt.bindString(20, babyFetusCounts);
        }
 
        Integer babyFetusCountsCn = entity.getBabyFetusCountsCn();
        if (babyFetusCountsCn != null) {
            stmt.bindLong(21, babyFetusCountsCn);
        }
 
        String hivConsultative = entity.getHivConsultative();
        if (hivConsultative != null) {
            stmt.bindString(22, hivConsultative);
        }
 
        String hivExamination = entity.getHivExamination();
        if (hivExamination != null) {
            stmt.bindString(23, hivExamination);
        }
 
        String syphilisExamination = entity.getSyphilisExamination();
        if (syphilisExamination != null) {
            stmt.bindString(24, syphilisExamination);
        }
 
        String nextVisitType = entity.getNextVisitType();
        if (nextVisitType != null) {
            stmt.bindString(25, nextVisitType);
        }
 
        java.util.Date nextVisitDate = entity.getNextVisitDate();
        if (nextVisitDate != null) {
            stmt.bindLong(26, nextVisitDate.getTime());
        }
 
        java.util.Date previousVisitDate = entity.getPreviousVisitDate();
        if (previousVisitDate != null) {
            stmt.bindLong(27, previousVisitDate.getTime());
        }
 
        String previousVisitTypeCode = entity.getPreviousVisitTypeCode();
        if (previousVisitTypeCode != null) {
            stmt.bindString(28, previousVisitTypeCode);
        }
 
        String previousVisitPerson = entity.getPreviousVisitPerson();
        if (previousVisitPerson != null) {
            stmt.bindString(29, previousVisitPerson);
        }
 
        Integer isCancel = entity.getIsCancel();
        if (isCancel != null) {
            stmt.bindLong(30, isCancel);
        }
 
        String createOrgId = entity.getCreateOrgId();
        if (createOrgId != null) {
            stmt.bindString(31, createOrgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(32, orgName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(33, creatorId);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(34, creator);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(35, createTime.getTime());
        }
 
        String modifiedOrgId = entity.getModifiedOrgId();
        if (modifiedOrgId != null) {
            stmt.bindString(36, modifiedOrgId);
        }
 
        String modifiedOrgName = entity.getModifiedOrgName();
        if (modifiedOrgName != null) {
            stmt.bindString(37, modifiedOrgName);
        }
 
        String modifierId = entity.getModifierId();
        if (modifierId != null) {
            stmt.bindString(38, modifierId);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(39, modifier);
        }
 
        java.util.Date modifiedTime = entity.getModifiedTime();
        if (modifiedTime != null) {
            stmt.bindLong(40, modifiedTime.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MaternalChildbirth readEntity(Cursor cursor, int offset) {
        MaternalChildbirth entity = new MaternalChildbirth( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // maternalChildbirthId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // maternalInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maternalRegisterId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pregnantCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // visitType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // laborPlaceCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // laborPlaceValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // laborWay
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // laborTime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // gestWeeks
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // gestDays
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // birthTime1
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // birthTime2
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // birthTime3
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // birthTotal
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // perineumSituation
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // parturientSituationCn
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // babyFetusCounts
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // babyFetusCountsCn
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // hivConsultative
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // hivExamination
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // syphilisExamination
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // nextVisitType
            cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)), // nextVisitDate
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // previousVisitDate
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // previousVisitTypeCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // previousVisitPerson
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // isCancel
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // createOrgId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // orgName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // creatorId
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // creator
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // createTime
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // modifiedOrgId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modifiedOrgName
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // modifierId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // modifier
            cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)) // modifiedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaternalChildbirth entity, int offset) {
        entity.setMaternalChildbirthId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaternalInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaternalRegisterId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPregnantCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVisitType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLaborPlaceCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLaborPlaceValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLaborWay(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLaborTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setGestWeeks(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setGestDays(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setBirthTime1(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setBirthTime2(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setBirthTime3(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setBirthTotal(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setPerineumSituation(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setParturientSituationCn(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBabyFetusCounts(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBabyFetusCountsCn(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setHivConsultative(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHivExamination(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSyphilisExamination(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setNextVisitType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNextVisitDate(cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)));
        entity.setPreviousVisitDate(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setPreviousVisitTypeCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPreviousVisitPerson(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsCancel(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setCreateOrgId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setOrgName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCreatorId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCreator(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCreateTime(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setModifiedOrgId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModifiedOrgName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModifierId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setModifier(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setModifiedTime(cursor.isNull(offset + 39) ? null : new java.util.Date(cursor.getLong(offset + 39)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MaternalChildbirth entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MaternalChildbirth entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
